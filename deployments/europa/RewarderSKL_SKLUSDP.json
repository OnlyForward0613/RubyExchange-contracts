{
  "address": "0x5B108c8C75ae266F1A66A653f14291d2C80AcCa9",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_rewardToken",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "_lpToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenPerSec",
          "type": "uint256"
        },
        {
          "internalType": "contract IRubyMasterChef",
          "name": "_rubyMasterChef",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "OnReward",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldRate",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newRate",
          "type": "uint256"
        }
      ],
      "name": "RewardRateUpdated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "claimOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "emergencyWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lpToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_lpAmount",
          "type": "uint256"
        }
      ],
      "name": "onRubyReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "pendingTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "pending",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "accTokenPerShare",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastRewardTimestamp",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rubyMasterChef",
      "outputs": [
        {
          "internalType": "contract IRubyMasterChef",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenPerSec",
          "type": "uint256"
        }
      ],
      "name": "setRewardRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenPerSec",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "direct",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "renounce",
          "type": "bool"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "updatePool",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "accTokenPerShare",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lastRewardTimestamp",
              "type": "uint256"
            }
          ],
          "internalType": "struct SimpleRewarderPerSec.PoolInfo",
          "name": "pool",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rewardDebt",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x7d51857fa8167f247e9312d482c5483b2f58e133601fe385bbf60e8bc1bee735",
  "receipt": {
    "to": "0x0000000000000000000000000000000000000000",
    "from": "0x0fe812C977646525E824D5dCC3f37A0Cf153B13b",
    "contractAddress": "0x5B108c8C75ae266F1A66A653f14291d2C80AcCa9",
    "transactionIndex": 0,
    "gasUsed": "998647",
    "logsBloom": "0x
    "blockHash": "0x59d5313b80ff59af904f248afd731cc4c1c91ac1016bf0d5dce6c1338e56ce57",
    "transactionHash": "0x7d51857fa8167f247e9312d482c5483b2f58e133601fe385bbf60e8bc1bee735",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 228610,
        "transactionHash": "0x7d51857fa8167f247e9312d482c5483b2f58e133601fe385bbf60e8bc1bee735",
        "address": "0x5B108c8C75ae266F1A66A653f14291d2C80AcCa9",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000fe812c977646525e824d5dcc3f37a0cf153b13b"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x59d5313b80ff59af904f248afd731cc4c1c91ac1016bf0d5dce6c1338e56ce57"
      }
    ],
    "blockNumber": 228610,
    "cumulativeGasUsed": "998647",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xE0595a049d02b7674572b0d59cd4880Db60EDC50",
    "0xADDf444E06B76044EAE278Bc725e27e61c3A5E38",
    0,
    "0x2BB702e94e094b8Caf7b758960621AE2d296676D"
  ],
  "numDeployments": 1,
  "solcInputHash": "8ca980d51c658bcb6e0b1d5c9f9ee0b7",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenPerSec\",\"type\":\"uint256\"},{\"internalType\":\"contract IRubyMasterChef\",\"name\":\"_rubyMasterChef\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"OnReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newRate\",\"type\":\"uint256\"}],\"name\":\"RewardRateUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_lpAmount\",\"type\":\"uint256\"}],\"name\":\"onRubyReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"pending\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"accTokenPerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardTimestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rubyMasterChef\",\"outputs\":[{\"internalType\":\"contract IRubyMasterChef\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenPerSec\",\"type\":\"uint256\"}],\"name\":\"setRewardRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenPerSec\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"direct\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"renounce\",\"type\":\"bool\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updatePool\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"accTokenPerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardTimestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct SimpleRewarderPerSec.PoolInfo\",\"name\":\"pool\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"onRubyReward(address,uint256)\":{\"params\":{\"_lpAmount\":\"Number of LP tokens the user has\",\"_user\":\"Address of user\"}},\"pendingTokens(address)\":{\"params\":{\"_user\":\"Address of user.\"},\"returns\":{\"pending\":\"reward for a given user.\"}},\"setRewardRate(uint256)\":{\"params\":{\"_tokenPerSec\":\"The number of tokens to distribute per second\"}},\"updatePool()\":{\"returns\":{\"pool\":\"Returns the pool that was updated.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"emergencyWithdraw()\":{\"notice\":\"In case rewarder is stopped before emissions finished, this function allows withdrawal of remaining tokens.\"},\"onRubyReward(address,uint256)\":{\"notice\":\"Function called by RubyMasterChef whenever staker claims Ruby harvest.  Allows staker to also receive a 2nd reward token.\"},\"pendingTokens(address)\":{\"notice\":\"View function to see pending tokens\"},\"poolInfo()\":{\"notice\":\"Info of the poolInfo.\"},\"setRewardRate(uint256)\":{\"notice\":\"Sets the distribution reward rate. This will also update the poolInfo.\"},\"updatePool()\":{\"notice\":\"Update reward variables of the given poolInfo.\"},\"userInfo(address)\":{\"notice\":\"Info of each user that stakes LP tokens.\"}},\"notice\":\"This is a sample contract to be used in the RubyMasterChef contract for partners to reward stakers with their native token alongside RUBY. It assumes no minting rights, so requires a set amount of YOUR_TOKEN to be transferred to this contract prior. E.g. say you've allocated 100,000 XYZ to the RUBY-XYZ farm over 30 days. Then you would need to transfer 100,000 XYZ and set the rewards accordingly so it's fully distributed after 30 days.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/rewarders/SimpleRewarderPerSec.sol\":\"SimpleRewarderPerSec\"},\"evmVersion\":\"istanbul\",\"libraries\":{\"__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@boringcrypto/boring-solidity/contracts/BoringOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Audit on 5-Jan-2021 by Keno and BoringCrypto\\n\\n// P1 - P3: OK\\npragma solidity 0.6.12;\\n\\n// Source: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol + Claimable.sol\\n// Edited by BoringCrypto\\n\\n// T1 - T4: OK\\ncontract BoringOwnableData {\\n    // V1 - V5: OK\\n    address public owner;\\n    // V1 - V5: OK\\n    address public pendingOwner;\\n}\\n\\n// T1 - T4: OK\\ncontract BoringOwnable is BoringOwnableData {\\n    // E1: OK\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    constructor () public {\\n        owner = msg.sender;\\n        emit OwnershipTransferred(address(0), msg.sender);\\n    }\\n\\n    // F1 - F9: OK\\n    // C1 - C21: OK\\n    function transferOwnership(address newOwner, bool direct, bool renounce) public onlyOwner {\\n        if (direct) {\\n            // Checks\\n            require(newOwner != address(0) || renounce, \\\"Ownable: zero address\\\");\\n\\n            // Effects\\n            emit OwnershipTransferred(owner, newOwner);\\n            owner = newOwner;\\n            pendingOwner = address(0);\\n        } else {\\n            // Effects\\n            pendingOwner = newOwner;\\n        }\\n    }\\n\\n    // F1 - F9: OK\\n    // C1 - C21: OK\\n    function claimOwnership() public {\\n        address _pendingOwner = pendingOwner;\\n        \\n        // Checks\\n        require(msg.sender == _pendingOwner, \\\"Ownable: caller != pending owner\\\");\\n\\n        // Effects\\n        emit OwnershipTransferred(owner, _pendingOwner);\\n        owner = _pendingOwner;\\n        pendingOwner = address(0);\\n    }\\n\\n    // M1 - M5: OK\\n    // C1 - C21: OK\\n    modifier onlyOwner() {\\n        require(msg.sender == owner, \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n}\",\"keccak256\":\"0x5ee0d5606a9dd683203a34ecde9ea08e4e5ffd3ae2c0ea16d94192cac0db94e3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea\",\"license\":\"MIT\"},\"contracts/interfaces/IRubyMasterChef.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IRubyMasterChef {\\n    struct UserInfo {\\n        uint256 amount; // How many LP tokens the user has provided.\\n        uint256 rewardDebt; // Reward debt. See explanation below.\\n    }\\n\\n    struct PoolInfo {\\n        IERC20 lpToken; // Address of LP token contract.\\n        uint256 allocPoint; // How many allocation points assigned to this poolInfo. RUBY to distribute per block.\\n        uint256 lastRewardTimestamp; // Last block timestamp that RUBY distribution occurs.\\n        uint256 accRubyPerShare; // Accumulated RUBY per share, times 1e12. See below.\\n    }\\n\\n    function poolInfo(uint256 pid) external view returns (PoolInfo memory);\\n\\n    function totalAllocPoint() external view returns (uint256);\\n\\n    function deposit(uint256 _pid, uint256 _amount) external;\\n\\n    function emergencyWithdrawRubyTokens(address _receiver, uint256 _amount) external;\\n}\\n\",\"keccak256\":\"0xa99ac9dc04820afe534ed5187038de0c7f9c084199a8340e1e68121feffca284\",\"license\":\"MIT\"},\"contracts/interfaces/IRubyMasterChefRewarder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IRubyMasterChefRewarder {\\n    function onRubyReward(address user, uint256 newLpAmount) external;\\n\\n    function pendingTokens(address user) external view returns (uint256 pending);\\n\\n    function rewardToken() external view returns (IERC20);\\n}\\n\",\"keccak256\":\"0x1e8ef530eb7b7e68ddab2bc8283a5aac50a5392478cb1eb8019b1fae237a7124\",\"license\":\"MIT\"},\"contracts/libraries/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nlibrary SafeERC20 {\\n    function safeSymbol(IERC20 token) internal view returns (string memory) {\\n        (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(0x95d89b41));\\n        return success && data.length > 0 ? abi.decode(data, (string)) : \\\"???\\\";\\n    }\\n\\n    function safeName(IERC20 token) internal view returns (string memory) {\\n        (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(0x06fdde03));\\n        return success && data.length > 0 ? abi.decode(data, (string)) : \\\"???\\\";\\n    }\\n\\n    function safeDecimals(IERC20 token) public view returns (uint8) {\\n        (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(0x313ce567));\\n        return success && data.length == 32 ? abi.decode(data, (uint8)) : 18;\\n    }\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        (bool success, bytes memory data) = address(token).call(abi.encodeWithSelector(0xa9059cbb, to, amount));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"SafeERC20: Transfer failed\\\");\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        uint256 amount\\n    ) internal {\\n        (bool success, bytes memory data) = address(token).call(\\n            abi.encodeWithSelector(0x23b872dd, from, address(this), amount)\\n        );\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"SafeERC20: TransferFrom failed\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xda0fe043037c2888e546fd734693aa75587ea28c102f44a88dc22a7f688989ce\",\"license\":\"MIT\"},\"contracts/rewarders/SimpleRewarderPerSec.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@boringcrypto/boring-solidity/contracts/BoringOwnable.sol\\\";\\nimport \\\"../interfaces/IRubyMasterChefRewarder.sol\\\";\\nimport \\\"../interfaces/IRubyMasterChef.sol\\\";\\nimport \\\"../libraries/SafeERC20.sol\\\";\\n\\n/**\\n * This is a sample contract to be used in the RubyMasterChef contract for partners to reward\\n * stakers with their native token alongside RUBY.\\n *\\n * It assumes no minting rights, so requires a set amount of YOUR_TOKEN to be transferred to this contract prior.\\n * E.g. say you've allocated 100,000 XYZ to the RUBY-XYZ farm over 30 days. Then you would need to transfer\\n * 100,000 XYZ and set the rewards accordingly so it's fully distributed after 30 days.\\n *\\n */\\ncontract SimpleRewarderPerSec is IRubyMasterChefRewarder, BoringOwnable {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    IERC20 public immutable override rewardToken;\\n    IERC20 public immutable lpToken;\\n    IRubyMasterChef public immutable rubyMasterChef;\\n\\n    /// @notice Info of each rubyMasterChef user.\\n    /// `amount` LP token amount the user has provided.\\n    /// `rewardDebt` The amount of YOUR_TOKEN entitled to the user.\\n    struct UserInfo {\\n        uint256 amount;\\n        uint256 rewardDebt;\\n    }\\n\\n    /// @notice Info of each rubyMasterChef poolInfo.\\n    /// `accTokenPerShare` Amount of YOUR_TOKEN each LP token is worth.\\n    /// `lastRewardTimestamp` The last timestamp YOUR_TOKEN was rewarded to the poolInfo.\\n    struct PoolInfo {\\n        uint256 accTokenPerShare;\\n        uint256 lastRewardTimestamp;\\n    }\\n\\n    /// @notice Info of the poolInfo.\\n    PoolInfo public poolInfo;\\n    /// @notice Info of each user that stakes LP tokens.\\n    mapping(address => UserInfo) public userInfo;\\n\\n    uint256 public tokenPerSec;\\n    uint256 private constant ACC_TOKEN_PRECISION = 1e12;\\n\\n    event OnReward(address indexed user, uint256 amount);\\n    event RewardRateUpdated(uint256 oldRate, uint256 newRate);\\n\\n    modifier onlyRubyMasterChef() {\\n        require(\\n            msg.sender == address(rubyMasterChef),\\n            \\\"onlyRubyMasterChef: only RubyMasterChef can call this function\\\"\\n        );\\n        _;\\n    }\\n\\n    constructor(\\n        IERC20 _rewardToken,\\n        IERC20 _lpToken,\\n        uint256 _tokenPerSec,\\n        IRubyMasterChef _rubyMasterChef\\n    ) public {\\n        require(Address.isContract(address(_rewardToken)), \\\"constructor: reward token must be a valid contract\\\");\\n        require(Address.isContract(address(_lpToken)), \\\"constructor: LP token must be a valid contract\\\");\\n        require(Address.isContract(address(_rubyMasterChef)), \\\"constructor: RubyMasterChef must be a valid contract\\\");\\n\\n        rewardToken = _rewardToken;\\n        lpToken = _lpToken;\\n        tokenPerSec = _tokenPerSec;\\n        rubyMasterChef = _rubyMasterChef;\\n        poolInfo = PoolInfo({ lastRewardTimestamp: block.timestamp, accTokenPerShare: 0 });\\n    }\\n\\n    /// @notice Update reward variables of the given poolInfo.\\n    /// @return pool Returns the pool that was updated.\\n    function updatePool() public returns (PoolInfo memory pool) {\\n        pool = poolInfo;\\n\\n        if (block.timestamp > pool.lastRewardTimestamp) {\\n            uint256 lpSupply = lpToken.balanceOf(address(rubyMasterChef));\\n\\n            if (lpSupply > 0) {\\n                uint256 timeElapsed = block.timestamp.sub(pool.lastRewardTimestamp);\\n                uint256 tokenReward = timeElapsed.mul(tokenPerSec);\\n                pool.accTokenPerShare = pool.accTokenPerShare.add((tokenReward.mul(ACC_TOKEN_PRECISION) / lpSupply));\\n            }\\n\\n            pool.lastRewardTimestamp = block.timestamp;\\n            poolInfo = pool;\\n        }\\n    }\\n\\n    /// @notice Sets the distribution reward rate. This will also update the poolInfo.\\n    /// @param _tokenPerSec The number of tokens to distribute per second\\n    function setRewardRate(uint256 _tokenPerSec) external onlyOwner {\\n        updatePool();\\n\\n        uint256 oldRate = tokenPerSec;\\n        tokenPerSec = _tokenPerSec;\\n\\n        emit RewardRateUpdated(oldRate, _tokenPerSec);\\n    }\\n\\n    /// @notice Function called by RubyMasterChef whenever staker claims Ruby harvest. \\n    /// Allows staker to also receive a 2nd reward token.\\n    /// @param _user Address of user\\n    /// @param _lpAmount Number of LP tokens the user has\\n    function onRubyReward(address _user, uint256 _lpAmount) external override onlyRubyMasterChef {\\n        updatePool();\\n        PoolInfo memory pool = poolInfo;\\n        UserInfo storage user = userInfo[_user];\\n        uint256 pending;\\n        // if user had deposited\\n        if (user.amount > 0) {\\n            pending = (user.amount.mul(pool.accTokenPerShare) / ACC_TOKEN_PRECISION).sub(user.rewardDebt);\\n            uint256 balance = rewardToken.balanceOf(address(this));\\n            if (pending > balance) {\\n                rewardToken.safeTransfer(_user, balance);\\n            } else {\\n                rewardToken.safeTransfer(_user, pending);\\n            }\\n        }\\n\\n        user.amount = _lpAmount;\\n        user.rewardDebt = user.amount.mul(pool.accTokenPerShare) / ACC_TOKEN_PRECISION;\\n\\n        emit OnReward(_user, pending);\\n    }\\n\\n    /// @notice View function to see pending tokens\\n    /// @param _user Address of user.\\n    /// @return pending reward for a given user.\\n    function pendingTokens(address _user) external view override returns (uint256 pending) {\\n        UserInfo storage user = userInfo[_user];\\n\\n        uint256 accTokenPerShare = poolInfo.accTokenPerShare;\\n        uint256 lpSupply = lpToken.balanceOf(address(rubyMasterChef));\\n\\n        if (block.timestamp > poolInfo.lastRewardTimestamp && lpSupply != 0) {\\n            uint256 timeElapsed = block.timestamp.sub(poolInfo.lastRewardTimestamp);\\n            uint256 tokenReward = timeElapsed.mul(tokenPerSec);\\n            accTokenPerShare = accTokenPerShare.add(tokenReward.mul(ACC_TOKEN_PRECISION) / lpSupply);\\n        }\\n\\n        pending = (user.amount.mul(accTokenPerShare) / ACC_TOKEN_PRECISION).sub(user.rewardDebt);\\n    }\\n\\n    /// @notice In case rewarder is stopped before emissions finished, this function allows\\n    /// withdrawal of remaining tokens.\\n    function emergencyWithdraw() public onlyOwner {\\n        rewardToken.safeTransfer(address(msg.sender), rewardToken.balanceOf(address(this)));\\n    }\\n}\\n\",\"keccak256\":\"0xd96388c3e776f3a6df2a178972faf8c8ebbbbb01e3d6cf7ac308a3b5a52d185d\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60e06040523480156200001157600080fd5b50604051620013373803806200133783398101604081905262000034916200016d565b600080546001600160a01b0319163390811782556040519091907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a362000089846200016760201b62000aa41760201c565b620000b15760405162461bcd60e51b8152600401620000a890620001c8565b60405180910390fd5b620000c7836200016760201b62000aa41760201c565b620000e65760405162461bcd60e51b8152600401620000a89062000277565b620000fc816200016760201b62000aa41760201c565b6200011b5760405162461bcd60e51b8152600401620000a8906200021a565b6001600160601b0319606094851b811660805292841b831660a05260059190915590911b1660c052604080518082019091526000808252426020909201829052600255600355620002de565b3b151590565b6000806000806080858703121562000183578384fd5b84516200019081620002c5565b6020860151909450620001a381620002c5565b604086015160608701519194509250620001bd81620002c5565b939692955090935050565b60208082526032908201527f636f6e7374727563746f723a2072657761726420746f6b656e206d7573742062604082015271194818481d985b1a590818dbdb9d1c9858dd60721b606082015260800190565b60208082526034908201527f636f6e7374727563746f723a20527562794d617374657243686566206d75737460408201527f20626520612076616c696420636f6e7472616374000000000000000000000000606082015260800190565b6020808252602e908201527f636f6e7374727563746f723a204c5020746f6b656e206d75737420626520612060408201526d1d985b1a590818dbdb9d1c9858dd60921b606082015260800190565b6001600160a01b0381168114620002db57600080fd5b50565b60805160601c60a05160601c60c05160601c610ff162000346600039806102f35280610468528061070a528061098e5250806103b352806106db528061096152508061052552806105d6528061060f528061084252806108e65280610a825250610ff16000f3fe608060405234801561001057600080fd5b50600436106100f55760003560e01c80638da5cb5b11610097578063db2e21bc11610066578063db2e21bc146101bc578063e30c3978146101c4578063e3161ddd146101cc578063f7c618c1146101e1576100f5565b80638da5cb5b1461017b5780639e447fc614610183578063b8735ca314610196578063c031a66f146101a9576100f5565b80634e71e0c8116100d35780634e71e0c81461014e57806350fd1f3e146101565780635a2f3d091461016b5780635fcbd28514610173576100f5565b8063078dfbe7146100fa5780631959a0021461010f57806332503e4414610139575b600080fd5b61010d610108366004610c7b565b6101e9565b005b61012261011d366004610c59565b6102d8565b604051610130929190610f9c565b60405180910390f35b6101416102f1565b6040516101309190610d73565b61010d610315565b61015e6103a2565b6040516101309190610f93565b6101226103a8565b6101416103b1565b6101416103d5565b61010d610191366004610d0a565b6103e4565b61010d6101a4366004610cc4565b61045d565b61015e6101b7366004610c59565b6106a6565b61010d610812565b61014161090f565b6101d461091e565b6040516101309190610f7c565b610141610a80565b6000546001600160a01b0316331461021c5760405162461bcd60e51b815260040161021390610e7e565b60405180910390fd5b81156102b7576001600160a01b0383161515806102365750805b6102525760405162461bcd60e51b815260040161021390610dd7565b600080546040516001600160a01b03808716939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0385166001600160a01b0319918216179091556001805490911690556102d3565b600180546001600160a01b0319166001600160a01b0385161790555b505050565b6004602052600090815260409020805460019091015482565b7f000000000000000000000000000000000000000000000000000000000000000081565b6001546001600160a01b03163381146103405760405162461bcd60e51b815260040161021390610eb3565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b039092166001600160a01b0319928316179055600180549091169055565b60055481565b60025460035482565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000546001600160a01b031681565b6000546001600160a01b0316331461040e5760405162461bcd60e51b815260040161021390610e7e565b61041661091e565b5060058054908290556040517fc390a98ace15a7bb6bab611eedfdbb2685043b241a869420043cdfb23ccfee50906104519083908590610f9c565b60405180910390a15050565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146104a55760405162461bcd60e51b815260040161021390610ee8565b6104ad61091e565b506104b6610c28565b5060408051808201825260025481526003546020808301919091526001600160a01b03851660009081526004909152918220805491929091156106385760018201548351835461051f929164e8d4a510009161051191610aaa565b8161051857fe5b0490610aed565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b815260040161056f9190610d73565b60206040518083038186803b15801561058757600080fd5b505afa15801561059b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105bf9190610d22565b905080821115610602576105fd6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168783610b15565b610636565b6106366001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168784610b15565b505b838255825164e8d4a510009061064f908690610aaa565b8161065657fe5b0460018301556040516001600160a01b038616907fd1072bb52c3131d0c96197b73fb8a45637e30f8b6664fc142310cc9b242859b490610697908490610f93565b60405180910390a25050505050565b6001600160a01b03808216600090815260046020819052604080832060025491516370a0823160e01b815293949093919285927f0000000000000000000000000000000000000000000000000000000000000000909216916370a0823191610730917f00000000000000000000000000000000000000000000000000000000000000009101610d73565b60206040518083038186803b15801561074857600080fd5b505afa15801561075c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107809190610d22565b6003549091504211801561079357508015155b156107ec576003546000906107a9904290610aed565b905060006107c260055483610aaa90919063ffffffff16565b90506107e7836107d78364e8d4a51000610aaa565b816107de57fe5b86919004610c03565b935050505b60018301548354610809919064e8d4a51000906105119086610aaa565b95945050505050565b6000546001600160a01b0316331461083c5760405162461bcd60e51b815260040161021390610e7e565b61090d337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b815260040161088c9190610d73565b60206040518083038186803b1580156108a457600080fd5b505afa1580156108b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108dc9190610d22565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169190610b15565b565b6001546001600160a01b031681565b610926610c28565b5060408051808201909152600254815260035460208201819052421115610a7d576040516370a0823160e01b81526000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a08231906109b6907f000000000000000000000000000000000000000000000000000000000000000090600401610d73565b60206040518083038186803b1580156109ce57600080fd5b505afa1580156109e2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a069190610d22565b90508015610a6b576000610a27836020015142610aed90919063ffffffff16565b90506000610a4060055483610aaa90919063ffffffff16565b9050610a6683610a558364e8d4a51000610aaa565b81610a5c57fe5b8651919004610c03565b845250505b50426020820181905281516002556003555b90565b7f000000000000000000000000000000000000000000000000000000000000000081565b3b151590565b600082610ab957506000610ae7565b82820282848281610ac657fe5b0414610ae45760405162461bcd60e51b815260040161021390610e3d565b90505b92915050565b600082821115610b0f5760405162461bcd60e51b815260040161021390610e06565b50900390565b60006060846001600160a01b031663a9059cbb8585604051602401610b3b929190610d87565b6040516020818303038152906040529060e01b6020820180516001600160e01b038381831617835250505050604051610b749190610d3a565b6000604051808303816000865af19150503d8060008114610bb1576040519150601f19603f3d011682016040523d82523d6000602084013e610bb6565b606091505b5091509150818015610be0575080511580610be0575080806020019051810190610be09190610cee565b610bfc5760405162461bcd60e51b815260040161021390610f45565b5050505050565b600082820183811015610ae45760405162461bcd60e51b815260040161021390610da0565b604051806040016040528060008152602001600081525090565b80356001600160a01b0381168114610ae757600080fd5b600060208284031215610c6a578081fd5b610c748383610c42565b9392505050565b600080600060608486031215610c8f578182fd5b610c998585610c42565b92506020840135610ca981610faa565b91506040840135610cb981610faa565b809150509250925092565b60008060408385031215610cd6578182fd5b610ce08484610c42565b946020939093013593505050565b600060208284031215610cff578081fd5b8151610ae481610faa565b600060208284031215610d1b578081fd5b5035919050565b600060208284031215610d33578081fd5b5051919050565b60008251815b81811015610d5a5760208186018101518583015201610d40565b81811115610d685782828501525b509190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b03929092168252602082015260400190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b6020808252601590820152744f776e61626c653a207a65726f206164647265737360581b604082015260600190565b6020808252601e908201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604082015260600190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6040820152607760f81b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c657220213d2070656e64696e67206f776e6572604082015260600190565b6020808252603e908201527f6f6e6c79527562794d6173746572436865663a206f6e6c7920527562794d617360408201527f746572436865662063616e2063616c6c20746869732066756e6374696f6e0000606082015260800190565b6020808252601a908201527f5361666545524332303a205472616e73666572206661696c6564000000000000604082015260600190565b815181526020918201519181019190915260400190565b90815260200190565b918252602082015260400190565b8015158114610fb857600080fd5b5056fea264697066735822122040b73edc18dce645a6625ac0238f676e84796562458f09d273c0909e2e66dc5864736f6c634300060c0033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "onRubyReward(address,uint256)": {
        "params": {
          "_lpAmount": "Number of LP tokens the user has",
          "_user": "Address of user"
        }
      },
      "pendingTokens(address)": {
        "params": {
          "_user": "Address of user."
        },
        "returns": {
          "pending": "reward for a given user."
        }
      },
      "setRewardRate(uint256)": {
        "params": {
          "_tokenPerSec": "The number of tokens to distribute per second"
        }
      },
      "updatePool()": {
        "returns": {
          "pool": "Returns the pool that was updated."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "emergencyWithdraw()": {
        "notice": "In case rewarder is stopped before emissions finished, this function allows withdrawal of remaining tokens."
      },
      "onRubyReward(address,uint256)": {
        "notice": "Function called by RubyMasterChef whenever staker claims Ruby harvest.  Allows staker to also receive a 2nd reward token."
      },
      "pendingTokens(address)": {
        "notice": "View function to see pending tokens"
      },
      "poolInfo()": {
        "notice": "Info of the poolInfo."
      },
      "setRewardRate(uint256)": {
        "notice": "Sets the distribution reward rate. This will also update the poolInfo."
      },
      "updatePool()": {
        "notice": "Update reward variables of the given poolInfo."
      },
      "userInfo(address)": {
        "notice": "Info of each user that stakes LP tokens."
      }
    },
    "notice": "This is a sample contract to be used in the RubyMasterChef contract for partners to reward stakers with their native token alongside RUBY. It assumes no minting rights, so requires a set amount of YOUR_TOKEN to be transferred to this contract prior. E.g. say you've allocated 100,000 XYZ to the RUBY-XYZ farm over 30 days. Then you would need to transfer 100,000 XYZ and set the rewards accordingly so it's fully distributed after 30 days.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3,
        "contract": "contracts/rewarders/SimpleRewarderPerSec.sol:SimpleRewarderPerSec",
        "label": "owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 5,
        "contract": "contracts/rewarders/SimpleRewarderPerSec.sol:SimpleRewarderPerSec",
        "label": "pendingOwner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 23914,
        "contract": "contracts/rewarders/SimpleRewarderPerSec.sol:SimpleRewarderPerSec",
        "label": "poolInfo",
        "offset": 0,
        "slot": "2",
        "type": "t_struct(PoolInfo)23911_storage"
      },
      {
        "astId": 23919,
        "contract": "contracts/rewarders/SimpleRewarderPerSec.sol:SimpleRewarderPerSec",
        "label": "userInfo",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_struct(UserInfo)23906_storage)"
      },
      {
        "astId": 23921,
        "contract": "contracts/rewarders/SimpleRewarderPerSec.sol:SimpleRewarderPerSec",
        "label": "tokenPerSec",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(UserInfo)23906_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct SimpleRewarderPerSec.UserInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(UserInfo)23906_storage"
      },
      "t_struct(PoolInfo)23911_storage": {
        "encoding": "inplace",
        "label": "struct SimpleRewarderPerSec.PoolInfo",
        "members": [
          {
            "astId": 23908,
            "contract": "contracts/rewarders/SimpleRewarderPerSec.sol:SimpleRewarderPerSec",
            "label": "accTokenPerShare",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 23910,
            "contract": "contracts/rewarders/SimpleRewarderPerSec.sol:SimpleRewarderPerSec",
            "label": "lastRewardTimestamp",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(UserInfo)23906_storage": {
        "encoding": "inplace",
        "label": "struct SimpleRewarderPerSec.UserInfo",
        "members": [
          {
            "astId": 23903,
            "contract": "contracts/rewarders/SimpleRewarderPerSec.sol:SimpleRewarderPerSec",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 23905,
            "contract": "contracts/rewarders/SimpleRewarderPerSec.sol:SimpleRewarderPerSec",
            "label": "rewardDebt",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}