{
  "address": "0x6Aa76bfEcbD6d45e082424f5c109DDbB89C91F76",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "freeSwapNFT",
          "type": "address"
        }
      ],
      "name": "FreeSwapNFTSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "minter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "allowance",
          "type": "bool"
        }
      ],
      "name": "MinterSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "profileNFT",
          "type": "address"
        }
      ],
      "name": "RubyProfileNFTset",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "calculateAmmSwapFeeDeduction",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "feeMultiplier",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "freeSwapNFT",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_profileNFT",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_freeSwapNFT",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "mintProfileNFT",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "minters",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "profileNFT",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newFreeSwapNFT",
          "type": "address"
        }
      ],
      "name": "setFreeSwapNFT",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "minter",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "allowance",
          "type": "bool"
        }
      ],
      "name": "setMinter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newProfileNFT",
          "type": "address"
        }
      ],
      "name": "setProfileNFT",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x3b6f386b6e9ed2112289c99895a032d3562187ab35d62519112c14e434148eca",
  "receipt": {
    "to": "0x0000000000000000000000000000000000000000",
    "from": "0x0fe812C977646525E824D5dCC3f37A0Cf153B13b",
    "contractAddress": "0x6Aa76bfEcbD6d45e082424f5c109DDbB89C91F76",
    "transactionIndex": 0,
    "gasUsed": "873004",
    "logsBloom": "0x
    "blockHash": "0x22e6eeff68a1ddc14a2e0783c98ee01a5811545213c5280e873da3be145e076b",
    "transactionHash": "0x3b6f386b6e9ed2112289c99895a032d3562187ab35d62519112c14e434148eca",
    "logs": [],
    "blockNumber": 50247,
    "cumulativeGasUsed": "873004",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "72d52cc06dbd34938e7b46122e9e590a",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"freeSwapNFT\",\"type\":\"address\"}],\"name\":\"FreeSwapNFTSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"allowance\",\"type\":\"bool\"}],\"name\":\"MinterSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"profileNFT\",\"type\":\"address\"}],\"name\":\"RubyProfileNFTset\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"calculateAmmSwapFeeDeduction\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"feeMultiplier\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"freeSwapNFT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_profileNFT\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_freeSwapNFT\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"mintProfileNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"minters\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"profileNFT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newFreeSwapNFT\",\"type\":\"address\"}],\"name\":\"setFreeSwapNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"allowance\",\"type\":\"bool\"}],\"name\":\"setMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newProfileNFT\",\"type\":\"address\"}],\"name\":\"setProfileNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"calculateAmmSwapFeeDeduction(address)\":{\"params\":{\"user\":\"- the address of the user\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"calculateAmmSwapFeeDeduction(address)\":{\"notice\":\"Calculate the fee multiplier that needs to be applied in the  AMM swapping calculations. The fee deduction is dependent on the `user`. The fee multiplier is determined by internal rules. Currently the  single rule is having balance of at least 1 at the RubyProfileNFT contract. In the future more rules should be added. The `feeMultiplier` is in range of [997, 1000]:  - 997 means fee of 30 basis points - 1000 means fee of 0 basis points\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/RubyNFTAdmin.sol\":\"RubyNFTAdmin\"},\"evmVersion\":\"istanbul\",\"libraries\":{\"__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/Initializable.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xb419e68addcb82ecda3ad3974b0d2db76435ce9b08435a04d5b119a0c5d45ea5\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4784c3f8a520a739dd25d76f514833a653990902d0e21601aed45bda44c87524\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity >=0.4.24 <0.8.0;\\n\\nimport \\\"../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || _isConstructor() || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /// @dev Returns true if and only if the function is running in the constructor\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0xd8e4eb08dcc1d1860fb347ba5ffd595242b9a1b66d49a47f2b4cb51c3f35017e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\nimport \\\"../../introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\\n      *\\n      * Requirements:\\n      *\\n      * - `from` cannot be the zero address.\\n      * - `to` cannot be the zero address.\\n      * - `tokenId` token must exist and be owned by `from`.\\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n      *\\n      * Emits a {Transfer} event.\\n      */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0x3dab19bb4a63bcbda1ee153ca291694f92f9009fad28626126b15a8503b0e5ff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xfc5ea91fa9ceb1961023b2a6c978b902888c52b90847ac7813fe3b79524165f6\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\nimport \\\"../proxy/Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xbbf8a21b9a66c48d45ff771b8563c6df19ba451d63dfb8380a865c1e1f29d1a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xf70bc25d981e4ec9673a995ad2995d5d493ea188d3d8f388bba9c227ce09fb82\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\nimport \\\"../../introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\\n      *\\n      * Requirements:\\n      *\\n      * - `from` cannot be the zero address.\\n      * - `to` cannot be the zero address.\\n      * - `tokenId` token must exist and be owned by `from`.\\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n      *\\n      * Emits a {Transfer} event.\\n      */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0x2d99a0deb6648c34fbc66d6ac4a2d64798d7a5321b45624f6736fadc63da1962\",\"license\":\"MIT\"},\"contracts/RubyNFTAdmin.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\nimport \\\"./interfaces/IRubyNFTAdmin.sol\\\";\\nimport \\\"./interfaces/IRubyNFT.sol\\\";\\n\\ncontract RubyNFTAdmin is IRubyNFTAdmin, OwnableUpgradeable {\\n    address public override profileNFT;\\n    address public override freeSwapNFT;\\n\\n    // profile NFT minters\\n    mapping(address => bool) public override minters;\\n\\n    modifier onylMinter() {\\n        require(minters[msg.sender], \\\"RubyNFTAdmin: Minting not allowed\\\");\\n        _;\\n    }\\n\\n    function initialize(address _owner, address _profileNFT, address _freeSwapNFT) public initializer {\\n        require(_owner != address(0), \\\"RubyNFTAdmin: Invalid owner address\\\");\\n        require(_profileNFT != address(0), \\\"RubyNFTAdmin: Invalid RUBY profile NFT\\\");\\n        require(_freeSwapNFT != address(0), \\\"RubyNFTAdmin: Invalid RUBY free swap NFT\\\");\\n        profileNFT = _profileNFT;\\n        freeSwapNFT = _freeSwapNFT;\\n\\n        OwnableUpgradeable.__Ownable_init();\\n        transferOwnership(_owner);\\n    }\\n\\n    /**\\n        @notice Calculate the fee multiplier that needs to be applied in the \\n        AMM swapping calculations. The fee deduction is dependent on the\\n        `user`. The fee multiplier is determined by internal rules. Currently the \\n        single rule is having balance of at least 1 at the RubyProfileNFT contract.\\n        In the future more rules should be added.\\n        The `feeMultiplier` is in range of [997, 1000]: \\n            - 997 means fee of 30 basis points\\n            - 1000 means fee of 0 basis points\\n        @param user - the address of the user\\n     */\\n    function calculateAmmSwapFeeDeduction(address user) external view override returns (uint256 feeMultiplier) {\\n        if (IRubyNFT(freeSwapNFT).balanceOf(user) > 0) {\\n            return 1000; // no fee\\n        }\\n\\n        return 997; // 30 bps fee\\n    }\\n\\n    // function calculateLPFeeDeduction(address user) public view returns (uint256 feeAmount) {\\n\\n    // }\\n\\n    // Mint profile NFT if the user has no profile NFTs\\n    // The exploitability of this is a feature. Users can mint multiple profile NFTs by design\\n    // Example: User can do a swap, have NFT minted, then he can transfer the NFT, do another \\n    // swap and get another NFT - this is not a bug but a feature.\\n    function mintProfileNFT(address user) external override onylMinter {\\n        if (IRubyNFT(profileNFT).balanceOf(user) == 0) {\\n            IRubyNFT(profileNFT).mint(user);\\n        }\\n    }\\n\\n\\n    function setProfileNFT(address newProfileNFT) external override onlyOwner {\\n        require(newProfileNFT != address(0), \\\"RubyNFTAdmin: Invalid profile NFT\\\");\\n        profileNFT = newProfileNFT;\\n        emit RubyProfileNFTset(profileNFT);\\n    }\\n\\n    function setFreeSwapNFT(address newFreeSwapNFT) external override onlyOwner {\\n        require(newFreeSwapNFT != address(0), \\\"RubyNFTAdmin: Invalid free swap NFT\\\");\\n        freeSwapNFT = newFreeSwapNFT;\\n        emit FreeSwapNFTSet(freeSwapNFT);\\n    }\\n\\n    function setMinter(address minter, bool allowance) external override onlyOwner {\\n        require(minter != address(0), \\\"RubyNFTAdmin: Invalid minter address\\\");\\n        minters[minter] = allowance;\\n        emit MinterSet(minter, allowance);\\n    }\\n\\n\\n}\\n\",\"keccak256\":\"0x16c0f00d4503bd366d18bf2c915c8d53be33e22ee7104b8a3e9c4780c24fc3fb\",\"license\":\"MIT\"},\"contracts/interfaces/IRubyNFT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\\\";\\n\\ninterface IRubyNFT is IERC721Upgradeable {\\n\\n    event MinterSet(address indexed minter, bool allowance);\\n\\n    event DescriptionSet(string newDescription);\\n\\n    event VisualAppearanceSet(string newVisualAppearance);\\n\\n    function nftIds() external view returns (uint256);\\n\\n    function minters(address minter) external view returns (bool);\\n\\n    function description() external view returns (string memory);\\n\\n    function visualAppearance() external view returns (string memory);\\n\\n    function mint(address to) external;\\n\\n    function setMinter(address minter, bool allowance) external;\\n\\n    function setDescription(string memory _description) external;\\n\\n    function setVisualAppearance(string memory _visualAppearance) external;\\n}\\n\",\"keccak256\":\"0x63bd2ec6b7ca067adb01941670222c47d5373f49d40169167ab0b0cedaad54ea\",\"license\":\"MIT\"},\"contracts/interfaces/IRubyNFTAdmin.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\ninterface IRubyNFTAdmin {\\n\\n    event MinterSet(address indexed minter, bool allowance);\\n\\n    event FreeSwapNFTSet(address indexed freeSwapNFT);\\n\\n    event RubyProfileNFTset(address indexed profileNFT);\\n\\n    function profileNFT() external view returns (address);\\n\\n    function freeSwapNFT() external view returns (address);\\n\\n    function minters(address minter) external view returns (bool);\\n\\n    function calculateAmmSwapFeeDeduction(address user) external view returns (uint256 feeMultiplier);\\n\\n    function mintProfileNFT(address user) external;\\n\\n    function setProfileNFT(address newProfileNFT) external;\\n\\n    function setFreeSwapNFT(address newFreeSwapNFT) external;\\n\\n    function setMinter(address minter, bool allowance) external;\\n}\\n\",\"keccak256\":\"0x987e97cc9bedaea0b4ea5240bcdd5276d3e9ec5768945c76e3446e9cd568ee74\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610ed4806100206000396000f3fe608060405234801561001057600080fd5b50600436106100b45760003560e01c8063c0c53b8b11610071578063c0c53b8b14610161578063c9639e0314610199578063cf456ae7146101a1578063ea60f361146101cf578063f2fde38b14610207578063f46eccc41461022d576100b4565b8063066d986e146100b9578063715018a6146100e1578063818ef019146100e95780638da5cb5b1461010f578063949675e914610133578063a8fe3f7f1461013b575b600080fd5b6100df600480360360208110156100cf57600080fd5b50356001600160a01b0316610267565b005b6100df61035e565b6100df600480360360208110156100ff57600080fd5b50356001600160a01b031661040a565b61011761053f565b604080516001600160a01b039092168252519081900360200190f35b61011761054e565b6100df6004803603602081101561015157600080fd5b50356001600160a01b031661055d565b6100df6004803603606081101561017757600080fd5b506001600160a01b038135811691602081013582169160409091013516610654565b610117610809565b6100df600480360360408110156101b757600080fd5b506001600160a01b0381351690602001351515610818565b6101f5600480360360208110156101e557600080fd5b50356001600160a01b031661091f565b60408051918252519081900360200190f35b6100df6004803603602081101561021d57600080fd5b50356001600160a01b03166109b3565b6102536004803603602081101561024357600080fd5b50356001600160a01b0316610ab6565b604080519115158252519081900360200190f35b61026f610acb565b6001600160a01b031661028061053f565b6001600160a01b0316146102c9576040805162461bcd60e51b81526020600482018190526024820152600080516020610e38833981519152604482015290519081900360640190fd5b6001600160a01b03811661030e5760405162461bcd60e51b8152600401808060200182810382526021815260200180610d576021913960400191505060405180910390fd5b606580546001600160a01b0319166001600160a01b0383811691909117918290556040519116907fa8e6108a6e0ee73d53714103402eaec9eef1928bb34cf74d940a3916327c84f190600090a250565b610366610acb565b6001600160a01b031661037761053f565b6001600160a01b0316146103c0576040805162461bcd60e51b81526020600482018190526024820152600080516020610e38833981519152604482015290519081900360640190fd5b6033546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3603380546001600160a01b0319169055565b3360009081526067602052604090205460ff166104585760405162461bcd60e51b8152600401808060200182810382526021815260200180610d786021913960400191505060405180910390fd5b606554604080516370a0823160e01b81526001600160a01b038481166004830152915191909216916370a08231916024808301926020929190829003018186803b1580156104a557600080fd5b505afa1580156104b9573d6000803e3d6000fd5b505050506040513d60208110156104cf57600080fd5b505161053c57606554604080516335313c2160e11b81526001600160a01b03848116600483015291519190921691636a62784291602480830192600092919082900301818387803b15801561052357600080fd5b505af1158015610537573d6000803e3d6000fd5b505050505b50565b6033546001600160a01b031690565b6065546001600160a01b031681565b610565610acb565b6001600160a01b031661057661053f565b6001600160a01b0316146105bf576040805162461bcd60e51b81526020600482018190526024820152600080516020610e38833981519152604482015290519081900360640190fd5b6001600160a01b0381166106045760405162461bcd60e51b8152600401808060200182810382526023815260200180610dc76023913960400191505060405180910390fd5b606680546001600160a01b0319166001600160a01b0383811691909117918290556040519116907f2d54e452ca6ca79092fb13d6b5a5b9b607136f0e944665e8a1927d4b8961922190600090a250565b600054610100900460ff168061066d575061066d610acf565b8061067b575060005460ff16155b6106b65760405162461bcd60e51b815260040180806020018281038252602e815260200180610d99602e913960400191505060405180910390fd5b600054610100900460ff161580156106e1576000805460ff1961ff0019909116610100171660011790555b6001600160a01b0384166107265760405162461bcd60e51b8152600401808060200182810382526023815260200180610e7c6023913960400191505060405180910390fd5b6001600160a01b03831661076b5760405162461bcd60e51b8152600401808060200182810382526026815260200180610e126026913960400191505060405180910390fd5b6001600160a01b0382166107b05760405162461bcd60e51b8152600401808060200182810382526028815260200180610dea6028913960400191505060405180910390fd5b606580546001600160a01b038086166001600160a01b03199283161790925560668054928516929091169190911790556107e8610ae0565b6107f1846109b3565b8015610803576000805461ff00191690555b50505050565b6066546001600160a01b031681565b610820610acb565b6001600160a01b031661083161053f565b6001600160a01b03161461087a576040805162461bcd60e51b81526020600482018190526024820152600080516020610e38833981519152604482015290519081900360640190fd5b6001600160a01b0382166108bf5760405162461bcd60e51b8152600401808060200182810382526024815260200180610e586024913960400191505060405180910390fd5b6001600160a01b038216600081815260676020908152604091829020805460ff1916851515908117909155825190815291517f583b0aa0e528532caf4b907c11d7a8158a122fe2a6fb80cd9b09776ebea8d92d9281900390910190a25050565b606654604080516370a0823160e01b81526001600160a01b0384811660048301529151600093849316916370a08231916024808301926020929190829003018186803b15801561096e57600080fd5b505afa158015610982573d6000803e3d6000fd5b505050506040513d602081101561099857600080fd5b505111156109a957506103e86109ae565b506103e55b919050565b6109bb610acb565b6001600160a01b03166109cc61053f565b6001600160a01b031614610a15576040805162461bcd60e51b81526020600482018190526024820152600080516020610e38833981519152604482015290519081900360640190fd5b6001600160a01b038116610a5a5760405162461bcd60e51b8152600401808060200182810382526026815260200180610d316026913960400191505060405180910390fd5b6033546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3603380546001600160a01b0319166001600160a01b0392909216919091179055565b60676020526000908152604090205460ff1681565b3390565b6000610ada30610b91565b15905090565b600054610100900460ff1680610af95750610af9610acf565b80610b07575060005460ff16155b610b425760405162461bcd60e51b815260040180806020018281038252602e815260200180610d99602e913960400191505060405180910390fd5b600054610100900460ff16158015610b6d576000805460ff1961ff0019909116610100171660011790555b610b75610b97565b610b7d610c37565b801561053c576000805461ff001916905550565b3b151590565b600054610100900460ff1680610bb05750610bb0610acf565b80610bbe575060005460ff16155b610bf95760405162461bcd60e51b815260040180806020018281038252602e815260200180610d99602e913960400191505060405180910390fd5b600054610100900460ff16158015610b7d576000805460ff1961ff001990911661010017166001179055801561053c576000805461ff001916905550565b600054610100900460ff1680610c505750610c50610acf565b80610c5e575060005460ff16155b610c995760405162461bcd60e51b815260040180806020018281038252602e815260200180610d99602e913960400191505060405180910390fd5b600054610100900460ff16158015610cc4576000805460ff1961ff0019909116610100171660011790555b6000610cce610acb565b603380546001600160a01b0319166001600160a01b038316908117909155604051919250906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a350801561053c576000805461ff00191690555056fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373527562794e465441646d696e3a20496e76616c69642070726f66696c65204e4654527562794e465441646d696e3a204d696e74696e67206e6f7420616c6c6f776564496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a6564527562794e465441646d696e3a20496e76616c696420667265652073776170204e4654527562794e465441646d696e3a20496e76616c6964205255425920667265652073776170204e4654527562794e465441646d696e3a20496e76616c696420525542592070726f66696c65204e46544f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572527562794e465441646d696e3a20496e76616c6964206d696e7465722061646472657373527562794e465441646d696e3a20496e76616c6964206f776e65722061646472657373a2646970667358221220296b4951bc424e4878659416b8b4bcd260b7d650320542423214a4c882ba1ece64736f6c634300060c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100b45760003560e01c8063c0c53b8b11610071578063c0c53b8b14610161578063c9639e0314610199578063cf456ae7146101a1578063ea60f361146101cf578063f2fde38b14610207578063f46eccc41461022d576100b4565b8063066d986e146100b9578063715018a6146100e1578063818ef019146100e95780638da5cb5b1461010f578063949675e914610133578063a8fe3f7f1461013b575b600080fd5b6100df600480360360208110156100cf57600080fd5b50356001600160a01b0316610267565b005b6100df61035e565b6100df600480360360208110156100ff57600080fd5b50356001600160a01b031661040a565b61011761053f565b604080516001600160a01b039092168252519081900360200190f35b61011761054e565b6100df6004803603602081101561015157600080fd5b50356001600160a01b031661055d565b6100df6004803603606081101561017757600080fd5b506001600160a01b038135811691602081013582169160409091013516610654565b610117610809565b6100df600480360360408110156101b757600080fd5b506001600160a01b0381351690602001351515610818565b6101f5600480360360208110156101e557600080fd5b50356001600160a01b031661091f565b60408051918252519081900360200190f35b6100df6004803603602081101561021d57600080fd5b50356001600160a01b03166109b3565b6102536004803603602081101561024357600080fd5b50356001600160a01b0316610ab6565b604080519115158252519081900360200190f35b61026f610acb565b6001600160a01b031661028061053f565b6001600160a01b0316146102c9576040805162461bcd60e51b81526020600482018190526024820152600080516020610e38833981519152604482015290519081900360640190fd5b6001600160a01b03811661030e5760405162461bcd60e51b8152600401808060200182810382526021815260200180610d576021913960400191505060405180910390fd5b606580546001600160a01b0319166001600160a01b0383811691909117918290556040519116907fa8e6108a6e0ee73d53714103402eaec9eef1928bb34cf74d940a3916327c84f190600090a250565b610366610acb565b6001600160a01b031661037761053f565b6001600160a01b0316146103c0576040805162461bcd60e51b81526020600482018190526024820152600080516020610e38833981519152604482015290519081900360640190fd5b6033546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3603380546001600160a01b0319169055565b3360009081526067602052604090205460ff166104585760405162461bcd60e51b8152600401808060200182810382526021815260200180610d786021913960400191505060405180910390fd5b606554604080516370a0823160e01b81526001600160a01b038481166004830152915191909216916370a08231916024808301926020929190829003018186803b1580156104a557600080fd5b505afa1580156104b9573d6000803e3d6000fd5b505050506040513d60208110156104cf57600080fd5b505161053c57606554604080516335313c2160e11b81526001600160a01b03848116600483015291519190921691636a62784291602480830192600092919082900301818387803b15801561052357600080fd5b505af1158015610537573d6000803e3d6000fd5b505050505b50565b6033546001600160a01b031690565b6065546001600160a01b031681565b610565610acb565b6001600160a01b031661057661053f565b6001600160a01b0316146105bf576040805162461bcd60e51b81526020600482018190526024820152600080516020610e38833981519152604482015290519081900360640190fd5b6001600160a01b0381166106045760405162461bcd60e51b8152600401808060200182810382526023815260200180610dc76023913960400191505060405180910390fd5b606680546001600160a01b0319166001600160a01b0383811691909117918290556040519116907f2d54e452ca6ca79092fb13d6b5a5b9b607136f0e944665e8a1927d4b8961922190600090a250565b600054610100900460ff168061066d575061066d610acf565b8061067b575060005460ff16155b6106b65760405162461bcd60e51b815260040180806020018281038252602e815260200180610d99602e913960400191505060405180910390fd5b600054610100900460ff161580156106e1576000805460ff1961ff0019909116610100171660011790555b6001600160a01b0384166107265760405162461bcd60e51b8152600401808060200182810382526023815260200180610e7c6023913960400191505060405180910390fd5b6001600160a01b03831661076b5760405162461bcd60e51b8152600401808060200182810382526026815260200180610e126026913960400191505060405180910390fd5b6001600160a01b0382166107b05760405162461bcd60e51b8152600401808060200182810382526028815260200180610dea6028913960400191505060405180910390fd5b606580546001600160a01b038086166001600160a01b03199283161790925560668054928516929091169190911790556107e8610ae0565b6107f1846109b3565b8015610803576000805461ff00191690555b50505050565b6066546001600160a01b031681565b610820610acb565b6001600160a01b031661083161053f565b6001600160a01b03161461087a576040805162461bcd60e51b81526020600482018190526024820152600080516020610e38833981519152604482015290519081900360640190fd5b6001600160a01b0382166108bf5760405162461bcd60e51b8152600401808060200182810382526024815260200180610e586024913960400191505060405180910390fd5b6001600160a01b038216600081815260676020908152604091829020805460ff1916851515908117909155825190815291517f583b0aa0e528532caf4b907c11d7a8158a122fe2a6fb80cd9b09776ebea8d92d9281900390910190a25050565b606654604080516370a0823160e01b81526001600160a01b0384811660048301529151600093849316916370a08231916024808301926020929190829003018186803b15801561096e57600080fd5b505afa158015610982573d6000803e3d6000fd5b505050506040513d602081101561099857600080fd5b505111156109a957506103e86109ae565b506103e55b919050565b6109bb610acb565b6001600160a01b03166109cc61053f565b6001600160a01b031614610a15576040805162461bcd60e51b81526020600482018190526024820152600080516020610e38833981519152604482015290519081900360640190fd5b6001600160a01b038116610a5a5760405162461bcd60e51b8152600401808060200182810382526026815260200180610d316026913960400191505060405180910390fd5b6033546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3603380546001600160a01b0319166001600160a01b0392909216919091179055565b60676020526000908152604090205460ff1681565b3390565b6000610ada30610b91565b15905090565b600054610100900460ff1680610af95750610af9610acf565b80610b07575060005460ff16155b610b425760405162461bcd60e51b815260040180806020018281038252602e815260200180610d99602e913960400191505060405180910390fd5b600054610100900460ff16158015610b6d576000805460ff1961ff0019909116610100171660011790555b610b75610b97565b610b7d610c37565b801561053c576000805461ff001916905550565b3b151590565b600054610100900460ff1680610bb05750610bb0610acf565b80610bbe575060005460ff16155b610bf95760405162461bcd60e51b815260040180806020018281038252602e815260200180610d99602e913960400191505060405180910390fd5b600054610100900460ff16158015610b7d576000805460ff1961ff001990911661010017166001179055801561053c576000805461ff001916905550565b600054610100900460ff1680610c505750610c50610acf565b80610c5e575060005460ff16155b610c995760405162461bcd60e51b815260040180806020018281038252602e815260200180610d99602e913960400191505060405180910390fd5b600054610100900460ff16158015610cc4576000805460ff1961ff0019909116610100171660011790555b6000610cce610acb565b603380546001600160a01b0319166001600160a01b038316908117909155604051919250906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a350801561053c576000805461ff00191690555056fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373527562794e465441646d696e3a20496e76616c69642070726f66696c65204e4654527562794e465441646d696e3a204d696e74696e67206e6f7420616c6c6f776564496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a6564527562794e465441646d696e3a20496e76616c696420667265652073776170204e4654527562794e465441646d696e3a20496e76616c6964205255425920667265652073776170204e4654527562794e465441646d696e3a20496e76616c696420525542592070726f66696c65204e46544f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572527562794e465441646d696e3a20496e76616c6964206d696e7465722061646472657373527562794e465441646d696e3a20496e76616c6964206f776e65722061646472657373a2646970667358221220296b4951bc424e4878659416b8b4bcd260b7d650320542423214a4c882ba1ece64736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "calculateAmmSwapFeeDeduction(address)": {
        "params": {
          "user": "- the address of the user"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "calculateAmmSwapFeeDeduction(address)": {
        "notice": "Calculate the fee multiplier that needs to be applied in the  AMM swapping calculations. The fee deduction is dependent on the `user`. The fee multiplier is determined by internal rules. Currently the  single rule is having balance of at least 1 at the RubyProfileNFT contract. In the future more rules should be added. The `feeMultiplier` is in range of [997, 1000]:  - 997 means fee of 30 basis points - 1000 means fee of 0 basis points"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 705,
        "contract": "contracts/RubyNFTAdmin.sol:RubyNFTAdmin",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 708,
        "contract": "contracts/RubyNFTAdmin.sol:RubyNFTAdmin",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 2910,
        "contract": "contracts/RubyNFTAdmin.sol:RubyNFTAdmin",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 136,
        "contract": "contracts/RubyNFTAdmin.sol:RubyNFTAdmin",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 255,
        "contract": "contracts/RubyNFTAdmin.sol:RubyNFTAdmin",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 11721,
        "contract": "contracts/RubyNFTAdmin.sol:RubyNFTAdmin",
        "label": "profileNFT",
        "offset": 0,
        "slot": "101",
        "type": "t_address"
      },
      {
        "astId": 11724,
        "contract": "contracts/RubyNFTAdmin.sol:RubyNFTAdmin",
        "label": "freeSwapNFT",
        "offset": 0,
        "slot": "102",
        "type": "t_address"
      },
      {
        "astId": 11729,
        "contract": "contracts/RubyNFTAdmin.sol:RubyNFTAdmin",
        "label": "minters",
        "offset": 0,
        "slot": "103",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}