{
  "address": "0xC22Fa5821D8f36dF8cce51180FE70a825bdC76CB",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "factory",
          "type": "address"
        }
      ],
      "name": "AmmFactorySet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newBurnPercent",
          "type": "uint256"
        }
      ],
      "name": "BurnPercentSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "server",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token0",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token1",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount0",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount1",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountRubyDistributed",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountRubyBurned",
          "type": "uint256"
        }
      ],
      "name": "Convert",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "pair",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountWithdrawn",
          "type": "uint256"
        }
      ],
      "name": "PairWithdrawn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "rubyStaker",
          "type": "address"
        }
      ],
      "name": "RubyStakerSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "rubyToken",
          "type": "address"
        }
      ],
      "name": "RubyTokenSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "usdToken",
          "type": "address"
        }
      ],
      "name": "UsdTokenSet",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "burnPercent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token0",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token1",
          "type": "address"
        }
      ],
      "name": "convert",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "token0",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "token1",
          "type": "address[]"
        }
      ],
      "name": "convertMultiple",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "factory",
      "outputs": [
        {
          "internalType": "contract IUniswapV2Factory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_factory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_rubyStaker",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_rubyToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_usdToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_burnPercent",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rubyStaker",
      "outputs": [
        {
          "internalType": "contract IRubyStaker",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rubyToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newFactory",
          "type": "address"
        }
      ],
      "name": "setAmmFactory",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newBurnPercent",
          "type": "uint256"
        }
      ],
      "name": "setBurnPercent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newRubyStaker",
          "type": "address"
        }
      ],
      "name": "setRubyStaker",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newRubyToken",
          "type": "address"
        }
      ],
      "name": "setRubyToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newUsdToken",
          "type": "address"
        }
      ],
      "name": "setUsdToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "usdToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pair",
          "type": "address"
        }
      ],
      "name": "withdrawLP",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x10b644ae6cb6a6280a9578676bfcb691b6ae89c4a208f3c78a8918fb3ea5479e",
  "receipt": {
    "to": "0x0000000000000000000000000000000000000000",
    "from": "0x0fe812C977646525E824D5dCC3f37A0Cf153B13b",
    "contractAddress": "0xC22Fa5821D8f36dF8cce51180FE70a825bdC76CB",
    "transactionIndex": 0,
    "gasUsed": "2091614",
    "logsBloom": "0x
    "blockHash": "0x9eb86c38b51781f9e45aa73aaeb8dddef58cf643c2a74d6adc69e7ea2b376625",
    "transactionHash": "0x10b644ae6cb6a6280a9578676bfcb691b6ae89c4a208f3c78a8918fb3ea5479e",
    "logs": [],
    "blockNumber": 186648,
    "cumulativeGasUsed": "2091614",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "8ca980d51c658bcb6e0b1d5c9f9ee0b7",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"}],\"name\":\"AmmFactorySet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBurnPercent\",\"type\":\"uint256\"}],\"name\":\"BurnPercentSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"server\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountRubyDistributed\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountRubyBurned\",\"type\":\"uint256\"}],\"name\":\"Convert\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountWithdrawn\",\"type\":\"uint256\"}],\"name\":\"PairWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"rubyStaker\",\"type\":\"address\"}],\"name\":\"RubyStakerSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"rubyToken\",\"type\":\"address\"}],\"name\":\"RubyTokenSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"usdToken\",\"type\":\"address\"}],\"name\":\"UsdTokenSet\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"burnPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"}],\"name\":\"convert\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"token0\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"token1\",\"type\":\"address[]\"}],\"name\":\"convertMultiple\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Factory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rubyStaker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rubyToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_usdToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_burnPercent\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rubyStaker\",\"outputs\":[{\"internalType\":\"contract IRubyStaker\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rubyToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newFactory\",\"type\":\"address\"}],\"name\":\"setAmmFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newBurnPercent\",\"type\":\"uint256\"}],\"name\":\"setBurnPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newRubyStaker\",\"type\":\"address\"}],\"name\":\"setRubyStaker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newRubyToken\",\"type\":\"address\"}],\"name\":\"setRubyToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newUsdToken\",\"type\":\"address\"}],\"name\":\"setUsdToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"name\":\"withdrawLP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/RubyMaker.sol\":\"RubyMaker\"},\"evmVersion\":\"istanbul\",\"libraries\":{\"__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/Initializable.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xb419e68addcb82ecda3ad3974b0d2db76435ce9b08435a04d5b119a0c5d45ea5\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity >=0.4.24 <0.8.0;\\n\\nimport \\\"../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || _isConstructor() || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /// @dev Returns true if and only if the function is running in the constructor\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0xd8e4eb08dcc1d1860fb347ba5ffd595242b9a1b66d49a47f2b4cb51c3f35017e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xfc5ea91fa9ceb1961023b2a6c978b902888c52b90847ac7813fe3b79524165f6\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\nimport \\\"../proxy/Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xbbf8a21b9a66c48d45ff771b8563c6df19ba451d63dfb8380a865c1e1f29d1a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/EnumerableSet.sol\\\";\\nimport \\\"../utils/Address.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using Address for address;\\n\\n    struct RoleData {\\n        EnumerableSet.AddressSet members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping (bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view returns (bool) {\\n        return _roles[role].members.contains(account);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view returns (uint256) {\\n        return _roles[role].members.length();\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view returns (address) {\\n        return _roles[role].members.at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual {\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to grant\\\");\\n\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual {\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to revoke\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        emit RoleAdminChanged(role, _roles[role].adminRole, adminRole);\\n        _roles[role].adminRole = adminRole;\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (_roles[role].members.add(account)) {\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (_roles[role].members.remove(account)) {\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x4fc155a2f7837603d69a13cfa481eb5e7f5e02cb77e2ec9edbac30986db37988\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) public {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal virtual {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\",\"keccak256\":\"0xca0c2396dbeb3503b51abf4248ebf77a1461edad513c01529df51850a012bee3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20Capped.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./ERC20.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that adds a cap to the supply of tokens.\\n */\\nabstract contract ERC20Capped is ERC20 {\\n    using SafeMath for uint256;\\n\\n    uint256 private _cap;\\n\\n    /**\\n     * @dev Sets the value of the `cap`. This value is immutable, it can only be\\n     * set once during construction.\\n     */\\n    constructor (uint256 cap_) internal {\\n        require(cap_ > 0, \\\"ERC20Capped: cap is 0\\\");\\n        _cap = cap_;\\n    }\\n\\n    /**\\n     * @dev Returns the cap on the token's total supply.\\n     */\\n    function cap() public view virtual returns (uint256) {\\n        return _cap;\\n    }\\n\\n    /**\\n     * @dev See {ERC20-_beforeTokenTransfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - minted tokens must not cause the total supply to go over the cap.\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual override {\\n        super._beforeTokenTransfer(from, to, amount);\\n\\n        if (from == address(0)) { // When minting tokens\\n            require(totalSupply().add(amount) <= cap(), \\\"ERC20Capped: cap exceeded\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x94e4d02b80450cf26bec54be6c0cf52fe4e8ce91dfc6e97794dce19ded2a3fa4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\",\"keccak256\":\"0x1562cd9922fbf739edfb979f506809e2743789cbde3177515542161c3d04b164\",\"license\":\"MIT\"},\"contracts/RubyMaker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\nimport \\\"./token_mappings/RubyToken.sol\\\";\\n\\nimport \\\"./libraries/SafeERC20.sol\\\";\\n\\n\\nimport \\\"./amm/interfaces/IUniswapV2ERC20.sol\\\";\\nimport \\\"./amm/interfaces/IUniswapV2Pair.sol\\\";\\nimport \\\"./amm/interfaces/IUniswapV2Factory.sol\\\";\\nimport \\\"./interfaces/IRubyStaker.sol\\\";\\n\\n\\ncontract RubyMaker is OwnableUpgradeable {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    IUniswapV2Factory public factory;\\n    IRubyStaker public rubyStaker;\\n    address public rubyToken;\\n    address public usdToken; // USD token (USDP initially)\\n\\n    uint256 public burnPercent;\\n\\n    event Convert(\\n        address indexed server,\\n        address indexed token0,\\n        address indexed token1,\\n        uint256 amount0,\\n        uint256 amount1,\\n        uint256 amountRubyDistributed,\\n        uint256 amountRubyBurned\\n    );\\n\\n    event BurnPercentSet(uint256 newBurnPercent);\\n\\n    event RubyTokenSet(address rubyToken);\\n\\n    event UsdTokenSet(address usdToken);\\n\\n    event AmmFactorySet(address factory);\\n\\n    event RubyStakerSet(address rubyStaker);\\n\\n    event PairWithdrawn(address indexed pair, uint256 amountWithdrawn);\\n\\n    function initialize(\\n        address _owner,\\n        address _factory, \\n        address _rubyStaker, \\n        address _rubyToken, \\n        address _usdToken,\\n        uint256 _burnPercent\\n        ) external initializer() { \\n        require(_owner != address(0), \\\"RubyMaker: Invalid owner address\\\");\\n        require(_factory != address(0), \\\"RubyMaker: Invalid AMM factory address.\\\");\\n        require(_rubyStaker != address(0), \\\"RubyMaker: Invalid rubyStaker address.\\\");\\n        require(_rubyToken != address(0), \\\"RubyMaker: Invalid rubyToken address.\\\");\\n        require(_usdToken != address(0), \\\"RubyMaker: Invalid USD token address.\\\");\\n        require(_burnPercent >= 0 && _burnPercent <= 100, \\\"RubyMaker: Invalid burn percent.\\\");\\n\\n        OwnableUpgradeable.__Ownable_init();\\n        transferOwnership(_owner);\\n    \\n        factory = IUniswapV2Factory(_factory);\\n        rubyStaker = IRubyStaker(_rubyStaker);\\n        rubyToken = _rubyToken;\\n        IERC20(_rubyToken).approve(_rubyStaker, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        usdToken = _usdToken;\\n\\n        // Note: Percentages are defined with 3 decimals (20% is defined as 20)\\n        // 0.05% (1/6th) of the total fees (0.30%) are sent to the RubyMaker\\n        // 0.04% of these fees (80%) are converted to Ruby and sent to the RubyStaker\\n        // 0.01% of these fees (20%) are burned\\n        burnPercent = _burnPercent;\\n    }\\n\\n    function setBurnPercent(uint256 newBurnPercent) external onlyOwner {\\n        require(newBurnPercent >= 0 && newBurnPercent <= 100, \\\"RubyMaker: Invalid burn percent.\\\");\\n        burnPercent = newBurnPercent;\\n        emit BurnPercentSet(newBurnPercent);\\n    }\\n\\n    modifier onlyEOA() {\\n        // Try to make flash-loan exploit harder to do by only allowing externally owned addresses.\\n        require(msg.sender == tx.origin, \\\"RubyMaker: must use EOA\\\");\\n        _;\\n    }\\n\\n    function convert(address token0, address token1) external onlyEOA {\\n        _convert(token0, token1);\\n    }\\n\\n    function convertMultiple(address[] calldata token0, address[] calldata token1) external onlyEOA {\\n        // TODO: This can be optimized a fair bit, but this is safer and simpler for now\\n        uint256 len = token0.length;\\n        for (uint256 i = 0; i < len; i++) {\\n            _convert(token0[i], token1[i]);\\n        }\\n    }\\n\\n    function _convert(address token0, address token1) internal {\\n        require(token0 != address(0), \\\"RubyMaker: token0 cannot be the zero address.\\\");\\n        require(token1 != address(0), \\\"RubyMaker: token1 cannot be the zero address.\\\");\\n        require(token0 != token1, \\\"RubyMaker: token0 and token1 cannot be the same token.\\\");\\n\\n        // We only support pairs where the one of the token is usdToken or rubyToken\\n        // when this changes, this needs to be modified along with the _convertStep function\\n        bool token0supported = (token0 == usdToken || token0 == rubyToken);\\n        bool token1supported = (token1 == usdToken || token1 == rubyToken);\\n        require(token0supported || token1supported, \\\"RubyMaker: Conversion unsupported.\\\");\\n        // Interactions\\n        IUniswapV2Pair pair = IUniswapV2Pair(factory.getPair(token0, token1));\\n        require(address(pair) != address(0), \\\"RubyMaker: Invalid pair.\\\");\\n\\n        IERC20(address(pair)).safeTransfer(address(pair), pair.balanceOf(address(this)));\\n\\n        (uint256 amount0, uint256 amount1) = pair.burn(address(this));\\n        if (token0 != pair.token0()) {\\n            (amount0, amount1) = (amount1, amount0);\\n        }\\n        uint256 totalConvertedRuby = _convertStep(token0, token1, amount0, amount1);\\n\\n        uint256 rubyToBurn = (totalConvertedRuby.mul(burnPercent)).div(100);\\n\\n        uint256 rubyRewards = totalConvertedRuby - rubyToBurn;\\n\\n        if(rubyToBurn > 0) {\\n            // Burn rubyToken\\n            RubyToken(rubyToken).burn(rubyToBurn);\\n        }\\n\\n        if(rubyRewards > 0) {\\n            rubyStaker.notifyRewardAmount(1, rubyRewards);\\n        }\\n\\n        emit Convert(msg.sender, token0, token1, amount0, amount1, rubyRewards, rubyToBurn);\\n    }\\n\\n    function _convertStep(\\n        address token0,\\n        address token1,\\n        uint256 amount0,\\n        uint256 amount1\\n    ) internal returns (uint256 rubyOut) {\\n        // Interactions\\n         if (token0 == rubyToken) {\\n            // eg. RUBY - USDP\\n            rubyOut = _toRUBY(token1, amount1).add(amount0);\\n        } else if (token1 == rubyToken) {\\n            // eg. USDP - RUBY\\n            rubyOut = _toRUBY(token0, amount0).add(amount1);\\n        } else if (token0 == usdToken) {\\n            // eg. USDP - XYZ\\n            uint256 usdSwapAmount = _swap(token1, usdToken, amount1, address(this));\\n            uint256 usdToRubyAmount = usdSwapAmount.add(amount0);\\n            rubyOut = _toRUBY(usdToken, usdToRubyAmount);\\n        } else {\\n            // token1 == usdToken\\n            // eg. XYZ - USDP\\n            uint256 usdSwapAmount = _swap(token0, usdToken, amount0, address(this));\\n            uint256 usdToRubyAmount = usdSwapAmount.add(amount1);\\n            rubyOut = _toRUBY(usdToken, usdToRubyAmount);\\n        }\\n    }\\n\\n    function _swap(\\n        address fromToken,\\n        address toToken,\\n        uint256 amountIn,\\n        address to\\n    ) internal returns (uint256 amountOut) {\\n        IUniswapV2Pair pair = IUniswapV2Pair(factory.getPair(fromToken, toToken));\\n        require(address(pair) != address(0), \\\"RubyMaker: Invalid pair.\\\");\\n\\n        (uint256 reserve0, uint256 reserve1, ) = pair.getReserves();\\n        uint256 amountInWithFee = amountIn.mul(997);\\n        if (fromToken == pair.token0()) {\\n            amountOut = amountInWithFee.mul(reserve1) / reserve0.mul(1000).add(amountInWithFee);\\n            IERC20(fromToken).safeTransfer(address(pair), amountIn);\\n            pair.swap(0, amountOut, to, 997, new bytes(0));\\n            // TODO: Add maximum slippage?\\n        } else {\\n            amountOut = amountInWithFee.mul(reserve0) / reserve1.mul(1000).add(amountInWithFee);\\n            IERC20(fromToken).safeTransfer(address(pair), amountIn);\\n            pair.swap(amountOut, 0, to, 997, new bytes(0));\\n            // TODO: Add maximum slippage?\\n        }\\n    }\\n\\n    function _toRUBY(address token, uint256 amountIn) internal returns (uint256 amountOut) {\\n        amountOut = _swap(token, rubyToken, amountIn, address(this));\\n    }\\n\\n\\n    // ADMIN functions\\n    function setRubyToken(address newRubyToken) external onlyOwner {\\n        require(newRubyToken != address(0), \\\"RubyMaker: Invalid rubyToken token address.\\\");\\n        require(isContract(newRubyToken), \\\"RubyMaker: newRubyToken is not a contract address.\\\");\\n        rubyToken = newRubyToken;\\n        emit RubyTokenSet(newRubyToken);\\n    }\\n\\n\\n    function setUsdToken(address newUsdToken) external onlyOwner {\\n        require(newUsdToken != address(0), \\\"RubyMaker: Invalid USD token address.\\\");\\n        require(isContract(newUsdToken), \\\"RubyMaker: newUsdToken is not a contract address.\\\");\\n        usdToken = newUsdToken;\\n        emit UsdTokenSet(newUsdToken);\\n    }\\n\\n    function setRubyStaker(address newRubyStaker) external onlyOwner {\\n        require(newRubyStaker != address(0), \\\"RubyMaker: Invalid rubyStaker address.\\\");\\n        require(isContract(newRubyStaker), \\\"RubyMaker: newRubyStaker is not a contract address.\\\");\\n        rubyStaker = IRubyStaker(newRubyStaker);\\n        emit RubyStakerSet(newRubyStaker);\\n    }\\n\\n    function setAmmFactory(address newFactory) external onlyOwner {\\n        require(newFactory != address(0), \\\"RubyMaker: Invalid AMM factory address.\\\");\\n        require(isContract(newFactory), \\\"RubyMaker: newFactory is not a contract address.\\\");\\n        factory = IUniswapV2Factory(newFactory);\\n        emit AmmFactorySet(newFactory);\\n    }\\n\\n    function withdrawLP(address pair) external onlyOwner {\\n        require(pair != address(0), \\\"RubyMaker: Invalid pair address.\\\");\\n        require(isContract(pair), \\\"RubyMaker: pair is not a contract address.\\\");\\n        IERC20 _pair = IERC20(pair);\\n        uint256 pairBalance = _pair.balanceOf(address(this));\\n        _pair.safeTransfer(owner(), pairBalance);\\n        emit PairWithdrawn(pair, pairBalance);\\n    }\\n\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n}\\n\",\"keccak256\":\"0x4260c3c26f90f81671774174cd2f819771a0ce17133417306950a871be4a75b3\",\"license\":\"MIT\"},\"contracts/amm/interfaces/IUniswapV2ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.5.0;\\n\\ninterface IUniswapV2ERC20 {\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    function name() external pure returns (string memory);\\n\\n    function symbol() external pure returns (string memory);\\n\\n    function decimals() external pure returns (uint8);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address owner) external view returns (uint256);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n\\n    function nonces(address owner) external view returns (uint256);\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n}\\n\",\"keccak256\":\"0x97f9b9f66de2e3708d98e06fb16c32447865ec29ad4c796d7d0a43d43ce40ea3\",\"license\":\"GPL-3.0\"},\"contracts/amm/interfaces/IUniswapV2Factory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Factory {\\n\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint256);\\n    event AdminSet(address indexed newAdmin);\\n    event FeeToRecipientSet(address indexed newFeeTo);\\n    event PairCreatorSet(address indexed pairCreator, bool allowance);\\n    event FeeDecutionSwapperSet(address indexed swapper, bool allowance);\\n\\n    function feeTo() external view returns (address);\\n\\n    function admin() external view returns (address);\\n\\n    function pairCreators(address) external view returns (bool);\\n\\n    function feeDeductionSwappers(address) external view returns (bool);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n\\n    function allPairs(uint256) external view returns (address pair);\\n\\n    function allPairsLength() external view returns (uint256);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address newFeeTo) external;\\n\\n    function setPairCreator(address pairCreator, bool allowance) external;\\n\\n    function setFeeDeductionSwapper(address feeDeductionSwapper, bool allowance) external;\\n\\n    function setAdmin(address newAdmin) external;\\n}\\n\",\"keccak256\":\"0xbc812c2f059f5b1474e1ffae148fc77f603bf62b87f3a0f86ea6451a1aa2301a\",\"license\":\"GPL-3.0\"},\"contracts/amm/interfaces/IUniswapV2Pair.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    function name() external pure returns (string memory);\\n\\n    function symbol() external pure returns (string memory);\\n\\n    function decimals() external pure returns (uint8);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address owner) external view returns (uint256);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n\\n    function nonces(address owner) external view returns (uint256);\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\\n    event Burn(address indexed sender, uint256 amount0, uint256 amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint256 amount0In,\\n        uint256 amount1In,\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\\n\\n    function factory() external view returns (address);\\n\\n    function token0() external view returns (address);\\n\\n    function token1() external view returns (address);\\n\\n    function getReserves()\\n        external\\n        view\\n        returns (\\n            uint112 reserve0,\\n            uint112 reserve1,\\n            uint32 blockTimestampLast\\n        );\\n\\n    function price0CumulativeLast() external view returns (uint256);\\n\\n    function price1CumulativeLast() external view returns (uint256);\\n\\n    function kLast() external view returns (uint256);\\n\\n    function mint(address to) external returns (uint256 liquidity);\\n\\n    function burn(address to) external returns (uint256 amount0, uint256 amount1);\\n\\n    function swap(\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address to,\\n        uint256 feeMultiplicator,\\n        bytes calldata data\\n    ) external;\\n\\n    function skim(address to) external;\\n\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\",\"keccak256\":\"0x6977b5fc518821550bb1be231e696b770e5196c96ed60aff7f5cbbba11ae866d\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IRubyStaker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IRubyStaker {\\n    function mint(address _receiver, uint256 _amount) external;\\n\\n    function notifyRewardAmount(uint256 rewardId, uint256 reward) external;\\n}\\n\",\"keccak256\":\"0xd71afd14dfc01a7e070a64e1911bf4a916f6e9bd82c91bd58e6af238dac0b410\",\"license\":\"MIT\"},\"contracts/libraries/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nlibrary SafeERC20 {\\n    function safeSymbol(IERC20 token) internal view returns (string memory) {\\n        (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(0x95d89b41));\\n        return success && data.length > 0 ? abi.decode(data, (string)) : \\\"???\\\";\\n    }\\n\\n    function safeName(IERC20 token) internal view returns (string memory) {\\n        (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(0x06fdde03));\\n        return success && data.length > 0 ? abi.decode(data, (string)) : \\\"???\\\";\\n    }\\n\\n    function safeDecimals(IERC20 token) public view returns (uint8) {\\n        (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(0x313ce567));\\n        return success && data.length == 32 ? abi.decode(data, (uint8)) : 18;\\n    }\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        (bool success, bytes memory data) = address(token).call(abi.encodeWithSelector(0xa9059cbb, to, amount));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"SafeERC20: Transfer failed\\\");\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        uint256 amount\\n    ) internal {\\n        (bool success, bytes memory data) = address(token).call(\\n            abi.encodeWithSelector(0x23b872dd, from, address(this), amount)\\n        );\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"SafeERC20: TransferFrom failed\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xda0fe043037c2888e546fd734693aa75587ea28c102f44a88dc22a7f688989ce\",\"license\":\"MIT\"},\"contracts/token_mappings/RubyToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20Capped.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\n\\n/**\\n * @title RubyToken with Governance\\n * @notice This version of the RubyToken is to be used on the SChain\\n * It features access control needed for the IMA TokenManager contract (bridging),\\n * and also for the RubyMaker contract (distribute and burn mechanism)\\n */\\ncontract RubyToken is ERC20Capped, AccessControl {\\n    /// @notice Access control roles for the IMA TokenManager\\n    bytes32 public constant MINTER_ROLE = keccak256(\\\"MINTER_ROLE\\\");\\n    bytes32 public constant BURNER_ROLE = keccak256(\\\"BURNER_ROLE\\\");\\n\\n    /// @notice Total number of tokens\\n    uint256 public constant MAX_SUPPLY = 200_000_000e18; // 200 million Ruby\\n\\n    /// @notice The total amount of burned Ruby tokens\\n    uint256 public burnedAmount;\\n\\n    constructor() public ERC20(\\\"RubyToken\\\", \\\"RUBY\\\") ERC20Capped(MAX_SUPPLY) {\\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n    }\\n\\n    /// @notice Creates `amount` token to `to`. Must only be called by the IMA TokenManager contract\\n    function mint(address to, uint256 amount) public {\\n        require(hasRole(MINTER_ROLE, msg.sender), \\\"RUBY::mint: Caller is not a minter\\\");\\n        _mint(to, amount);\\n    }\\n\\n    /// @notice Destroys `amount` of RUBY tokens from the msg.sender. \\n    /// Must only be called by the IMA TokenManager contract and the RubyMaker contract\\n    function burn(uint256 amount) public virtual {\\n        require(hasRole(BURNER_ROLE, msg.sender), \\\"RUBY::burn: Caller is not a burner\\\");\\n        _burn(msg.sender, amount);\\n        burnedAmount += amount;\\n    }\\n\\n}\\n\",\"keccak256\":\"0x6edbc8cd36a38ec2d909a4231f24b0a963b7215f7451b3bdec8db9971a7e272e\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506124de806100206000396000f3fe608060405234801561001057600080fd5b506004361061010b5760003560e01c806395b6ef0c116100a2578063c45a015511610071578063c45a015514610333578063c579535a1461033b578063da80559014610361578063f2fde38b14610387578063f897a22b146103ad5761010b565b806395b6ef0c14610294578063bb1570da146102e0578063bd1b820c146102fd578063c0a0a5a21461032b5761010b565b80634dbc5143116100de5780634dbc51431461023a578063620db60914610260578063715018a6146102845780638da5cb5b1461028c5761010b565b806303807ee51461011057806306b66e1f1461012a57806312c09a3a14610152578063303e6aa414610178575b600080fd5b6101186103b5565b60408051918252519081900360200190f35b6101506004803603602081101561014057600080fd5b50356001600160a01b03166103bb565b005b6101506004803603602081101561016857600080fd5b50356001600160a01b03166104fa565b6101506004803603604081101561018e57600080fd5b8101906020810181356401000000008111156101a957600080fd5b8201836020820111156101bb57600080fd5b803590602001918460208302840111640100000000831117156101dd57600080fd5b9193909290916020810190356401000000008111156101fb57600080fd5b82018360208201111561020d57600080fd5b8035906020019184602083028401116401000000008311171561022f57600080fd5b509092509050610639565b6101506004803603602081101561025057600080fd5b50356001600160a01b03166106e3565b610268610822565b604080516001600160a01b039092168252519081900360200190f35b610150610831565b6102686108dd565b610150600480360360c08110156102aa57600080fd5b506001600160a01b0381358116916020810135821691604082013581169160608101358216916080820135169060a001356108ec565b610150600480360360208110156102f657600080fd5b5035610c3b565b6101506004803603604081101561031357600080fd5b506001600160a01b0381358116916020013516610d2e565b610268610d8a565b610268610d99565b6101506004803603602081101561035157600080fd5b50356001600160a01b0316610da8565b6101506004803603602081101561037757600080fd5b50356001600160a01b0316610f82565b6101506004803603602081101561039d57600080fd5b50356001600160a01b03166110c1565b6102686111c4565b60695481565b6103c36111d3565b6001600160a01b03166103d46108dd565b6001600160a01b03161461041d576040805162461bcd60e51b81526020600482018190526024820152600080516020612363833981519152604482015290519081900360640190fd5b6001600160a01b0381166104625760405162461bcd60e51b815260040180806020018281038252602b815260200180612383602b913960400191505060405180910390fd5b61046b816111d7565b6104a65760405162461bcd60e51b81526004018080602001828103825260328152602001806122036032913960400191505060405180910390fd5b606780546001600160a01b0383166001600160a01b0319909116811790915560408051918252517f3f79f689c41dad6c265b494bfae4ada38fde4b1dad2b6519bc633102a0c34de39181900360200190a150565b6105026111d3565b6001600160a01b03166105136108dd565b6001600160a01b03161461055c576040805162461bcd60e51b81526020600482018190526024820152600080516020612363833981519152604482015290519081900360640190fd5b6001600160a01b0381166105a15760405162461bcd60e51b81526004018080602001828103825260268152602001806124066026913960400191505060405180910390fd5b6105aa816111d7565b6105e55760405162461bcd60e51b81526004018080602001828103825260338152602001806124766033913960400191505060405180910390fd5b606680546001600160a01b0383166001600160a01b0319909116811790915560408051918252517fe414845b06f7832c1b8e0804a5e88918b156356e937af3cfdcb231b77569dc279181900360200190a150565b333214610687576040805162461bcd60e51b8152602060048201526017602482015276527562794d616b65723a206d7573742075736520454f4160481b604482015290519081900360640190fd5b8260005b818110156106db576106d38686838181106106a257fe5b905060200201356001600160a01b03168585848181106106be57fe5b905060200201356001600160a01b03166111dd565b60010161068b565b505050505050565b6106eb6111d3565b6001600160a01b03166106fc6108dd565b6001600160a01b031614610745576040805162461bcd60e51b81526020600482018190526024820152600080516020612363833981519152604482015290519081900360640190fd5b6001600160a01b03811661078a5760405162461bcd60e51b81526004018080602001828103825260278152602001806123ae6027913960400191505060405180910390fd5b610793816111d7565b6107ce5760405162461bcd60e51b81526004018080602001828103825260308152602001806122f06030913960400191505060405180910390fd5b606580546001600160a01b0383166001600160a01b0319909116811790915560408051918252517fdf44881239f7d76ca6a96b057bbc86ae4043591ab2e7f5aaec0a55aec0deb7469181900360200190a150565b6067546001600160a01b031681565b6108396111d3565b6001600160a01b031661084a6108dd565b6001600160a01b031614610893576040805162461bcd60e51b81526020600482018190526024820152600080516020612363833981519152604482015290519081900360640190fd5b6033546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3603380546001600160a01b0319169055565b6033546001600160a01b031690565b600054610100900460ff16806109055750610905611745565b80610913575060005460ff16155b61094e5760405162461bcd60e51b815260040180806020018281038252602e8152602001806122c2602e913960400191505060405180910390fd5b600054610100900460ff16158015610979576000805460ff1961ff0019909116610100171660011790555b6001600160a01b0387166109d4576040805162461bcd60e51b815260206004820181905260248201527f527562794d616b65723a20496e76616c6964206f776e65722061646472657373604482015290519081900360640190fd5b6001600160a01b038616610a195760405162461bcd60e51b81526004018080602001828103825260278152602001806123ae6027913960400191505060405180910390fd5b6001600160a01b038516610a5e5760405162461bcd60e51b81526004018080602001828103825260268152602001806124066026913960400191505060405180910390fd5b6001600160a01b038416610aa35760405162461bcd60e51b815260040180806020018281038252602581526020018061242c6025913960400191505060405180910390fd5b6001600160a01b038316610ae85760405162461bcd60e51b81526004018080602001828103825260258152602001806124516025913960400191505060405180910390fd5b6064821115610b3e576040805162461bcd60e51b815260206004820181905260248201527f527562794d616b65723a20496e76616c6964206275726e2070657263656e742e604482015290519081900360640190fd5b610b46611756565b610b4f876110c1565b606580546001600160a01b038089166001600160a01b031992831617909255606680548884169083168117909155606780549388169390921683179091556040805163095ea7b360e01b8152600481019290925260001960248301525163095ea7b3916044808201926020929091908290030181600087803b158015610bd457600080fd5b505af1158015610be8573d6000803e3d6000fd5b505050506040513d6020811015610bfe57600080fd5b5050606880546001600160a01b0319166001600160a01b03851617905560698290558015610c32576000805461ff00191690555b50505050505050565b610c436111d3565b6001600160a01b0316610c546108dd565b6001600160a01b031614610c9d576040805162461bcd60e51b81526020600482018190526024820152600080516020612363833981519152604482015290519081900360640190fd5b6064811115610cf3576040805162461bcd60e51b815260206004820181905260248201527f527562794d616b65723a20496e76616c6964206275726e2070657263656e742e604482015290519081900360640190fd5b60698190556040805182815290517fee42bd92f0c3b2684d1735f2870c3ebd2885672887d86233c03f317cefddb8979181900360200190a150565b333214610d7c576040805162461bcd60e51b8152602060048201526017602482015276527562794d616b65723a206d7573742075736520454f4160481b604482015290519081900360640190fd5b610d8682826111dd565b5050565b6066546001600160a01b031681565b6065546001600160a01b031681565b610db06111d3565b6001600160a01b0316610dc16108dd565b6001600160a01b031614610e0a576040805162461bcd60e51b81526020600482018190526024820152600080516020612363833981519152604482015290519081900360640190fd5b6001600160a01b038116610e65576040805162461bcd60e51b815260206004820181905260248201527f527562794d616b65723a20496e76616c6964207061697220616464726573732e604482015290519081900360640190fd5b610e6e816111d7565b610ea95760405162461bcd60e51b815260040180806020018281038252602a81526020018061226b602a913960400191505060405180910390fd5b604080516370a0823160e01b8152306004820152905182916000916001600160a01b038416916370a08231916024808301926020929190829003018186803b158015610ef457600080fd5b505afa158015610f08573d6000803e3d6000fd5b505050506040513d6020811015610f1e57600080fd5b50519050610f3e610f2d6108dd565b6001600160a01b0384169083611808565b6040805182815290516001600160a01b038516917f45599e12043a66b48a020f458d7f322c64972a0f3515a4d38820db6338011227919081900360200190a2505050565b610f8a6111d3565b6001600160a01b0316610f9b6108dd565b6001600160a01b031614610fe4576040805162461bcd60e51b81526020600482018190526024820152600080516020612363833981519152604482015290519081900360640190fd5b6001600160a01b0381166110295760405162461bcd60e51b81526004018080602001828103825260258152602001806124516025913960400191505060405180910390fd5b611032816111d7565b61106d5760405162461bcd60e51b81526004018080602001828103825260318152602001806123d56031913960400191505060405180910390fd5b606880546001600160a01b0383166001600160a01b0319909116811790915560408051918252517ff1ced7f5ac117635a33b1d3d5a87abaf646fb70da4f180ae4b78d90700cab4689181900360200190a150565b6110c96111d3565b6001600160a01b03166110da6108dd565b6001600160a01b031614611123576040805162461bcd60e51b81526020600482018190526024820152600080516020612363833981519152604482015290519081900360640190fd5b6001600160a01b0381166111685760405162461bcd60e51b81526004018080602001828103825260268152602001806121dd6026913960400191505060405180910390fd5b6033546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3603380546001600160a01b0319166001600160a01b0392909216919091179055565b6068546001600160a01b031681565b3390565b3b151590565b6001600160a01b0382166112225760405162461bcd60e51b815260040180806020018281038252602d815260200180612295602d913960400191505060405180910390fd5b6001600160a01b0381166112675760405162461bcd60e51b815260040180806020018281038252602d8152602001806121b0602d913960400191505060405180910390fd5b806001600160a01b0316826001600160a01b031614156112b85760405162461bcd60e51b81526004018080602001828103825260368152602001806122356036913960400191505060405180910390fd5b6068546000906001600160a01b03848116911614806112e457506067546001600160a01b038481169116145b6068549091506000906001600160a01b038481169116148061131357506067546001600160a01b038481169116145b9050818061131e5750805b6113595760405162461bcd60e51b81526004018080602001828103825260228152602001806123206022913960400191505060405180910390fd5b6065546040805163e6a4390560e01b81526001600160a01b03878116600483015286811660248301529151600093929092169163e6a4390591604480820192602092909190829003018186803b1580156113b257600080fd5b505afa1580156113c6573d6000803e3d6000fd5b505050506040513d60208110156113dc57600080fd5b505190506001600160a01b038116611436576040805162461bcd60e51b8152602060048201526018602482015277293ab13ca6b0b5b2b91d1024b73b30b634b2103830b4b91760411b604482015290519081900360640190fd5b6114c481826001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561148757600080fd5b505afa15801561149b573d6000803e3d6000fd5b505050506040513d60208110156114b157600080fd5b50516001600160a01b0384169190611808565b600080826001600160a01b03166389afcb44306040518263ffffffff1660e01b815260040180826001600160a01b031681526020019150506040805180830381600087803b15801561151557600080fd5b505af1158015611529573d6000803e3d6000fd5b505050506040513d604081101561153f57600080fd5b50805160209182015160408051630dfe168160e01b815290519295509093506001600160a01b03861692630dfe168192600480840193829003018186803b15801561158957600080fd5b505afa15801561159d573d6000803e3d6000fd5b505050506040513d60208110156115b357600080fd5b50516001600160a01b038881169116146115c957905b60006115d788888585611972565b905060006115fb60646115f560695485611a7c90919063ffffffff16565b90611ade565b9050808203811561166c5760675460408051630852cd8d60e31b81526004810185905290516001600160a01b03909216916342966c689160248082019260009290919082900301818387803b15801561165357600080fd5b505af1158015611667573d6000803e3d6000fd5b505050505b80156116df576066546040805163246132f960e01b8152600160048201526024810184905290516001600160a01b039092169163246132f99160448082019260009290919082900301818387803b1580156116c657600080fd5b505af11580156116da573d6000803e3d6000fd5b505050505b60408051868152602081018690528082018390526060810184905290516001600160a01b03808c1692908d169133917f1d70b0ff9f689b827aeb5bee551ae4004c61b5877163c7a19656dbbdef836e9c919081900360800190a450505050505050505050565b6000611750306111d7565b15905090565b600054610100900460ff168061176f575061176f611745565b8061177d575060005460ff16155b6117b85760405162461bcd60e51b815260040180806020018281038252602e8152602001806122c2602e913960400191505060405180910390fd5b600054610100900460ff161580156117e3576000805460ff1961ff0019909116610100171660011790555b6117eb611b45565b6117f3611be5565b8015611805576000805461ff00191690555b50565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b031663a9059cbb60e01b178152925182516000946060949389169392918291908083835b602083106118855780518252601f199092019160209182019101611866565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d80600081146118e7576040519150601f19603f3d011682016040523d82523d6000602084013e6118ec565b606091505b509150915081801561191a57508051158061191a575080806020019051602081101561191757600080fd5b50515b61196b576040805162461bcd60e51b815260206004820152601a60248201527f5361666545524332303a205472616e73666572206661696c6564000000000000604482015290519081900360640190fd5b5050505050565b6067546000906001600160a01b03868116911614156119a65761199f836119998685611cde565b90611d01565b9050611a74565b6067546001600160a01b03858116911614156119ca5761199f826119998786611cde565b6068546001600160a01b0386811691161415611a2c576068546000906119fc9086906001600160a01b03168530611d5b565b90506000611a0a8286611d01565b606854909150611a23906001600160a01b031682611cde565b92505050611a74565b606854600090611a489087906001600160a01b03168630611d5b565b90506000611a568285611d01565b606854909150611a6f906001600160a01b031682611cde565b925050505b949350505050565b600082611a8b57506000611ad8565b82820282848281611a9857fe5b0414611ad55760405162461bcd60e51b81526004018080602001828103825260218152602001806123426021913960400191505060405180910390fd5b90505b92915050565b6000808211611b34576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b818381611b3d57fe5b049392505050565b600054610100900460ff1680611b5e5750611b5e611745565b80611b6c575060005460ff16155b611ba75760405162461bcd60e51b815260040180806020018281038252602e8152602001806122c2602e913960400191505060405180910390fd5b600054610100900460ff161580156117f3576000805460ff1961ff0019909116610100171660011790558015611805576000805461ff001916905550565b600054610100900460ff1680611bfe5750611bfe611745565b80611c0c575060005460ff16155b611c475760405162461bcd60e51b815260040180806020018281038252602e8152602001806122c2602e913960400191505060405180910390fd5b600054610100900460ff16158015611c72576000805460ff1961ff0019909116610100171660011790555b6000611c7c6111d3565b603380546001600160a01b0319166001600160a01b038316908117909155604051919250906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3508015611805576000805461ff001916905550565b606754600090611cfa9084906001600160a01b03168430611d5b565b9392505050565b600082820183811015611ad5576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b6065546040805163e6a4390560e01b81526001600160a01b038781166004830152868116602483015291516000938493169163e6a43905916044808301926020929190829003018186803b158015611db257600080fd5b505afa158015611dc6573d6000803e3d6000fd5b505050506040513d6020811015611ddc57600080fd5b505190506001600160a01b038116611e36576040805162461bcd60e51b8152602060048201526018602482015277293ab13ca6b0b5b2b91d1024b73b30b634b2103830b4b91760411b604482015290519081900360640190fd5b600080826001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b158015611e7257600080fd5b505afa158015611e86573d6000803e3d6000fd5b505050506040513d6060811015611e9c57600080fd5b5080516020909101516dffffffffffffffffffffffffffff91821693501690506000611eca876103e5611a7c565b9050836001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b158015611f0557600080fd5b505afa158015611f19573d6000803e3d6000fd5b505050506040513d6020811015611f2f57600080fd5b50516001600160a01b038a81169116141561207557611f5481611999856103e8611a7c565b611f5e8284611a7c565b81611f6557fe5b049450611f7c6001600160a01b038a168589611808565b60408051600080825260208201928390526316d6989160e31b835260248201818152604483018990526001600160a01b038a811660648501526103e56084850181905260a060a48601908152855160c48701819052928b169663b6b4c488968d958f9591939092909160e4850191908083838c5b83811015612008578181015183820152602001611ff0565b50505050905090810190601f1680156120355780820380516001836020036101000a031916815260200191505b509650505050505050600060405180830381600087803b15801561205857600080fd5b505af115801561206c573d6000803e3d6000fd5b505050506121a3565b61208581611999846103e8611a7c565b61208f8285611a7c565b8161209657fe5b0494506120ad6001600160a01b038a168589611808565b60408051600080825260208201928390526316d6989160e31b835260248201888152604483018290526001600160a01b038a811660648501526103e56084850181905260a060a48601908152855160c48701819052928b169663b6b4c488968d96958f9591939092909160e4850191908083838b5b8381101561213a578181015183820152602001612122565b50505050905090810190601f1680156121675780820380516001836020036101000a031916815260200191505b509650505050505050600060405180830381600087803b15801561218a57600080fd5b505af115801561219e573d6000803e3d6000fd5b505050505b5050505094935050505056fe527562794d616b65723a20746f6b656e312063616e6e6f7420626520746865207a65726f20616464726573732e4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373527562794d616b65723a206e657752756279546f6b656e206973206e6f74206120636f6e747261637420616464726573732e527562794d616b65723a20746f6b656e3020616e6420746f6b656e312063616e6e6f74206265207468652073616d6520746f6b656e2e527562794d616b65723a2070616972206973206e6f74206120636f6e747261637420616464726573732e527562794d616b65723a20746f6b656e302063616e6e6f7420626520746865207a65726f20616464726573732e496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a6564527562794d616b65723a206e6577466163746f7279206973206e6f74206120636f6e747261637420616464726573732e527562794d616b65723a20436f6e76657273696f6e20756e737570706f727465642e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f774f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572527562794d616b65723a20496e76616c69642072756279546f6b656e20746f6b656e20616464726573732e527562794d616b65723a20496e76616c696420414d4d20666163746f727920616464726573732e527562794d616b65723a206e6577557364546f6b656e206973206e6f74206120636f6e747261637420616464726573732e527562794d616b65723a20496e76616c696420727562795374616b657220616464726573732e527562794d616b65723a20496e76616c69642072756279546f6b656e20616464726573732e527562794d616b65723a20496e76616c69642055534420746f6b656e20616464726573732e527562794d616b65723a206e6577527562795374616b6572206973206e6f74206120636f6e747261637420616464726573732ea26469706673582212204c1d8c989cca369689576c737265f6e0442748cc271ca172b43e54b86ec5e43d64736f6c634300060c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061010b5760003560e01c806395b6ef0c116100a2578063c45a015511610071578063c45a015514610333578063c579535a1461033b578063da80559014610361578063f2fde38b14610387578063f897a22b146103ad5761010b565b806395b6ef0c14610294578063bb1570da146102e0578063bd1b820c146102fd578063c0a0a5a21461032b5761010b565b80634dbc5143116100de5780634dbc51431461023a578063620db60914610260578063715018a6146102845780638da5cb5b1461028c5761010b565b806303807ee51461011057806306b66e1f1461012a57806312c09a3a14610152578063303e6aa414610178575b600080fd5b6101186103b5565b60408051918252519081900360200190f35b6101506004803603602081101561014057600080fd5b50356001600160a01b03166103bb565b005b6101506004803603602081101561016857600080fd5b50356001600160a01b03166104fa565b6101506004803603604081101561018e57600080fd5b8101906020810181356401000000008111156101a957600080fd5b8201836020820111156101bb57600080fd5b803590602001918460208302840111640100000000831117156101dd57600080fd5b9193909290916020810190356401000000008111156101fb57600080fd5b82018360208201111561020d57600080fd5b8035906020019184602083028401116401000000008311171561022f57600080fd5b509092509050610639565b6101506004803603602081101561025057600080fd5b50356001600160a01b03166106e3565b610268610822565b604080516001600160a01b039092168252519081900360200190f35b610150610831565b6102686108dd565b610150600480360360c08110156102aa57600080fd5b506001600160a01b0381358116916020810135821691604082013581169160608101358216916080820135169060a001356108ec565b610150600480360360208110156102f657600080fd5b5035610c3b565b6101506004803603604081101561031357600080fd5b506001600160a01b0381358116916020013516610d2e565b610268610d8a565b610268610d99565b6101506004803603602081101561035157600080fd5b50356001600160a01b0316610da8565b6101506004803603602081101561037757600080fd5b50356001600160a01b0316610f82565b6101506004803603602081101561039d57600080fd5b50356001600160a01b03166110c1565b6102686111c4565b60695481565b6103c36111d3565b6001600160a01b03166103d46108dd565b6001600160a01b03161461041d576040805162461bcd60e51b81526020600482018190526024820152600080516020612363833981519152604482015290519081900360640190fd5b6001600160a01b0381166104625760405162461bcd60e51b815260040180806020018281038252602b815260200180612383602b913960400191505060405180910390fd5b61046b816111d7565b6104a65760405162461bcd60e51b81526004018080602001828103825260328152602001806122036032913960400191505060405180910390fd5b606780546001600160a01b0383166001600160a01b0319909116811790915560408051918252517f3f79f689c41dad6c265b494bfae4ada38fde4b1dad2b6519bc633102a0c34de39181900360200190a150565b6105026111d3565b6001600160a01b03166105136108dd565b6001600160a01b03161461055c576040805162461bcd60e51b81526020600482018190526024820152600080516020612363833981519152604482015290519081900360640190fd5b6001600160a01b0381166105a15760405162461bcd60e51b81526004018080602001828103825260268152602001806124066026913960400191505060405180910390fd5b6105aa816111d7565b6105e55760405162461bcd60e51b81526004018080602001828103825260338152602001806124766033913960400191505060405180910390fd5b606680546001600160a01b0383166001600160a01b0319909116811790915560408051918252517fe414845b06f7832c1b8e0804a5e88918b156356e937af3cfdcb231b77569dc279181900360200190a150565b333214610687576040805162461bcd60e51b8152602060048201526017602482015276527562794d616b65723a206d7573742075736520454f4160481b604482015290519081900360640190fd5b8260005b818110156106db576106d38686838181106106a257fe5b905060200201356001600160a01b03168585848181106106be57fe5b905060200201356001600160a01b03166111dd565b60010161068b565b505050505050565b6106eb6111d3565b6001600160a01b03166106fc6108dd565b6001600160a01b031614610745576040805162461bcd60e51b81526020600482018190526024820152600080516020612363833981519152604482015290519081900360640190fd5b6001600160a01b03811661078a5760405162461bcd60e51b81526004018080602001828103825260278152602001806123ae6027913960400191505060405180910390fd5b610793816111d7565b6107ce5760405162461bcd60e51b81526004018080602001828103825260308152602001806122f06030913960400191505060405180910390fd5b606580546001600160a01b0383166001600160a01b0319909116811790915560408051918252517fdf44881239f7d76ca6a96b057bbc86ae4043591ab2e7f5aaec0a55aec0deb7469181900360200190a150565b6067546001600160a01b031681565b6108396111d3565b6001600160a01b031661084a6108dd565b6001600160a01b031614610893576040805162461bcd60e51b81526020600482018190526024820152600080516020612363833981519152604482015290519081900360640190fd5b6033546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3603380546001600160a01b0319169055565b6033546001600160a01b031690565b600054610100900460ff16806109055750610905611745565b80610913575060005460ff16155b61094e5760405162461bcd60e51b815260040180806020018281038252602e8152602001806122c2602e913960400191505060405180910390fd5b600054610100900460ff16158015610979576000805460ff1961ff0019909116610100171660011790555b6001600160a01b0387166109d4576040805162461bcd60e51b815260206004820181905260248201527f527562794d616b65723a20496e76616c6964206f776e65722061646472657373604482015290519081900360640190fd5b6001600160a01b038616610a195760405162461bcd60e51b81526004018080602001828103825260278152602001806123ae6027913960400191505060405180910390fd5b6001600160a01b038516610a5e5760405162461bcd60e51b81526004018080602001828103825260268152602001806124066026913960400191505060405180910390fd5b6001600160a01b038416610aa35760405162461bcd60e51b815260040180806020018281038252602581526020018061242c6025913960400191505060405180910390fd5b6001600160a01b038316610ae85760405162461bcd60e51b81526004018080602001828103825260258152602001806124516025913960400191505060405180910390fd5b6064821115610b3e576040805162461bcd60e51b815260206004820181905260248201527f527562794d616b65723a20496e76616c6964206275726e2070657263656e742e604482015290519081900360640190fd5b610b46611756565b610b4f876110c1565b606580546001600160a01b038089166001600160a01b031992831617909255606680548884169083168117909155606780549388169390921683179091556040805163095ea7b360e01b8152600481019290925260001960248301525163095ea7b3916044808201926020929091908290030181600087803b158015610bd457600080fd5b505af1158015610be8573d6000803e3d6000fd5b505050506040513d6020811015610bfe57600080fd5b5050606880546001600160a01b0319166001600160a01b03851617905560698290558015610c32576000805461ff00191690555b50505050505050565b610c436111d3565b6001600160a01b0316610c546108dd565b6001600160a01b031614610c9d576040805162461bcd60e51b81526020600482018190526024820152600080516020612363833981519152604482015290519081900360640190fd5b6064811115610cf3576040805162461bcd60e51b815260206004820181905260248201527f527562794d616b65723a20496e76616c6964206275726e2070657263656e742e604482015290519081900360640190fd5b60698190556040805182815290517fee42bd92f0c3b2684d1735f2870c3ebd2885672887d86233c03f317cefddb8979181900360200190a150565b333214610d7c576040805162461bcd60e51b8152602060048201526017602482015276527562794d616b65723a206d7573742075736520454f4160481b604482015290519081900360640190fd5b610d8682826111dd565b5050565b6066546001600160a01b031681565b6065546001600160a01b031681565b610db06111d3565b6001600160a01b0316610dc16108dd565b6001600160a01b031614610e0a576040805162461bcd60e51b81526020600482018190526024820152600080516020612363833981519152604482015290519081900360640190fd5b6001600160a01b038116610e65576040805162461bcd60e51b815260206004820181905260248201527f527562794d616b65723a20496e76616c6964207061697220616464726573732e604482015290519081900360640190fd5b610e6e816111d7565b610ea95760405162461bcd60e51b815260040180806020018281038252602a81526020018061226b602a913960400191505060405180910390fd5b604080516370a0823160e01b8152306004820152905182916000916001600160a01b038416916370a08231916024808301926020929190829003018186803b158015610ef457600080fd5b505afa158015610f08573d6000803e3d6000fd5b505050506040513d6020811015610f1e57600080fd5b50519050610f3e610f2d6108dd565b6001600160a01b0384169083611808565b6040805182815290516001600160a01b038516917f45599e12043a66b48a020f458d7f322c64972a0f3515a4d38820db6338011227919081900360200190a2505050565b610f8a6111d3565b6001600160a01b0316610f9b6108dd565b6001600160a01b031614610fe4576040805162461bcd60e51b81526020600482018190526024820152600080516020612363833981519152604482015290519081900360640190fd5b6001600160a01b0381166110295760405162461bcd60e51b81526004018080602001828103825260258152602001806124516025913960400191505060405180910390fd5b611032816111d7565b61106d5760405162461bcd60e51b81526004018080602001828103825260318152602001806123d56031913960400191505060405180910390fd5b606880546001600160a01b0383166001600160a01b0319909116811790915560408051918252517ff1ced7f5ac117635a33b1d3d5a87abaf646fb70da4f180ae4b78d90700cab4689181900360200190a150565b6110c96111d3565b6001600160a01b03166110da6108dd565b6001600160a01b031614611123576040805162461bcd60e51b81526020600482018190526024820152600080516020612363833981519152604482015290519081900360640190fd5b6001600160a01b0381166111685760405162461bcd60e51b81526004018080602001828103825260268152602001806121dd6026913960400191505060405180910390fd5b6033546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3603380546001600160a01b0319166001600160a01b0392909216919091179055565b6068546001600160a01b031681565b3390565b3b151590565b6001600160a01b0382166112225760405162461bcd60e51b815260040180806020018281038252602d815260200180612295602d913960400191505060405180910390fd5b6001600160a01b0381166112675760405162461bcd60e51b815260040180806020018281038252602d8152602001806121b0602d913960400191505060405180910390fd5b806001600160a01b0316826001600160a01b031614156112b85760405162461bcd60e51b81526004018080602001828103825260368152602001806122356036913960400191505060405180910390fd5b6068546000906001600160a01b03848116911614806112e457506067546001600160a01b038481169116145b6068549091506000906001600160a01b038481169116148061131357506067546001600160a01b038481169116145b9050818061131e5750805b6113595760405162461bcd60e51b81526004018080602001828103825260228152602001806123206022913960400191505060405180910390fd5b6065546040805163e6a4390560e01b81526001600160a01b03878116600483015286811660248301529151600093929092169163e6a4390591604480820192602092909190829003018186803b1580156113b257600080fd5b505afa1580156113c6573d6000803e3d6000fd5b505050506040513d60208110156113dc57600080fd5b505190506001600160a01b038116611436576040805162461bcd60e51b8152602060048201526018602482015277293ab13ca6b0b5b2b91d1024b73b30b634b2103830b4b91760411b604482015290519081900360640190fd5b6114c481826001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561148757600080fd5b505afa15801561149b573d6000803e3d6000fd5b505050506040513d60208110156114b157600080fd5b50516001600160a01b0384169190611808565b600080826001600160a01b03166389afcb44306040518263ffffffff1660e01b815260040180826001600160a01b031681526020019150506040805180830381600087803b15801561151557600080fd5b505af1158015611529573d6000803e3d6000fd5b505050506040513d604081101561153f57600080fd5b50805160209182015160408051630dfe168160e01b815290519295509093506001600160a01b03861692630dfe168192600480840193829003018186803b15801561158957600080fd5b505afa15801561159d573d6000803e3d6000fd5b505050506040513d60208110156115b357600080fd5b50516001600160a01b038881169116146115c957905b60006115d788888585611972565b905060006115fb60646115f560695485611a7c90919063ffffffff16565b90611ade565b9050808203811561166c5760675460408051630852cd8d60e31b81526004810185905290516001600160a01b03909216916342966c689160248082019260009290919082900301818387803b15801561165357600080fd5b505af1158015611667573d6000803e3d6000fd5b505050505b80156116df576066546040805163246132f960e01b8152600160048201526024810184905290516001600160a01b039092169163246132f99160448082019260009290919082900301818387803b1580156116c657600080fd5b505af11580156116da573d6000803e3d6000fd5b505050505b60408051868152602081018690528082018390526060810184905290516001600160a01b03808c1692908d169133917f1d70b0ff9f689b827aeb5bee551ae4004c61b5877163c7a19656dbbdef836e9c919081900360800190a450505050505050505050565b6000611750306111d7565b15905090565b600054610100900460ff168061176f575061176f611745565b8061177d575060005460ff16155b6117b85760405162461bcd60e51b815260040180806020018281038252602e8152602001806122c2602e913960400191505060405180910390fd5b600054610100900460ff161580156117e3576000805460ff1961ff0019909116610100171660011790555b6117eb611b45565b6117f3611be5565b8015611805576000805461ff00191690555b50565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b031663a9059cbb60e01b178152925182516000946060949389169392918291908083835b602083106118855780518252601f199092019160209182019101611866565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d80600081146118e7576040519150601f19603f3d011682016040523d82523d6000602084013e6118ec565b606091505b509150915081801561191a57508051158061191a575080806020019051602081101561191757600080fd5b50515b61196b576040805162461bcd60e51b815260206004820152601a60248201527f5361666545524332303a205472616e73666572206661696c6564000000000000604482015290519081900360640190fd5b5050505050565b6067546000906001600160a01b03868116911614156119a65761199f836119998685611cde565b90611d01565b9050611a74565b6067546001600160a01b03858116911614156119ca5761199f826119998786611cde565b6068546001600160a01b0386811691161415611a2c576068546000906119fc9086906001600160a01b03168530611d5b565b90506000611a0a8286611d01565b606854909150611a23906001600160a01b031682611cde565b92505050611a74565b606854600090611a489087906001600160a01b03168630611d5b565b90506000611a568285611d01565b606854909150611a6f906001600160a01b031682611cde565b925050505b949350505050565b600082611a8b57506000611ad8565b82820282848281611a9857fe5b0414611ad55760405162461bcd60e51b81526004018080602001828103825260218152602001806123426021913960400191505060405180910390fd5b90505b92915050565b6000808211611b34576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b818381611b3d57fe5b049392505050565b600054610100900460ff1680611b5e5750611b5e611745565b80611b6c575060005460ff16155b611ba75760405162461bcd60e51b815260040180806020018281038252602e8152602001806122c2602e913960400191505060405180910390fd5b600054610100900460ff161580156117f3576000805460ff1961ff0019909116610100171660011790558015611805576000805461ff001916905550565b600054610100900460ff1680611bfe5750611bfe611745565b80611c0c575060005460ff16155b611c475760405162461bcd60e51b815260040180806020018281038252602e8152602001806122c2602e913960400191505060405180910390fd5b600054610100900460ff16158015611c72576000805460ff1961ff0019909116610100171660011790555b6000611c7c6111d3565b603380546001600160a01b0319166001600160a01b038316908117909155604051919250906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3508015611805576000805461ff001916905550565b606754600090611cfa9084906001600160a01b03168430611d5b565b9392505050565b600082820183811015611ad5576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b6065546040805163e6a4390560e01b81526001600160a01b038781166004830152868116602483015291516000938493169163e6a43905916044808301926020929190829003018186803b158015611db257600080fd5b505afa158015611dc6573d6000803e3d6000fd5b505050506040513d6020811015611ddc57600080fd5b505190506001600160a01b038116611e36576040805162461bcd60e51b8152602060048201526018602482015277293ab13ca6b0b5b2b91d1024b73b30b634b2103830b4b91760411b604482015290519081900360640190fd5b600080826001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b158015611e7257600080fd5b505afa158015611e86573d6000803e3d6000fd5b505050506040513d6060811015611e9c57600080fd5b5080516020909101516dffffffffffffffffffffffffffff91821693501690506000611eca876103e5611a7c565b9050836001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b158015611f0557600080fd5b505afa158015611f19573d6000803e3d6000fd5b505050506040513d6020811015611f2f57600080fd5b50516001600160a01b038a81169116141561207557611f5481611999856103e8611a7c565b611f5e8284611a7c565b81611f6557fe5b049450611f7c6001600160a01b038a168589611808565b60408051600080825260208201928390526316d6989160e31b835260248201818152604483018990526001600160a01b038a811660648501526103e56084850181905260a060a48601908152855160c48701819052928b169663b6b4c488968d958f9591939092909160e4850191908083838c5b83811015612008578181015183820152602001611ff0565b50505050905090810190601f1680156120355780820380516001836020036101000a031916815260200191505b509650505050505050600060405180830381600087803b15801561205857600080fd5b505af115801561206c573d6000803e3d6000fd5b505050506121a3565b61208581611999846103e8611a7c565b61208f8285611a7c565b8161209657fe5b0494506120ad6001600160a01b038a168589611808565b60408051600080825260208201928390526316d6989160e31b835260248201888152604483018290526001600160a01b038a811660648501526103e56084850181905260a060a48601908152855160c48701819052928b169663b6b4c488968d96958f9591939092909160e4850191908083838b5b8381101561213a578181015183820152602001612122565b50505050905090810190601f1680156121675780820380516001836020036101000a031916815260200191505b509650505050505050600060405180830381600087803b15801561218a57600080fd5b505af115801561219e573d6000803e3d6000fd5b505050505b5050505094935050505056fe527562794d616b65723a20746f6b656e312063616e6e6f7420626520746865207a65726f20616464726573732e4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373527562794d616b65723a206e657752756279546f6b656e206973206e6f74206120636f6e747261637420616464726573732e527562794d616b65723a20746f6b656e3020616e6420746f6b656e312063616e6e6f74206265207468652073616d6520746f6b656e2e527562794d616b65723a2070616972206973206e6f74206120636f6e747261637420616464726573732e527562794d616b65723a20746f6b656e302063616e6e6f7420626520746865207a65726f20616464726573732e496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a6564527562794d616b65723a206e6577466163746f7279206973206e6f74206120636f6e747261637420616464726573732e527562794d616b65723a20436f6e76657273696f6e20756e737570706f727465642e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f774f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572527562794d616b65723a20496e76616c69642072756279546f6b656e20746f6b656e20616464726573732e527562794d616b65723a20496e76616c696420414d4d20666163746f727920616464726573732e527562794d616b65723a206e6577557364546f6b656e206973206e6f74206120636f6e747261637420616464726573732e527562794d616b65723a20496e76616c696420727562795374616b657220616464726573732e527562794d616b65723a20496e76616c69642072756279546f6b656e20616464726573732e527562794d616b65723a20496e76616c69642055534420746f6b656e20616464726573732e527562794d616b65723a206e6577527562795374616b6572206973206e6f74206120636f6e747261637420616464726573732ea26469706673582212204c1d8c989cca369689576c737265f6e0442748cc271ca172b43e54b86ec5e43d64736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 705,
        "contract": "contracts/RubyMaker.sol:RubyMaker",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 708,
        "contract": "contracts/RubyMaker.sol:RubyMaker",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 2910,
        "contract": "contracts/RubyMaker.sol:RubyMaker",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 136,
        "contract": "contracts/RubyMaker.sol:RubyMaker",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 255,
        "contract": "contracts/RubyMaker.sol:RubyMaker",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 9415,
        "contract": "contracts/RubyMaker.sol:RubyMaker",
        "label": "factory",
        "offset": 0,
        "slot": "101",
        "type": "t_contract(IUniswapV2Factory)17602"
      },
      {
        "astId": 9417,
        "contract": "contracts/RubyMaker.sol:RubyMaker",
        "label": "rubyStaker",
        "offset": 0,
        "slot": "102",
        "type": "t_contract(IRubyStaker)19965"
      },
      {
        "astId": 9419,
        "contract": "contracts/RubyMaker.sol:RubyMaker",
        "label": "rubyToken",
        "offset": 0,
        "slot": "103",
        "type": "t_address"
      },
      {
        "astId": 9421,
        "contract": "contracts/RubyMaker.sol:RubyMaker",
        "label": "usdToken",
        "offset": 0,
        "slot": "104",
        "type": "t_address"
      },
      {
        "astId": 9423,
        "contract": "contracts/RubyMaker.sol:RubyMaker",
        "label": "burnPercent",
        "offset": 0,
        "slot": "105",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IRubyStaker)19965": {
        "encoding": "inplace",
        "label": "contract IRubyStaker",
        "numberOfBytes": "20"
      },
      "t_contract(IUniswapV2Factory)17602": {
        "encoding": "inplace",
        "label": "contract IUniswapV2Factory",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}