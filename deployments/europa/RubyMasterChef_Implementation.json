{
  "address": "0x7777De3672eD0A3d87422426d92eC97b958BFa2c",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "allocPoint",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "contract IERC20",
          "name": "lpToken",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "contract IRubyMasterChefRewarder",
          "name": "rewarder",
          "type": "address"
        }
      ],
      "name": "AddPool",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "EmergencyWithdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Harvest",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "MultiHarvest",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "RubyTokenEmergencyWithdrawal",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "allocPoint",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "contract IRubyMasterChefRewarder",
          "name": "rewarder",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "overwrite",
          "type": "bool"
        }
      ],
      "name": "SetPool",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "newRubyStaker",
          "type": "address"
        }
      ],
      "name": "SetRubyStaker",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newAddress",
          "type": "address"
        }
      ],
      "name": "SetTreasuryAddress",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newPercent",
          "type": "uint256"
        }
      ],
      "name": "SetTreasuryPercent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_rubyPerSec",
          "type": "uint256"
        }
      ],
      "name": "UpdateEmissionRate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lastRewardTimestamp",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lpSupply",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "accRubyPerShare",
          "type": "uint256"
        }
      ],
      "name": "UpdatePool",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "RUBY",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_allocPoint",
          "type": "uint256"
        },
        {
          "internalType": "contract IERC20",
          "name": "_lpToken",
          "type": "address"
        },
        {
          "internalType": "contract IRubyMasterChefRewarder",
          "name": "_rewarder",
          "type": "address"
        }
      ],
      "name": "add",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_pids",
          "type": "uint256[]"
        }
      ],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        }
      ],
      "name": "emergencyWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "emergencyWithdrawRubyTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_ruby",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_rubyStaker",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_treasuryAddr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_rubyPerSec",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_startTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_treasuryPercent",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "massUpdatePools",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "pendingTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "pendingRuby",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "bonusTokenAddress",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "bonusTokenSymbol",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "pendingBonusToken",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "poolInfo",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "lpToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "allocPoint",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastRewardTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "accRubyPerShare",
          "type": "uint256"
        },
        {
          "internalType": "contract IRubyMasterChefRewarder",
          "name": "rewarder",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        }
      ],
      "name": "rewarderBonusTokenInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "bonusTokenAddress",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "bonusTokenSymbol",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rubyPerSec",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rubyStaker",
      "outputs": [
        {
          "internalType": "contract IRubyStaker",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_allocPoint",
          "type": "uint256"
        },
        {
          "internalType": "contract IRubyMasterChefRewarder",
          "name": "_rewarder",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "overwrite",
          "type": "bool"
        }
      ],
      "name": "set",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newRubyStaker",
          "type": "address"
        }
      ],
      "name": "setRubyStaker",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_treasuryAddr",
          "type": "address"
        }
      ],
      "name": "setTreasuryAddr",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newTreasuryPercent",
          "type": "uint256"
        }
      ],
      "name": "setTreasuryPercent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalAllocPoint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasuryAddr",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasuryPercent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_rubyPerSec",
          "type": "uint256"
        }
      ],
      "name": "updateEmissionRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        }
      ],
      "name": "updatePool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rewardDebt",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xc101de5374973a6aa8b18572f2997de627b54b9e43137ce7f94bd577a1daaf78",
  "receipt": {
    "to": "0x0000000000000000000000000000000000000000",
    "from": "0x0fe812C977646525E824D5dCC3f37A0Cf153B13b",
    "contractAddress": "0x7777De3672eD0A3d87422426d92eC97b958BFa2c",
    "transactionIndex": 0,
    "gasUsed": "2725181",
    "logsBloom": "0x
    "blockHash": "0x0409f6bbc521528c8d66514a4fe1f8d2e04d1202f44d04052e0cfbc6f8925a25",
    "transactionHash": "0xc101de5374973a6aa8b18572f2997de627b54b9e43137ce7f94bd577a1daaf78",
    "logs": [],
    "blockNumber": 186726,
    "cumulativeGasUsed": "2725181",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "8ca980d51c658bcb6e0b1d5c9f9ee0b7",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"lpToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IRubyMasterChefRewarder\",\"name\":\"rewarder\",\"type\":\"address\"}],\"name\":\"AddPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Harvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"MultiHarvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RubyTokenEmergencyWithdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"contract IRubyMasterChefRewarder\",\"name\":\"rewarder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"overwrite\",\"type\":\"bool\"}],\"name\":\"SetPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newRubyStaker\",\"type\":\"address\"}],\"name\":\"SetRubyStaker\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"SetTreasuryAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPercent\",\"type\":\"uint256\"}],\"name\":\"SetTreasuryPercent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_rubyPerSec\",\"type\":\"uint256\"}],\"name\":\"UpdateEmissionRate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lastRewardTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"accRubyPerShare\",\"type\":\"uint256\"}],\"name\":\"UpdatePool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"RUBY\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"internalType\":\"contract IRubyMasterChefRewarder\",\"name\":\"_rewarder\",\"type\":\"address\"}],\"name\":\"add\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_pids\",\"type\":\"uint256[]\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdrawRubyTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_ruby\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rubyStaker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_treasuryAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_rubyPerSec\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_treasuryPercent\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"massUpdatePools\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"pendingRuby\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"bonusTokenAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"bonusTokenSymbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"pendingBonusToken\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accRubyPerShare\",\"type\":\"uint256\"},{\"internalType\":\"contract IRubyMasterChefRewarder\",\"name\":\"rewarder\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"rewarderBonusTokenInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"bonusTokenAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"bonusTokenSymbol\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rubyPerSec\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rubyStaker\",\"outputs\":[{\"internalType\":\"contract IRubyStaker\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"contract IRubyMasterChefRewarder\",\"name\":\"_rewarder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"overwrite\",\"type\":\"bool\"}],\"name\":\"set\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newRubyStaker\",\"type\":\"address\"}],\"name\":\"setRubyStaker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasuryAddr\",\"type\":\"address\"}],\"name\":\"setTreasuryAddr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newTreasuryPercent\",\"type\":\"uint256\"}],\"name\":\"setTreasuryPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAllocPoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rubyPerSec\",\"type\":\"uint256\"}],\"name\":\"updateEmissionRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"updatePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"emergencyWithdrawRubyTokens(address,uint256)\":{\"notice\":\"Owner should be able to withdraw all the Reward tokens in case of emergency. The owner should be able to withdraw the tokens to himself or another address The RubyMasterChef contract will be placed behind a timelock, and the owner/deployer will be a multisig, so this should not raise trust concerns. This function is needed because the RubyMasterChef will be pre-fed with all of the reward tokens (RUBY) tokens dedicated for liquidity mining incentives, and in case of unfortunate situation they should be retreived.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/RubyMasterChef.sol\":\"RubyMasterChef\"},\"evmVersion\":\"istanbul\",\"libraries\":{\"__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/Initializable.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xb419e68addcb82ecda3ad3974b0d2db76435ce9b08435a04d5b119a0c5d45ea5\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity >=0.4.24 <0.8.0;\\n\\nimport \\\"../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || _isConstructor() || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /// @dev Returns true if and only if the function is running in the constructor\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0xd8e4eb08dcc1d1860fb347ba5ffd595242b9a1b66d49a47f2b4cb51c3f35017e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xfc5ea91fa9ceb1961023b2a6c978b902888c52b90847ac7813fe3b79524165f6\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\nimport \\\"../proxy/Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xbbf8a21b9a66c48d45ff771b8563c6df19ba451d63dfb8380a865c1e1f29d1a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\nimport \\\"../proxy/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal initializer {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal initializer {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x46034cd5cca740f636345c8f7aebae0f78adfd4b70e31e6f888cccbe1086586e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/EnumerableSet.sol\\\";\\nimport \\\"../utils/Address.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using Address for address;\\n\\n    struct RoleData {\\n        EnumerableSet.AddressSet members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping (bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view returns (bool) {\\n        return _roles[role].members.contains(account);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view returns (uint256) {\\n        return _roles[role].members.length();\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view returns (address) {\\n        return _roles[role].members.at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual {\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to grant\\\");\\n\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual {\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to revoke\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        emit RoleAdminChanged(role, _roles[role].adminRole, adminRole);\\n        _roles[role].adminRole = adminRole;\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (_roles[role].members.add(account)) {\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (_roles[role].members.remove(account)) {\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x4fc155a2f7837603d69a13cfa481eb5e7f5e02cb77e2ec9edbac30986db37988\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) public {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal virtual {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\",\"keccak256\":\"0xca0c2396dbeb3503b51abf4248ebf77a1461edad513c01529df51850a012bee3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20Capped.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./ERC20.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that adds a cap to the supply of tokens.\\n */\\nabstract contract ERC20Capped is ERC20 {\\n    using SafeMath for uint256;\\n\\n    uint256 private _cap;\\n\\n    /**\\n     * @dev Sets the value of the `cap`. This value is immutable, it can only be\\n     * set once during construction.\\n     */\\n    constructor (uint256 cap_) internal {\\n        require(cap_ > 0, \\\"ERC20Capped: cap is 0\\\");\\n        _cap = cap_;\\n    }\\n\\n    /**\\n     * @dev Returns the cap on the token's total supply.\\n     */\\n    function cap() public view virtual returns (uint256) {\\n        return _cap;\\n    }\\n\\n    /**\\n     * @dev See {ERC20-_beforeTokenTransfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - minted tokens must not cause the total supply to go over the cap.\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual override {\\n        super._beforeTokenTransfer(from, to, amount);\\n\\n        if (from == address(0)) { // When minting tokens\\n            require(totalSupply().add(amount) <= cap(), \\\"ERC20Capped: cap exceeded\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x94e4d02b80450cf26bec54be6c0cf52fe4e8ce91dfc6e97794dce19ded2a3fa4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf12dfbe97e6276980b83d2830bb0eb75e0cf4f3e626c2471137f82158ae6a0fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\",\"keccak256\":\"0x1562cd9922fbf739edfb979f506809e2743789cbde3177515542161c3d04b164\",\"license\":\"MIT\"},\"contracts/RubyMasterChef.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/EnumerableSet.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"./interfaces/IRubyMasterChefRewarder.sol\\\";\\nimport \\\"./interfaces/IRubyMasterChef.sol\\\";\\nimport \\\"./interfaces/IRubyStaker.sol\\\";\\nimport \\\"./token_mappings/RubyToken.sol\\\";\\nimport \\\"./libraries/BoringERC20.sol\\\";\\n\\n// MasterChef copied from https://github.com/traderjoe-xyz/joe-core/blob/main/contracts/MasterChefJoeV2.sol\\n// Combines single and double rewards\\ncontract RubyMasterChef is OwnableUpgradeable, ReentrancyGuardUpgradeable {\\n    using SafeMath for uint256;\\n    using BoringERC20 for IERC20;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    // Info of each user.\\n    struct UserInfo {\\n        uint256 amount; // How many LP tokens the user has provided.\\n        uint256 rewardDebt; // Reward debt. See explanation below.\\n        //\\n        // We do some fancy math here. , any point in time, the amount of RUBYs\\n        // entitled to a user but is pending to be distributed is:\\n        //\\n        //   pending reward = (user.amount * pool.accRubyPerShare) - user.rewardDebt\\n        //\\n        // Whenever a user deposits or withdraws LP tokens to a pool. Here's what happens:\\n        //   1. The pool's `accRubyPerShare` (and `lastRewardTimestamp`) gets updated.\\n        //   2. User receives the pending reward sent to his/her address.\\n        //   3. User's `amount` gets updated.\\n        //   4. User's `rewardDebt` gets updated.\\n    }\\n\\n    // Info of each pool.\\n    struct PoolInfo {\\n        IERC20 lpToken; // Address of LP token contract.\\n        uint256 allocPoint; // How many allocation points assigned to this pool. RUBYs to distribute per second.\\n        uint256 lastRewardTimestamp; // Last timestamp that RUBYs distribution occurs.\\n        uint256 accRubyPerShare; // Accumulated RUBYs per share, times 1e12. See below.\\n        IRubyMasterChefRewarder rewarder;\\n    }\\n\\n    // The RUBY TOKEN!\\n    IERC20 public RUBY;\\n\\n    IRubyStaker public rubyStaker;\\n\\n    // Treasury address.\\n    address public treasuryAddr;\\n    // RUBY tokens created per second.\\n    uint256 public rubyPerSec;\\n    // Percentage of pool rewards that goes to the treasury.\\n    uint256 public treasuryPercent;\\n\\n    // Info of each pool.\\n    PoolInfo[] public poolInfo;\\n    // Set of all LP tokens that have been added as pools\\n    EnumerableSet.AddressSet private lpTokens;\\n    // Info of each user that stakes LP tokens.\\n    mapping(uint256 => mapping(address => UserInfo)) public userInfo;\\n    // Total allocation points. Must be the sum of all allocation points in all pools.\\n    uint256 public totalAllocPoint;\\n    uint256 private constant ACC_TOKEN_PRECISION = 1e12;\\n\\n    // The timestamp when RUBY mining starts.\\n    uint256 public startTimestamp;\\n\\n    event AddPool(\\n        uint256 indexed pid,\\n        uint256 allocPoint,\\n        IERC20 indexed lpToken,\\n        IRubyMasterChefRewarder indexed rewarder\\n    );\\n    event SetPool(uint256 indexed pid, uint256 allocPoint, IRubyMasterChefRewarder indexed rewarder, bool overwrite);\\n    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\\n    event UpdatePool(uint256 indexed pid, uint256 lastRewardTimestamp, uint256 lpSupply, uint256 accRubyPerShare);\\n    event Harvest(address indexed user, uint256 indexed pid, uint256 amount);\\n    event MultiHarvest(address indexed user, uint256 amount);\\n    event EmergencyWithdraw(address indexed user, uint256 indexed pid, uint256 amount);\\n    event SetTreasuryAddress(address indexed oldAddress, address indexed newAddress);\\n    event SetTreasuryPercent(uint256 newPercent);\\n    event SetRubyStaker(address indexed newRubyStaker);\\n    event UpdateEmissionRate(address indexed user, uint256 _rubyPerSec);\\n    event RubyTokenEmergencyWithdrawal(address indexed to, uint256 amount);\\n\\n    function initialize(\\n        address _owner,\\n        address _ruby,\\n        address _rubyStaker,\\n        address _treasuryAddr,\\n        uint256 _rubyPerSec,\\n        uint256 _startTimestamp,\\n        uint256 _treasuryPercent\\n    ) public initializer {\\n        require(_ruby != address(0), \\\"RubyMasterChef: Invalid RubyToken address.\\\");\\n        require(_rubyStaker != address(0), \\\"RubyMasterChef: Invalid RubyStaker address.\\\");\\n        require(_treasuryAddr != address(0), \\\"RubyMasterChef: Invalid treasury address.\\\");\\n        require(_rubyPerSec != 0, \\\"RubyMasterChef: Invalid emission rate amount.\\\");\\n        require(0 <= _treasuryPercent && _treasuryPercent <= 1000, \\\"RubyMasterChef: invalid treasury percent value.\\\");\\n\\n        OwnableUpgradeable.__Ownable_init();\\n        ReentrancyGuardUpgradeable.__ReentrancyGuard_init();\\n\\n        transferOwnership(_owner);\\n\\n        RUBY = IERC20(_ruby);\\n        rubyStaker = IRubyStaker(_rubyStaker);\\n        treasuryAddr = _treasuryAddr;\\n        rubyPerSec = _rubyPerSec;\\n        startTimestamp = _startTimestamp;\\n        treasuryPercent = _treasuryPercent;\\n        totalAllocPoint = 0;\\n    }\\n\\n    function poolLength() external view returns (uint256) {\\n        return poolInfo.length;\\n    }\\n\\n    // Add a new lp to the pool. Can only be called by the owner.\\n    // XXX DO NOT add the same LP token more than once. Rewards will be messed up if you do.\\n    function add(\\n        uint256 _allocPoint,\\n        IERC20 _lpToken,\\n        IRubyMasterChefRewarder _rewarder\\n    ) public onlyOwner {\\n        require(isContract(address(_lpToken)), \\\"add: LP token must be a valid contract\\\");\\n        require(\\n            isContract(address(_rewarder)) || address(_rewarder) == address(0),\\n            \\\"add: rewarder must be contract or zero\\\"\\n        );\\n        require(!lpTokens.contains(address(_lpToken)), \\\"add: LP already added\\\");\\n        massUpdatePools();\\n        uint256 lastRewardTimestamp = block.timestamp > startTimestamp ? block.timestamp : startTimestamp;\\n        totalAllocPoint = totalAllocPoint.add(_allocPoint);\\n        poolInfo.push(\\n            PoolInfo({\\n                lpToken: _lpToken,\\n                allocPoint: _allocPoint,\\n                lastRewardTimestamp: lastRewardTimestamp,\\n                accRubyPerShare: 0,\\n                rewarder: _rewarder\\n            })\\n        );\\n        lpTokens.add(address(_lpToken));\\n        emit AddPool(poolInfo.length.sub(1), _allocPoint, _lpToken, _rewarder);\\n    }\\n\\n    // Update the given pool's RUBY allocation point. Can only be called by the owner.\\n    function set(\\n        uint256 _pid,\\n        uint256 _allocPoint,\\n        IRubyMasterChefRewarder _rewarder,\\n        bool overwrite\\n    ) public onlyOwner {\\n        require(\\n            isContract(address(_rewarder)) || address(_rewarder) == address(0),\\n            \\\"set: rewarder must be contract or zero\\\"\\n        );\\n        massUpdatePools();\\n        totalAllocPoint = totalAllocPoint.sub(poolInfo[_pid].allocPoint).add(_allocPoint);\\n        poolInfo[_pid].allocPoint = _allocPoint;\\n        if (overwrite) {\\n            poolInfo[_pid].rewarder = _rewarder;\\n        }\\n        emit SetPool(_pid, _allocPoint, overwrite ? _rewarder : poolInfo[_pid].rewarder, overwrite);\\n    }\\n\\n    // View function to see pending RUBYs on frontend.\\n    function pendingTokens(uint256 _pid, address _user)\\n        external\\n        view\\n        returns (\\n            uint256 pendingRuby,\\n            address bonusTokenAddress,\\n            string memory bonusTokenSymbol,\\n            uint256 pendingBonusToken\\n        )\\n    {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][_user];\\n        uint256 accRubyPerShare = pool.accRubyPerShare;\\n        uint256 lpSupply = pool.lpToken.balanceOf(address(this));\\n        if (block.timestamp > pool.lastRewardTimestamp && lpSupply != 0) {\\n            uint256 multiplier = block.timestamp.sub(pool.lastRewardTimestamp);\\n            uint256 lpPercent = 1000 - treasuryPercent;\\n            uint256 rubyReward = multiplier\\n                .mul(rubyPerSec)\\n                .mul(pool.allocPoint)\\n                .div(totalAllocPoint)\\n                .mul(lpPercent)\\n                .div(1000);\\n            accRubyPerShare = accRubyPerShare.add(rubyReward.mul(ACC_TOKEN_PRECISION).div(lpSupply));\\n        }\\n        pendingRuby = user.amount.mul(accRubyPerShare).div(ACC_TOKEN_PRECISION).sub(user.rewardDebt);\\n\\n        // If it's a double reward farm, we return info about the bonus token\\n        if (address(pool.rewarder) != address(0)) {\\n            (bonusTokenAddress, bonusTokenSymbol) = rewarderBonusTokenInfo(_pid);\\n            pendingBonusToken = pool.rewarder.pendingTokens(_user);\\n        }\\n    }\\n\\n    // Get bonus token info from the rewarder contract for a given pool, if it is a double reward farm\\n    function rewarderBonusTokenInfo(uint256 _pid)\\n        public\\n        view\\n        returns (address bonusTokenAddress, string memory bonusTokenSymbol)\\n    {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        if (address(pool.rewarder) != address(0)) {\\n            bonusTokenAddress = address(pool.rewarder.rewardToken());\\n            bonusTokenSymbol = IERC20(pool.rewarder.rewardToken()).safeSymbol();\\n        }\\n    }\\n\\n    // Update reward variables for all pools. Be careful of gas spending!\\n    function massUpdatePools() public {\\n        uint256 length = poolInfo.length;\\n        for (uint256 pid = 0; pid < length; ++pid) {\\n            updatePool(pid);\\n        }\\n    }\\n\\n    // Update reward variables of the given pool to be up-to-date.\\n    function updatePool(uint256 _pid) public {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        if (block.timestamp <= pool.lastRewardTimestamp) {\\n            return;\\n        }\\n        uint256 lpSupply = pool.lpToken.balanceOf(address(this));\\n        if (lpSupply == 0) {\\n            pool.lastRewardTimestamp = block.timestamp;\\n            return;\\n        }\\n        uint256 multiplier = block.timestamp.sub(pool.lastRewardTimestamp);\\n        uint256 rewardAmount = multiplier.mul(rubyPerSec).mul(pool.allocPoint).div(totalAllocPoint);\\n        uint256 lpPercent = 1000 - treasuryPercent;\\n\\n        RUBY.safeTransfer(treasuryAddr, rewardAmount.mul(treasuryPercent).div(1000));\\n\\n        pool.accRubyPerShare = pool.accRubyPerShare.add(\\n            rewardAmount.mul(ACC_TOKEN_PRECISION).div(lpSupply).mul(lpPercent).div(1000)\\n        );\\n        pool.lastRewardTimestamp = block.timestamp;\\n        emit UpdatePool(_pid, pool.lastRewardTimestamp, lpSupply, pool.accRubyPerShare);\\n    }\\n\\n    // Deposit LP tokens to MasterChef for RUBY allocation.\\n    function deposit(uint256 _pid, uint256 _amount) external nonReentrant {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n        updatePool(_pid);\\n        if (user.amount > 0) {\\n            // Harvest accRubyPerShare\\n            uint256 pending = user.amount.mul(pool.accRubyPerShare).div(ACC_TOKEN_PRECISION).sub(user.rewardDebt);\\n            _mintRubyRewards(msg.sender, pending);\\n            emit Harvest(msg.sender, _pid, pending);\\n        }\\n        user.amount = user.amount.add(_amount);\\n        user.rewardDebt = user.amount.mul(pool.accRubyPerShare).div(ACC_TOKEN_PRECISION);\\n\\n        IRubyMasterChefRewarder rewarder = poolInfo[_pid].rewarder;\\n        if (address(rewarder) != address(0)) {\\n            rewarder.onRubyReward(msg.sender, user.amount);\\n        }\\n\\n        pool.lpToken.safeTransferFrom(address(msg.sender), address(this), _amount);\\n        emit Deposit(msg.sender, _pid, _amount);\\n    }\\n\\n    // Withdraw LP tokens from MasterChef.\\n    function withdraw(uint256 _pid, uint256 _amount) external nonReentrant {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n        require(user.amount >= _amount, \\\"withdraw: not good\\\");\\n\\n        updatePool(_pid);\\n\\n        // Harvest RUBY\\n        uint256 pending = user.amount.mul(pool.accRubyPerShare).div(ACC_TOKEN_PRECISION).sub(user.rewardDebt);\\n        if (pending > 0) {\\n            _mintRubyRewards(msg.sender, pending);\\n            emit Harvest(msg.sender, _pid, pending);\\n        }\\n        user.amount = user.amount.sub(_amount);\\n        user.rewardDebt = user.amount.mul(pool.accRubyPerShare).div(ACC_TOKEN_PRECISION);\\n\\n        IRubyMasterChefRewarder rewarder = poolInfo[_pid].rewarder;\\n        if (address(rewarder) != address(0)) {\\n            rewarder.onRubyReward(msg.sender, user.amount);\\n        }\\n\\n        pool.lpToken.safeTransfer(address(msg.sender), _amount);\\n        emit Withdraw(msg.sender, _pid, _amount);\\n    }\\n\\n    function claim(uint256[] calldata _pids) external {\\n        massUpdatePools();\\n        uint256 pending;\\n        for (uint256 i = 0; i < _pids.length; i++) {\\n            PoolInfo storage pool = poolInfo[_pids[i]];\\n            UserInfo storage user = userInfo[_pids[i]][msg.sender];\\n            pending = pending.add(user.amount.mul(pool.accRubyPerShare).div(ACC_TOKEN_PRECISION).sub(user.rewardDebt));\\n            user.rewardDebt = user.amount.mul(pool.accRubyPerShare).div(ACC_TOKEN_PRECISION);\\n        }\\n        if (pending > 0) {\\n            _mintRubyRewards(msg.sender, pending);\\n        }\\n        emit MultiHarvest(msg.sender, pending);\\n    }\\n\\n    // Mint ruby rewards and transfers toekns to rubyStaker\\n    function _mintRubyRewards(address _account, uint256 _amount) internal {\\n        rubyStaker.mint(_account, _amount);\\n        RUBY.safeTransfer(address(rubyStaker), _amount);\\n    }\\n\\n    // Withdraw without caring about rewards. EMERGENCY ONLY.\\n    function emergencyWithdraw(uint256 _pid) external nonReentrant {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n        pool.lpToken.safeTransfer(address(msg.sender), user.amount);\\n        emit EmergencyWithdraw(msg.sender, _pid, user.amount);\\n        user.amount = 0;\\n        user.rewardDebt = 0;\\n    }\\n\\n    // Update treasury address by the previous treasury.\\n    function setTreasuryAddr(address _treasuryAddr) public {\\n        require(msg.sender == treasuryAddr, \\\"setTreasuryAddr: not enough permissions to execute this action\\\");\\n        treasuryAddr = _treasuryAddr;\\n        emit SetTreasuryAddress(msg.sender, _treasuryAddr);\\n    }\\n\\n    function setTreasuryPercent(uint256 _newTreasuryPercent) public onlyOwner {\\n        require(0 <= _newTreasuryPercent && _newTreasuryPercent <= 1000, \\\"setTreasuryPercent: invalid percent value\\\");\\n        treasuryPercent = _newTreasuryPercent;\\n        emit SetTreasuryPercent(_newTreasuryPercent);\\n    }\\n\\n    function setRubyStaker(address _newRubyStaker) public onlyOwner {\\n        require(_newRubyStaker != address(0), \\\"setRubyStaker: invalid ruby minter address\\\");\\n        rubyStaker = IRubyStaker(_newRubyStaker);\\n        emit SetRubyStaker(_newRubyStaker);\\n    }\\n\\n    function updateEmissionRate(uint256 _rubyPerSec) public onlyOwner {\\n        massUpdatePools();\\n        rubyPerSec = _rubyPerSec;\\n        emit UpdateEmissionRate(msg.sender, _rubyPerSec);\\n    }\\n\\n    /**\\n     * @notice Owner should be able to withdraw all the Reward tokens in case of emergency.\\n     * The owner should be able to withdraw the tokens to himself or another address\\n     * The RubyMasterChef contract will be placed behind a timelock, and the owner/deployer will be a multisig,\\n     * so this should not raise trust concerns.\\n     * This function is needed because the RubyMasterChef will be pre-fed with all of the\\n     * reward tokens (RUBY) tokens dedicated for liquidity mining incentives, and in case\\n     * of unfortunate situation they should be retreived.\\n     */\\n    function emergencyWithdrawRubyTokens(address _receiver, uint256 _amount) external onlyOwner {\\n        require(_receiver != address(0), \\\"RubyMasterChef: Invalid withdrawal address.\\\");\\n        require(_amount != 0, \\\"RubyMasterChef: Invalid withdrawal amount.\\\");\\n        require(RUBY.balanceOf(address(this)) >= _amount, \\\"RubyMasterChef: Not enough balance to withdraw.\\\");\\n        RUBY.safeTransfer(_receiver, _amount);\\n        emit RubyTokenEmergencyWithdrawal(_receiver, _amount);\\n    }\\n\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n}\\n\",\"keccak256\":\"0xcfb8b23286d6a2b68c6a659ae11475d8469039fb9ff58ea5cd903e902d5b1a55\",\"license\":\"MIT\"},\"contracts/interfaces/IRubyMasterChef.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IRubyMasterChef {\\n    struct UserInfo {\\n        uint256 amount; // How many LP tokens the user has provided.\\n        uint256 rewardDebt; // Reward debt. See explanation below.\\n    }\\n\\n    struct PoolInfo {\\n        IERC20 lpToken; // Address of LP token contract.\\n        uint256 allocPoint; // How many allocation points assigned to this poolInfo. RUBY to distribute per block.\\n        uint256 lastRewardTimestamp; // Last block timestamp that RUBY distribution occurs.\\n        uint256 accRubyPerShare; // Accumulated RUBY per share, times 1e12. See below.\\n    }\\n\\n    function poolInfo(uint256 pid) external view returns (PoolInfo memory);\\n\\n    function totalAllocPoint() external view returns (uint256);\\n\\n    function deposit(uint256 _pid, uint256 _amount) external;\\n\\n    function emergencyWithdrawRubyTokens(address _receiver, uint256 _amount) external;\\n}\\n\",\"keccak256\":\"0xa99ac9dc04820afe534ed5187038de0c7f9c084199a8340e1e68121feffca284\",\"license\":\"MIT\"},\"contracts/interfaces/IRubyMasterChefRewarder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IRubyMasterChefRewarder {\\n    function onRubyReward(address user, uint256 newLpAmount) external;\\n\\n    function pendingTokens(address user) external view returns (uint256 pending);\\n\\n    function rewardToken() external view returns (IERC20);\\n}\\n\",\"keccak256\":\"0x1e8ef530eb7b7e68ddab2bc8283a5aac50a5392478cb1eb8019b1fae237a7124\",\"license\":\"MIT\"},\"contracts/interfaces/IRubyStaker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IRubyStaker {\\n    function mint(address _receiver, uint256 _amount) external;\\n\\n    function notifyRewardAmount(uint256 rewardId, uint256 reward) external;\\n}\\n\",\"keccak256\":\"0xd71afd14dfc01a7e070a64e1911bf4a916f6e9bd82c91bd58e6af238dac0b410\",\"license\":\"MIT\"},\"contracts/libraries/BoringERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n// solhint-disable avoid-low-level-calls\\n\\nlibrary BoringERC20 {\\n    bytes4 private constant SIG_SYMBOL = 0x95d89b41; // symbol()\\n    bytes4 private constant SIG_NAME = 0x06fdde03; // name()\\n    bytes4 private constant SIG_DECIMALS = 0x313ce567; // decimals()\\n    bytes4 private constant SIG_BALANCE_OF = 0x70a08231; // balanceOf(address)\\n    bytes4 private constant SIG_TRANSFER = 0xa9059cbb; // transfer(address,uint256)\\n    bytes4 private constant SIG_TRANSFER_FROM = 0x23b872dd; // transferFrom(address,address,uint256)\\n\\n    function returnDataToString(bytes memory data) internal pure returns (string memory) {\\n        if (data.length >= 64) {\\n            return abi.decode(data, (string));\\n        } else if (data.length == 32) {\\n            uint8 i = 0;\\n            while (i < 32 && data[i] != 0) {\\n                i++;\\n            }\\n            bytes memory bytesArray = new bytes(i);\\n            for (i = 0; i < 32 && data[i] != 0; i++) {\\n                bytesArray[i] = data[i];\\n            }\\n            return string(bytesArray);\\n        } else {\\n            return \\\"???\\\";\\n        }\\n    }\\n\\n    /// @notice Provides a safe ERC20.symbol version which returns '???' as fallback string.\\n    /// @param token The address of the ERC-20 token contract.\\n    /// @return (string) Token symbol.\\n    function safeSymbol(IERC20 token) internal view returns (string memory) {\\n        (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(SIG_SYMBOL));\\n        return success ? returnDataToString(data) : \\\"???\\\";\\n    }\\n\\n    /// @notice Provides a safe ERC20.name version which returns '???' as fallback string.\\n    /// @param token The address of the ERC-20 token contract.\\n    /// @return (string) Token name.\\n    function safeName(IERC20 token) internal view returns (string memory) {\\n        (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(SIG_NAME));\\n        return success ? returnDataToString(data) : \\\"???\\\";\\n    }\\n\\n    /// @notice Provides a safe ERC20.decimals version which returns '18' as fallback value.\\n    /// @param token The address of the ERC-20 token contract.\\n    /// @return (uint8) Token decimals.\\n    function safeDecimals(IERC20 token) internal view returns (uint8) {\\n        (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(SIG_DECIMALS));\\n        return success && data.length == 32 ? abi.decode(data, (uint8)) : 18;\\n    }\\n\\n    /// @notice Provides a gas-optimized balance check to avoid a redundant extcodesize check in addition to the returndatasize check.\\n    /// @param token The address of the ERC-20 token.\\n    /// @param to The address of the user to check.\\n    /// @return amount The token amount.\\n    function safeBalanceOf(IERC20 token, address to) internal view returns (uint256 amount) {\\n        (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(SIG_BALANCE_OF, to));\\n        require(success && data.length >= 32, \\\"BoringERC20: BalanceOf failed\\\");\\n        amount = abi.decode(data, (uint256));\\n    }\\n\\n    /// @notice Provides a safe ERC20.transfer version for different ERC-20 implementations.\\n    /// Reverts on a failed transfer.\\n    /// @param token The address of the ERC-20 token.\\n    /// @param to Transfer tokens to.\\n    /// @param amount The token amount.\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        (bool success, bytes memory data) = address(token).call(abi.encodeWithSelector(SIG_TRANSFER, to, amount));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"BoringERC20: Transfer failed\\\");\\n    }\\n\\n    /// @notice Provides a safe ERC20.transferFrom version for different ERC-20 implementations.\\n    /// Reverts on a failed transfer.\\n    /// @param token The address of the ERC-20 token.\\n    /// @param from Transfer tokens from.\\n    /// @param to Transfer tokens to.\\n    /// @param amount The token amount.\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        (bool success, bytes memory data) = address(token).call(\\n            abi.encodeWithSelector(SIG_TRANSFER_FROM, from, to, amount)\\n        );\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"BoringERC20: TransferFrom failed\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x9b2cee2f172c746926ccab865e710e02b4f433254dc8a1798bdcf2076be2827f\",\"license\":\"MIT\"},\"contracts/token_mappings/RubyToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20Capped.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\n\\n/**\\n * @title RubyToken with Governance\\n * @notice This version of the RubyToken is to be used on the SChain\\n * It features access control needed for the IMA TokenManager contract (bridging),\\n * and also for the RubyMaker contract (distribute and burn mechanism)\\n */\\ncontract RubyToken is ERC20Capped, AccessControl {\\n    /// @notice Access control roles for the IMA TokenManager\\n    bytes32 public constant MINTER_ROLE = keccak256(\\\"MINTER_ROLE\\\");\\n    bytes32 public constant BURNER_ROLE = keccak256(\\\"BURNER_ROLE\\\");\\n\\n    /// @notice Total number of tokens\\n    uint256 public constant MAX_SUPPLY = 200_000_000e18; // 200 million Ruby\\n\\n    /// @notice The total amount of burned Ruby tokens\\n    uint256 public burnedAmount;\\n\\n    constructor() public ERC20(\\\"RubyToken\\\", \\\"RUBY\\\") ERC20Capped(MAX_SUPPLY) {\\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n    }\\n\\n    /// @notice Creates `amount` token to `to`. Must only be called by the IMA TokenManager contract\\n    function mint(address to, uint256 amount) public {\\n        require(hasRole(MINTER_ROLE, msg.sender), \\\"RUBY::mint: Caller is not a minter\\\");\\n        _mint(to, amount);\\n    }\\n\\n    /// @notice Destroys `amount` of RUBY tokens from the msg.sender. \\n    /// Must only be called by the IMA TokenManager contract and the RubyMaker contract\\n    function burn(uint256 amount) public virtual {\\n        require(hasRole(BURNER_ROLE, msg.sender), \\\"RUBY::burn: Caller is not a burner\\\");\\n        _burn(msg.sender, amount);\\n        burnedAmount += amount;\\n    }\\n\\n}\\n\",\"keccak256\":\"0x6edbc8cd36a38ec2d909a4231f24b0a963b7215f7451b3bdec8db9971a7e272e\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50613053806100206000396000f3fe608060405234801561001057600080fd5b50600436106101cf5760003560e01c8063715018a611610104578063af3315fd116100a2578063e6fd48bc11610071578063e6fd48bc14610393578063e77fc7a41461039b578063f2fde38b146103ae578063ffcd4263146103c1576101cf565b8063af3315fd1461034f578063bc70fdbc14610357578063c0a0a5a214610378578063e2bbb15814610380576101cf565b80638da5cb5b116100de5780638da5cb5b1461030057806393f1a40b14610308578063a7e05b9c14610329578063ab7de0981461033c576101cf565b8063715018a6146102d257806388bba42f146102da57806389a2bc25146102ed576101cf565b806330d9a62a1161017157806351eb05a61161014b57806351eb05a6146102915780635312ea8e146102a4578063630b5ba1146102b75780636ba4c138146102bf576101cf565b806330d9a62a1461026357806341c4b4e81461026b578063441a3e701461027e576101cf565b80630cf64bbb116101ad5780630cf64bbb1461020f57806312c09a3a146102245780631526fe271461023757806317caf6f11461025b576101cf565b806304ef9d58146101d4578063081e3eda146101f25780630ba84cd2146101fa575b600080fd5b6101dc6103e4565b6040516101e99190612f52565b60405180910390f35b6101dc6103ea565b61020d61020836600461268e565b6103f0565b005b610217610482565b6040516101e991906127e0565b61020d61023236600461248f565b610491565b61024a61024536600461268e565b610540565b6040516101e9959493929190612855565b6101dc61058b565b610217610591565b61020d610279366004612521565b6105a0565b61020d61028c36600461272e565b61071c565b61020d61029f36600461268e565b610962565b61020d6102b236600461268e565b610b2b565b61020d610bf8565b61020d6102cd36600461254c565b610c1b565b61020d610d70565b61020d6102e836600461274f565b610df9565b61020d6102fb36600461268e565b610fa6565b610217611047565b61031b6103163660046126be565b611056565b6040516101e9929190612fa6565b61020d61033736600461248f565b61107a565b61020d61034a3660046126ed565b6110f0565b6101dc611371565b61036a61036536600461268e565b611377565b6040516101e9929190612831565b6102176114d0565b61020d61038e36600461272e565b6114df565b6101dc6116fa565b61020d6103a93660046124ab565b611700565b61020d6103bc36600461248f565b6118a5565b6103d46103cf3660046126be565b611966565b6040516101e99493929190612f5b565b609b5481565b609c5490565b6103f8611b9f565b6001600160a01b0316610409611047565b6001600160a01b0316146104385760405162461bcd60e51b815260040161042f90612c70565b60405180910390fd5b610440610bf8565b609a81905560405133907fe2492e003bbe8afa53088b406f0c1cb5d9e280370fc72a74cf116ffd343c405390610477908490612f52565b60405180910390a250565b6097546001600160a01b031681565b610499611b9f565b6001600160a01b03166104aa611047565b6001600160a01b0316146104d05760405162461bcd60e51b815260040161042f90612c70565b6001600160a01b0381166104f65760405162461bcd60e51b815260040161042f90612984565b609880546001600160a01b0319166001600160a01b0383169081179091556040517f655a9d8a0fb724de9baabf3565fbf1811d7816028d8ef077381214d907ee9cb190600090a250565b609c818154811061054d57fe5b6000918252602090912060059091020180546001820154600283015460038401546004909401546001600160a01b0393841695509193909290911685565b60a05481565b6099546001600160a01b031681565b6105a8611b9f565b6001600160a01b03166105b9611047565b6001600160a01b0316146105df5760405162461bcd60e51b815260040161042f90612c70565b6001600160a01b0382166106055760405162461bcd60e51b815260040161042f90612b6c565b806106225760405162461bcd60e51b815260040161042f90612d02565b6097546040516370a0823160e01b815282916001600160a01b0316906370a08231906106529030906004016127e0565b60206040518083038186803b15801561066a57600080fd5b505afa15801561067e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106a291906126a6565b10156106c05760405162461bcd60e51b815260040161042f90612ad3565b6097546106d7906001600160a01b03168383611ba3565b816001600160a01b03167f97087e23afd36ddec15b9c40871fd3b322874ec0b2f759287d51f5f9b40d13ec826040516107109190612f52565b60405180910390a25050565b6002606554141561073f5760405162461bcd60e51b815260040161042f90612ecc565b60026065819055506000609c838154811061075657fe5b60009182526020808320868452609f82526040808520338652909252922080546005909202909201925083111561079f5760405162461bcd60e51b815260040161042f90612d92565b6107a884610962565b60006107e282600101546107dc64e8d4a510006107d687600301548760000154611c9990919063ffffffff16565b90611cdc565b90611d0e565b90508015610837576107f43382611d36565b84336001600160a01b03167f71bab65ced2e5750775a0613be067df48ef06cf92a496ebf7663ae06609249548360405161082e9190612f52565b60405180910390a35b81546108439085611d0e565b80835560038401546108609164e8d4a51000916107d69190611c99565b82600101819055506000609c868154811061087757fe5b60009182526020909120600460059092020101546001600160a01b0316905080156108fd57825460405163b8735ca360e01b81526001600160a01b0383169163b8735ca3916108ca9133916004016127f4565b600060405180830381600087803b1580156108e457600080fd5b505af11580156108f8573d6000803e3d6000fd5b505050505b8354610913906001600160a01b03163387611ba3565b85336001600160a01b03167ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b5688760405161094d9190612f52565b60405180910390a35050600160655550505050565b6000609c828154811061097157fe5b90600052602060002090600502019050806002015442116109925750610b28565b80546040516370a0823160e01b81526000916001600160a01b0316906370a08231906109c29030906004016127e0565b60206040518083038186803b1580156109da57600080fd5b505afa1580156109ee573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a1291906126a6565b905080610a26575042600290910155610b28565b6000610a3f836002015442611d0e90919063ffffffff16565b90506000610a6c60a0546107d68660010154610a66609a5487611c9990919063ffffffff16565b90611c99565b609b546099549192506103e881810392610aae926001600160a01b0390911691610a9b916107d6908790611c99565b6097546001600160a01b03169190611ba3565b610ad7610acc6103e86107d684610a6689838964e8d4a51000611c99565b600387015490611db7565b60038601819055426002870181905560405188927f3be3541fc42237d611b30329040bfa4569541d156560acdbbae57640d20b8f4692610b1a9290918991612fb4565b60405180910390a250505050505b50565b60026065541415610b4e5760405162461bcd60e51b815260040161042f90612ecc565b60026065819055506000609c8281548110610b6557fe5b60009182526020808320858452609f82526040808520338087529352909320805460059093029093018054909450610baa926001600160a01b03919091169190611ba3565b8054604051849133917fbb757047c2b5f3974fe26b7c10f732e7bce710b0952a71082702781e62ae059591610bde91612f52565b60405180910390a360008082556001918201556065555050565b609c5460005b81811015610c1757610c0f81610962565b600101610bfe565b5050565b610c23610bf8565b6000805b82811015610d19576000609c858584818110610c3f57fe5b9050602002013581548110610c5057fe5b906000526020600020906005020190506000609f6000878786818110610c7257fe5b9050602002013581526020019081526020016000206000336001600160a01b03166001600160a01b031681526020019081526020016000209050610ce2610cdb82600101546107dc64e8d4a510006107d687600301548760000154611c9990919063ffffffff16565b8590611db7565b9350610d0864e8d4a510006107d684600301548460000154611c9990919063ffffffff16565b600191820155919091019050610c27565b508015610d2a57610d2a3382611d36565b336001600160a01b03167f351d209c2fc728f2b988517156e6600339c242b0121854aad347682479e0334a82604051610d639190612f52565b60405180910390a2505050565b610d78611b9f565b6001600160a01b0316610d89611047565b6001600160a01b031614610daf5760405162461bcd60e51b815260040161042f90612c70565b6033546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3603380546001600160a01b0319169055565b610e01611b9f565b6001600160a01b0316610e12611047565b6001600160a01b031614610e385760405162461bcd60e51b815260040161042f90612c70565b610e4182611ddc565b80610e5357506001600160a01b038216155b610e6f5760405162461bcd60e51b815260040161042f90612dbe565b610e77610bf8565b610eb483610eae609c8781548110610e8b57fe5b90600052602060002090600502016001015460a054611d0e90919063ffffffff16565b90611db7565b60a08190555082609c8581548110610ec857fe5b9060005260206000209060050201600101819055508015610f275781609c8581548110610ef157fe5b906000526020600020906005020160040160006101000a8154816001600160a01b0302191690836001600160a01b031602179055505b80610f5b57609c8481548110610f3957fe5b60009182526020909120600460059092020101546001600160a01b0316610f5d565b815b6001600160a01b0316847f5cc19c778e63c1c2263d75219c925ca41f42f892526d0d814a7d4beb1425ffb78584604051610f98929190612f96565b60405180910390a350505050565b610fae611b9f565b6001600160a01b0316610fbf611047565b6001600160a01b031614610fe55760405162461bcd60e51b815260040161042f90612c70565b6103e88111156110075760405162461bcd60e51b815260040161042f906129ce565b609b8190556040517fcd5bca6a422e5cbcaeb47e746280c12e96040b2991cd5c6c4e98f08e4692c4b09061103c908390612f52565b60405180910390a150565b6033546001600160a01b031690565b609f6020908152600092835260408084209091529082529020805460019091015482565b6099546001600160a01b031633146110a45760405162461bcd60e51b815260040161042f90612ca5565b609980546001600160a01b0319166001600160a01b03831690811790915560405133907f61885cdba916be748ff3e3f6f15e4206153b8ea3b7acabade9d04b4063a8351090600090a350565b6110f8611b9f565b6001600160a01b0316611109611047565b6001600160a01b03161461112f5760405162461bcd60e51b815260040161042f90612c70565b61113882611ddc565b6111545760405162461bcd60e51b815260040161042f90612d4c565b61115d81611ddc565b8061116f57506001600160a01b038116155b61118b5760405162461bcd60e51b815260040161042f90612e04565b611196609d83611de6565b156111b35760405162461bcd60e51b815260040161042f90612c41565b6111bb610bf8565b600060a15442116111ce5760a1546111d0565b425b60a0549091506111e09085611db7565b60a09081556040805191820181526001600160a01b0380861683526020830187815291830184815260006060850181815287841660808701908152609c80546001810182559352955160059092027faf85b9071dfafeac1409d3f1d19bafc9bc7c37974cde8df0ee6168f0086e539c810180549386166001600160a01b031994851617905594517faf85b9071dfafeac1409d3f1d19bafc9bc7c37974cde8df0ee6168f0086e539d86015591517faf85b9071dfafeac1409d3f1d19bafc9bc7c37974cde8df0ee6168f0086e539e85015590517faf85b9071dfafeac1409d3f1d19bafc9bc7c37974cde8df0ee6168f0086e539f84015592517faf85b9071dfafeac1409d3f1d19bafc9bc7c37974cde8df0ee6168f0086e53a090920180549290911691909216179055611315609d84611dfb565b50609c546001600160a01b038084169190851690611334906001611d0e565b7f0621c8de33a230aec1aee0d4f7b6c81d97bd3ce0a2040ca33fbd668e521ecafe876040516113639190612f52565b60405180910390a450505050565b609a5481565b600060606000609c848154811061138a57fe5b6000918252602090912060059091020160048101549091506001600160a01b0316156114ca576004808201546040805163f7c618c160e01b815290516001600160a01b039092169263f7c618c1928282019260209290829003018186803b1580156113f457600080fd5b505afa158015611408573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061142c91906125d7565b92506114c78160040160009054906101000a90046001600160a01b03166001600160a01b031663f7c618c16040518163ffffffff1660e01b815260040160206040518083038186803b15801561148157600080fd5b505afa158015611495573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114b991906125d7565b6001600160a01b0316611e10565b91505b50915091565b6098546001600160a01b031681565b600260655414156115025760405162461bcd60e51b815260040161042f90612ecc565b60026065819055506000609c838154811061151957fe5b60009182526020808320868452609f8252604080852033865290925292206005909102909101915061154a84610962565b8054156115cf57600061157f82600101546107dc64e8d4a510006107d687600301548760000154611c9990919063ffffffff16565b905061158b3382611d36565b84336001600160a01b03167f71bab65ced2e5750775a0613be067df48ef06cf92a496ebf7663ae0660924954836040516115c59190612f52565b60405180910390a3505b80546115db9084611db7565b80825560038301546115f89164e8d4a51000916107d69190611c99565b81600101819055506000609c858154811061160f57fe5b60009182526020909120600460059092020101546001600160a01b03169050801561169557815460405163b8735ca360e01b81526001600160a01b0383169163b8735ca3916116629133916004016127f4565b600060405180830381600087803b15801561167c57600080fd5b505af1158015611690573d6000803e3d6000fd5b505050505b82546116ac906001600160a01b0316333087611ed3565b84336001600160a01b03167f90890809c654f11d6e72a28fa60149770a0d11ec6c92319d6ceb2bb0a4ea1a15866040516116e69190612f52565b60405180910390a350506001606555505050565b60a15481565b600054610100900460ff16806117195750611719611fcc565b80611727575060005460ff16155b6117435760405162461bcd60e51b815260040161042f90612a85565b600054610100900460ff1615801561176e576000805460ff1961ff0019909116610100171660011790555b6001600160a01b0387166117945760405162461bcd60e51b815260040161042f90612b22565b6001600160a01b0386166117ba5760405162461bcd60e51b815260040161042f90612939565b6001600160a01b0385166117e05760405162461bcd60e51b815260040161042f90612bb7565b836117fd5760405162461bcd60e51b815260040161042f90612e7f565b6103e882111561181f5760405162461bcd60e51b815260040161042f90612f03565b611827611fdd565b61182f61206f565b611838886118a5565b609780546001600160a01b03808a166001600160a01b031992831617909255609880548984169083161790556099805492881692909116919091179055609a84905560a1839055609b829055600060a055801561189b576000805461ff00191690555b5050505050505050565b6118ad611b9f565b6001600160a01b03166118be611047565b6001600160a01b0316146118e45760405162461bcd60e51b815260040161042f90612c70565b6001600160a01b03811661190a5760405162461bcd60e51b815260040161042f906128bc565b6033546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3603380546001600160a01b0319166001600160a01b0392909216919091179055565b6000806060600080609c878154811061197b57fe5b600091825260208083208a8452609f825260408085206001600160a01b03808d16875293528085206003600590950290920193840154845491516370a0823160e01b815294965091949193919216906370a08231906119de9030906004016127e0565b60206040518083038186803b1580156119f657600080fd5b505afa158015611a0a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a2e91906126a6565b9050836002015442118015611a4257508015155b15611ac1576000611a60856002015442611d0e90919063ffffffff16565b90506000609b546103e80390506000611a9c6103e86107d684610a6660a0546107d68d60010154610a66609a548c611c9990919063ffffffff16565b9050611abb611ab4856107d68464e8d4a51000611c99565b8690611db7565b94505050505b611ae983600101546107dc64e8d4a510006107d6868860000154611c9990919063ffffffff16565b60048501549098506001600160a01b031615611b9257611b088a611377565b60048087015460405163c031a66f60e01b8152939a509198506001600160a01b039091169163c031a66f91611b3f918d91016127e0565b60206040518083038186803b158015611b5757600080fd5b505afa158015611b6b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b8f91906126a6565b94505b5050505092959194509250565b3390565b60006060846001600160a01b031663a9059cbb60e01b8585604051602401611bcc9291906127f4565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b0319909416939093179092529051611c0a91906127c4565b6000604051808303816000865af19150503d8060008114611c47576040519150601f19603f3d011682016040523d82523d6000602084013e611c4c565b606091505b5091509150818015611c76575080511580611c76575080806020019051810190611c7691906125bb565b611c925760405162461bcd60e51b815260040161042f90612885565b5050505050565b600082611ca857506000611cd6565b82820282848281611cb557fe5b0414611cd35760405162461bcd60e51b815260040161042f90612c00565b90505b92915050565b6000808211611cfd5760405162461bcd60e51b815260040161042f90612a4e565b818381611d0657fe5b049392505050565b600082821115611d305760405162461bcd60e51b815260040161042f90612a17565b50900390565b6098546040516340c10f1960e01b81526001600160a01b03909116906340c10f1990611d6890859085906004016127f4565b600060405180830381600087803b158015611d8257600080fd5b505af1158015611d96573d6000803e3d6000fd5b5050609854609754610c1793506001600160a01b0390811692501683611ba3565b600082820183811015611cd35760405162461bcd60e51b815260040161042f90612902565b803b15155b919050565b6000611cd3836001600160a01b0384166120e5565b6000611cd3836001600160a01b0384166120fd565b60408051600481526024810182526020810180516001600160e01b03166395d89b4160e01b179052905160609160009183916001600160a01b03861691611e5791906127c4565b600060405180830381855afa9150503d8060008114611e92576040519150601f19603f3d011682016040523d82523d6000602084013e611e97565b606091505b509150915081611ec257604051806040016040528060038152602001623f3f3f60e81b815250611ecb565b611ecb81612147565b949350505050565b60006060856001600160a01b03166323b872dd60e01b868686604051602401611efe9392919061280d565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b0319909416939093179092529051611f3c91906127c4565b6000604051808303816000865af19150503d8060008114611f79576040519150601f19603f3d011682016040523d82523d6000602084013e611f7e565b606091505b5091509150818015611fa8575080511580611fa8575080806020019051810190611fa891906125bb565b611fc45760405162461bcd60e51b815260040161042f90612e4a565b505050505050565b6000611fd730611ddc565b15905090565b600054610100900460ff1680611ff65750611ff6611fcc565b80612004575060005460ff16155b6120205760405162461bcd60e51b815260040161042f90612a85565b600054610100900460ff1615801561204b576000805460ff1961ff0019909116610100171660011790555b6120536122ad565b61205b61232e565b8015610b28576000805461ff001916905550565b600054610100900460ff16806120885750612088611fcc565b80612096575060005460ff16155b6120b25760405162461bcd60e51b815260040161042f90612a85565b600054610100900460ff161580156120dd576000805460ff1961ff0019909116610100171660011790555b61205b612408565b60009081526001919091016020526040902054151590565b600061210983836120e5565b61213f57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155611cd6565b506000611cd6565b6060604082511061216d578180602001905181019061216691906125f3565b9050611de1565b81516020141561228d5760005b60208160ff161080156121a95750828160ff168151811061219757fe5b01602001516001600160f81b03191615155b156121b65760010161217a565b60608160ff1667ffffffffffffffff811180156121d257600080fd5b506040519080825280601f01601f1916602001820160405280156121fd576020820181803683370190505b509050600091505b60208260ff161080156122345750838260ff168151811061222257fe5b01602001516001600160f81b03191615155b1561228457838260ff168151811061224857fe5b602001015160f81c60f81b818360ff168151811061226257fe5b60200101906001600160f81b031916908160001a905350600190910190612205565b9150611de19050565b506040805180820190915260038152623f3f3f60e81b6020820152611de1565b600054610100900460ff16806122c657506122c6611fcc565b806122d4575060005460ff16155b6122f05760405162461bcd60e51b815260040161042f90612a85565b600054610100900460ff1615801561205b576000805460ff1961ff0019909116610100171660011790558015610b28576000805461ff001916905550565b600054610100900460ff16806123475750612347611fcc565b80612355575060005460ff16155b6123715760405162461bcd60e51b815260040161042f90612a85565b600054610100900460ff1615801561239c576000805460ff1961ff0019909116610100171660011790555b60006123a6611b9f565b603380546001600160a01b0319166001600160a01b038316908117909155604051919250906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3508015610b28576000805461ff001916905550565b600054610100900460ff16806124215750612421611fcc565b8061242f575060005460ff16155b61244b5760405162461bcd60e51b815260040161042f90612a85565b600054610100900460ff16158015612476576000805460ff1961ff0019909116610100171660011790555b60016065558015610b28576000805461ff001916905550565b6000602082840312156124a0578081fd5b8135611cd381612ffa565b600080600080600080600060e0888a0312156124c5578283fd5b87356124d081612ffa565b965060208801356124e081612ffa565b955060408801356124f081612ffa565b9450606088013561250081612ffa565b9699959850939660808101359560a0820135955060c0909101359350915050565b60008060408385031215612533578182fd5b823561253e81612ffa565b946020939093013593505050565b6000806020838503121561255e578182fd5b823567ffffffffffffffff80821115612575578384fd5b818501915085601f830112612588578384fd5b813581811115612596578485fd5b86602080830285010111156125a9578485fd5b60209290920196919550909350505050565b6000602082840312156125cc578081fd5b8151611cd38161300f565b6000602082840312156125e8578081fd5b8151611cd381612ffa565b600060208284031215612604578081fd5b815167ffffffffffffffff8082111561261b578283fd5b818401915084601f83011261262e578283fd5b81518181111561263c578384fd5b604051601f8201601f19168101602001838111828210171561265c578586fd5b604052818152838201602001871015612673578485fd5b612684826020830160208701612fca565b9695505050505050565b60006020828403121561269f578081fd5b5035919050565b6000602082840312156126b7578081fd5b5051919050565b600080604083850312156126d0578182fd5b8235915060208301356126e281612ffa565b809150509250929050565b600080600060608486031215612701578283fd5b83359250602084013561271381612ffa565b9150604084013561272381612ffa565b809150509250925092565b60008060408385031215612740578182fd5b50508035926020909101359150565b60008060008060808587031215612764578384fd5b8435935060208501359250604085013561277d81612ffa565b9150606085013561278d8161300f565b939692955090935050565b600081518084526127b0816020860160208601612fca565b601f01601f19169290920160200192915050565b600082516127d6818460208701612fca565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b0383168152604060208201819052600090611ecb90830184612798565b6001600160a01b039586168152602081019490945260408401929092526060830152909116608082015260a00190565b6020808252601c908201527f426f72696e6745524332303a205472616e73666572206661696c656400000000604082015260600190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b6020808252602b908201527f527562794d6173746572436865663a20496e76616c696420527562795374616b60408201526a32b91030b2323932b9b99760a91b606082015260800190565b6020808252602a908201527f736574527562795374616b65723a20696e76616c69642072756279206d696e746040820152696572206164647265737360b01b606082015260800190565b60208082526029908201527f736574547265617375727950657263656e743a20696e76616c69642070657263604082015268656e742076616c756560b81b606082015260800190565b6020808252601e908201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604082015260600190565b6020808252601a908201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604082015260600190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252602f908201527f527562794d6173746572436865663a204e6f7420656e6f7567682062616c616e60408201526e31b2903a37903bb4ba34323930bb9760891b606082015260800190565b6020808252602a908201527f527562794d6173746572436865663a20496e76616c69642052756279546f6b65604082015269371030b2323932b9b99760b11b606082015260800190565b6020808252602b908201527f527562794d6173746572436865663a20496e76616c696420776974686472617760408201526a30b61030b2323932b9b99760a91b606082015260800190565b60208082526029908201527f527562794d6173746572436865663a20496e76616c69642074726561737572796040820152681030b2323932b9b99760b91b606082015260800190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6040820152607760f81b606082015260800190565b6020808252601590820152741859190e88131408185b1c9958591e481859191959605a1b604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252603e908201527f7365745472656173757279416464723a206e6f7420656e6f756768207065726d60408201527f697373696f6e7320746f2065786563757465207468697320616374696f6e0000606082015260800190565b6020808252602a908201527f527562794d6173746572436865663a20496e76616c696420776974686472617760408201526930b61030b6b7bab73a1760b11b606082015260800190565b60208082526026908201527f6164643a204c5020746f6b656e206d75737420626520612076616c696420636f6040820152651b9d1c9858dd60d21b606082015260800190565b6020808252601290820152711dda5d1a191c985dce881b9bdd0819dbdbd960721b604082015260600190565b60208082526026908201527f7365743a207265776172646572206d75737420626520636f6e7472616374206f60408201526572207a65726f60d01b606082015260800190565b60208082526026908201527f6164643a207265776172646572206d75737420626520636f6e7472616374206f60408201526572207a65726f60d01b606082015260800190565b6020808252818101527f426f72696e6745524332303a205472616e7366657246726f6d206661696c6564604082015260600190565b6020808252602d908201527f527562794d6173746572436865663a20496e76616c696420656d697373696f6e60408201526c103930ba329030b6b7bab73a1760991b606082015260800190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b6020808252602f908201527f527562794d6173746572436865663a20696e76616c696420747265617375727960408201526e103832b931b2b73a103b30b63ab29760891b606082015260800190565b90815260200190565b8481526001600160a01b0384166020820152608060408201819052600090612f8590830185612798565b905082606083015295945050505050565b9182521515602082015260400190565b918252602082015260400190565b9283526020830191909152604082015260600190565b60005b83811015612fe5578181015183820152602001612fcd565b83811115612ff4576000848401525b50505050565b6001600160a01b0381168114610b2857600080fd5b8015158114610b2857600080fdfea2646970667358221220f35a6033753a93b33fc0f6d3f3db18cec5356b9c86bdc2c731df10b81bed916b64736f6c634300060c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101cf5760003560e01c8063715018a611610104578063af3315fd116100a2578063e6fd48bc11610071578063e6fd48bc14610393578063e77fc7a41461039b578063f2fde38b146103ae578063ffcd4263146103c1576101cf565b8063af3315fd1461034f578063bc70fdbc14610357578063c0a0a5a214610378578063e2bbb15814610380576101cf565b80638da5cb5b116100de5780638da5cb5b1461030057806393f1a40b14610308578063a7e05b9c14610329578063ab7de0981461033c576101cf565b8063715018a6146102d257806388bba42f146102da57806389a2bc25146102ed576101cf565b806330d9a62a1161017157806351eb05a61161014b57806351eb05a6146102915780635312ea8e146102a4578063630b5ba1146102b75780636ba4c138146102bf576101cf565b806330d9a62a1461026357806341c4b4e81461026b578063441a3e701461027e576101cf565b80630cf64bbb116101ad5780630cf64bbb1461020f57806312c09a3a146102245780631526fe271461023757806317caf6f11461025b576101cf565b806304ef9d58146101d4578063081e3eda146101f25780630ba84cd2146101fa575b600080fd5b6101dc6103e4565b6040516101e99190612f52565b60405180910390f35b6101dc6103ea565b61020d61020836600461268e565b6103f0565b005b610217610482565b6040516101e991906127e0565b61020d61023236600461248f565b610491565b61024a61024536600461268e565b610540565b6040516101e9959493929190612855565b6101dc61058b565b610217610591565b61020d610279366004612521565b6105a0565b61020d61028c36600461272e565b61071c565b61020d61029f36600461268e565b610962565b61020d6102b236600461268e565b610b2b565b61020d610bf8565b61020d6102cd36600461254c565b610c1b565b61020d610d70565b61020d6102e836600461274f565b610df9565b61020d6102fb36600461268e565b610fa6565b610217611047565b61031b6103163660046126be565b611056565b6040516101e9929190612fa6565b61020d61033736600461248f565b61107a565b61020d61034a3660046126ed565b6110f0565b6101dc611371565b61036a61036536600461268e565b611377565b6040516101e9929190612831565b6102176114d0565b61020d61038e36600461272e565b6114df565b6101dc6116fa565b61020d6103a93660046124ab565b611700565b61020d6103bc36600461248f565b6118a5565b6103d46103cf3660046126be565b611966565b6040516101e99493929190612f5b565b609b5481565b609c5490565b6103f8611b9f565b6001600160a01b0316610409611047565b6001600160a01b0316146104385760405162461bcd60e51b815260040161042f90612c70565b60405180910390fd5b610440610bf8565b609a81905560405133907fe2492e003bbe8afa53088b406f0c1cb5d9e280370fc72a74cf116ffd343c405390610477908490612f52565b60405180910390a250565b6097546001600160a01b031681565b610499611b9f565b6001600160a01b03166104aa611047565b6001600160a01b0316146104d05760405162461bcd60e51b815260040161042f90612c70565b6001600160a01b0381166104f65760405162461bcd60e51b815260040161042f90612984565b609880546001600160a01b0319166001600160a01b0383169081179091556040517f655a9d8a0fb724de9baabf3565fbf1811d7816028d8ef077381214d907ee9cb190600090a250565b609c818154811061054d57fe5b6000918252602090912060059091020180546001820154600283015460038401546004909401546001600160a01b0393841695509193909290911685565b60a05481565b6099546001600160a01b031681565b6105a8611b9f565b6001600160a01b03166105b9611047565b6001600160a01b0316146105df5760405162461bcd60e51b815260040161042f90612c70565b6001600160a01b0382166106055760405162461bcd60e51b815260040161042f90612b6c565b806106225760405162461bcd60e51b815260040161042f90612d02565b6097546040516370a0823160e01b815282916001600160a01b0316906370a08231906106529030906004016127e0565b60206040518083038186803b15801561066a57600080fd5b505afa15801561067e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106a291906126a6565b10156106c05760405162461bcd60e51b815260040161042f90612ad3565b6097546106d7906001600160a01b03168383611ba3565b816001600160a01b03167f97087e23afd36ddec15b9c40871fd3b322874ec0b2f759287d51f5f9b40d13ec826040516107109190612f52565b60405180910390a25050565b6002606554141561073f5760405162461bcd60e51b815260040161042f90612ecc565b60026065819055506000609c838154811061075657fe5b60009182526020808320868452609f82526040808520338652909252922080546005909202909201925083111561079f5760405162461bcd60e51b815260040161042f90612d92565b6107a884610962565b60006107e282600101546107dc64e8d4a510006107d687600301548760000154611c9990919063ffffffff16565b90611cdc565b90611d0e565b90508015610837576107f43382611d36565b84336001600160a01b03167f71bab65ced2e5750775a0613be067df48ef06cf92a496ebf7663ae06609249548360405161082e9190612f52565b60405180910390a35b81546108439085611d0e565b80835560038401546108609164e8d4a51000916107d69190611c99565b82600101819055506000609c868154811061087757fe5b60009182526020909120600460059092020101546001600160a01b0316905080156108fd57825460405163b8735ca360e01b81526001600160a01b0383169163b8735ca3916108ca9133916004016127f4565b600060405180830381600087803b1580156108e457600080fd5b505af11580156108f8573d6000803e3d6000fd5b505050505b8354610913906001600160a01b03163387611ba3565b85336001600160a01b03167ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b5688760405161094d9190612f52565b60405180910390a35050600160655550505050565b6000609c828154811061097157fe5b90600052602060002090600502019050806002015442116109925750610b28565b80546040516370a0823160e01b81526000916001600160a01b0316906370a08231906109c29030906004016127e0565b60206040518083038186803b1580156109da57600080fd5b505afa1580156109ee573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a1291906126a6565b905080610a26575042600290910155610b28565b6000610a3f836002015442611d0e90919063ffffffff16565b90506000610a6c60a0546107d68660010154610a66609a5487611c9990919063ffffffff16565b90611c99565b609b546099549192506103e881810392610aae926001600160a01b0390911691610a9b916107d6908790611c99565b6097546001600160a01b03169190611ba3565b610ad7610acc6103e86107d684610a6689838964e8d4a51000611c99565b600387015490611db7565b60038601819055426002870181905560405188927f3be3541fc42237d611b30329040bfa4569541d156560acdbbae57640d20b8f4692610b1a9290918991612fb4565b60405180910390a250505050505b50565b60026065541415610b4e5760405162461bcd60e51b815260040161042f90612ecc565b60026065819055506000609c8281548110610b6557fe5b60009182526020808320858452609f82526040808520338087529352909320805460059093029093018054909450610baa926001600160a01b03919091169190611ba3565b8054604051849133917fbb757047c2b5f3974fe26b7c10f732e7bce710b0952a71082702781e62ae059591610bde91612f52565b60405180910390a360008082556001918201556065555050565b609c5460005b81811015610c1757610c0f81610962565b600101610bfe565b5050565b610c23610bf8565b6000805b82811015610d19576000609c858584818110610c3f57fe5b9050602002013581548110610c5057fe5b906000526020600020906005020190506000609f6000878786818110610c7257fe5b9050602002013581526020019081526020016000206000336001600160a01b03166001600160a01b031681526020019081526020016000209050610ce2610cdb82600101546107dc64e8d4a510006107d687600301548760000154611c9990919063ffffffff16565b8590611db7565b9350610d0864e8d4a510006107d684600301548460000154611c9990919063ffffffff16565b600191820155919091019050610c27565b508015610d2a57610d2a3382611d36565b336001600160a01b03167f351d209c2fc728f2b988517156e6600339c242b0121854aad347682479e0334a82604051610d639190612f52565b60405180910390a2505050565b610d78611b9f565b6001600160a01b0316610d89611047565b6001600160a01b031614610daf5760405162461bcd60e51b815260040161042f90612c70565b6033546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3603380546001600160a01b0319169055565b610e01611b9f565b6001600160a01b0316610e12611047565b6001600160a01b031614610e385760405162461bcd60e51b815260040161042f90612c70565b610e4182611ddc565b80610e5357506001600160a01b038216155b610e6f5760405162461bcd60e51b815260040161042f90612dbe565b610e77610bf8565b610eb483610eae609c8781548110610e8b57fe5b90600052602060002090600502016001015460a054611d0e90919063ffffffff16565b90611db7565b60a08190555082609c8581548110610ec857fe5b9060005260206000209060050201600101819055508015610f275781609c8581548110610ef157fe5b906000526020600020906005020160040160006101000a8154816001600160a01b0302191690836001600160a01b031602179055505b80610f5b57609c8481548110610f3957fe5b60009182526020909120600460059092020101546001600160a01b0316610f5d565b815b6001600160a01b0316847f5cc19c778e63c1c2263d75219c925ca41f42f892526d0d814a7d4beb1425ffb78584604051610f98929190612f96565b60405180910390a350505050565b610fae611b9f565b6001600160a01b0316610fbf611047565b6001600160a01b031614610fe55760405162461bcd60e51b815260040161042f90612c70565b6103e88111156110075760405162461bcd60e51b815260040161042f906129ce565b609b8190556040517fcd5bca6a422e5cbcaeb47e746280c12e96040b2991cd5c6c4e98f08e4692c4b09061103c908390612f52565b60405180910390a150565b6033546001600160a01b031690565b609f6020908152600092835260408084209091529082529020805460019091015482565b6099546001600160a01b031633146110a45760405162461bcd60e51b815260040161042f90612ca5565b609980546001600160a01b0319166001600160a01b03831690811790915560405133907f61885cdba916be748ff3e3f6f15e4206153b8ea3b7acabade9d04b4063a8351090600090a350565b6110f8611b9f565b6001600160a01b0316611109611047565b6001600160a01b03161461112f5760405162461bcd60e51b815260040161042f90612c70565b61113882611ddc565b6111545760405162461bcd60e51b815260040161042f90612d4c565b61115d81611ddc565b8061116f57506001600160a01b038116155b61118b5760405162461bcd60e51b815260040161042f90612e04565b611196609d83611de6565b156111b35760405162461bcd60e51b815260040161042f90612c41565b6111bb610bf8565b600060a15442116111ce5760a1546111d0565b425b60a0549091506111e09085611db7565b60a09081556040805191820181526001600160a01b0380861683526020830187815291830184815260006060850181815287841660808701908152609c80546001810182559352955160059092027faf85b9071dfafeac1409d3f1d19bafc9bc7c37974cde8df0ee6168f0086e539c810180549386166001600160a01b031994851617905594517faf85b9071dfafeac1409d3f1d19bafc9bc7c37974cde8df0ee6168f0086e539d86015591517faf85b9071dfafeac1409d3f1d19bafc9bc7c37974cde8df0ee6168f0086e539e85015590517faf85b9071dfafeac1409d3f1d19bafc9bc7c37974cde8df0ee6168f0086e539f84015592517faf85b9071dfafeac1409d3f1d19bafc9bc7c37974cde8df0ee6168f0086e53a090920180549290911691909216179055611315609d84611dfb565b50609c546001600160a01b038084169190851690611334906001611d0e565b7f0621c8de33a230aec1aee0d4f7b6c81d97bd3ce0a2040ca33fbd668e521ecafe876040516113639190612f52565b60405180910390a450505050565b609a5481565b600060606000609c848154811061138a57fe5b6000918252602090912060059091020160048101549091506001600160a01b0316156114ca576004808201546040805163f7c618c160e01b815290516001600160a01b039092169263f7c618c1928282019260209290829003018186803b1580156113f457600080fd5b505afa158015611408573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061142c91906125d7565b92506114c78160040160009054906101000a90046001600160a01b03166001600160a01b031663f7c618c16040518163ffffffff1660e01b815260040160206040518083038186803b15801561148157600080fd5b505afa158015611495573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114b991906125d7565b6001600160a01b0316611e10565b91505b50915091565b6098546001600160a01b031681565b600260655414156115025760405162461bcd60e51b815260040161042f90612ecc565b60026065819055506000609c838154811061151957fe5b60009182526020808320868452609f8252604080852033865290925292206005909102909101915061154a84610962565b8054156115cf57600061157f82600101546107dc64e8d4a510006107d687600301548760000154611c9990919063ffffffff16565b905061158b3382611d36565b84336001600160a01b03167f71bab65ced2e5750775a0613be067df48ef06cf92a496ebf7663ae0660924954836040516115c59190612f52565b60405180910390a3505b80546115db9084611db7565b80825560038301546115f89164e8d4a51000916107d69190611c99565b81600101819055506000609c858154811061160f57fe5b60009182526020909120600460059092020101546001600160a01b03169050801561169557815460405163b8735ca360e01b81526001600160a01b0383169163b8735ca3916116629133916004016127f4565b600060405180830381600087803b15801561167c57600080fd5b505af1158015611690573d6000803e3d6000fd5b505050505b82546116ac906001600160a01b0316333087611ed3565b84336001600160a01b03167f90890809c654f11d6e72a28fa60149770a0d11ec6c92319d6ceb2bb0a4ea1a15866040516116e69190612f52565b60405180910390a350506001606555505050565b60a15481565b600054610100900460ff16806117195750611719611fcc565b80611727575060005460ff16155b6117435760405162461bcd60e51b815260040161042f90612a85565b600054610100900460ff1615801561176e576000805460ff1961ff0019909116610100171660011790555b6001600160a01b0387166117945760405162461bcd60e51b815260040161042f90612b22565b6001600160a01b0386166117ba5760405162461bcd60e51b815260040161042f90612939565b6001600160a01b0385166117e05760405162461bcd60e51b815260040161042f90612bb7565b836117fd5760405162461bcd60e51b815260040161042f90612e7f565b6103e882111561181f5760405162461bcd60e51b815260040161042f90612f03565b611827611fdd565b61182f61206f565b611838886118a5565b609780546001600160a01b03808a166001600160a01b031992831617909255609880548984169083161790556099805492881692909116919091179055609a84905560a1839055609b829055600060a055801561189b576000805461ff00191690555b5050505050505050565b6118ad611b9f565b6001600160a01b03166118be611047565b6001600160a01b0316146118e45760405162461bcd60e51b815260040161042f90612c70565b6001600160a01b03811661190a5760405162461bcd60e51b815260040161042f906128bc565b6033546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3603380546001600160a01b0319166001600160a01b0392909216919091179055565b6000806060600080609c878154811061197b57fe5b600091825260208083208a8452609f825260408085206001600160a01b03808d16875293528085206003600590950290920193840154845491516370a0823160e01b815294965091949193919216906370a08231906119de9030906004016127e0565b60206040518083038186803b1580156119f657600080fd5b505afa158015611a0a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a2e91906126a6565b9050836002015442118015611a4257508015155b15611ac1576000611a60856002015442611d0e90919063ffffffff16565b90506000609b546103e80390506000611a9c6103e86107d684610a6660a0546107d68d60010154610a66609a548c611c9990919063ffffffff16565b9050611abb611ab4856107d68464e8d4a51000611c99565b8690611db7565b94505050505b611ae983600101546107dc64e8d4a510006107d6868860000154611c9990919063ffffffff16565b60048501549098506001600160a01b031615611b9257611b088a611377565b60048087015460405163c031a66f60e01b8152939a509198506001600160a01b039091169163c031a66f91611b3f918d91016127e0565b60206040518083038186803b158015611b5757600080fd5b505afa158015611b6b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b8f91906126a6565b94505b5050505092959194509250565b3390565b60006060846001600160a01b031663a9059cbb60e01b8585604051602401611bcc9291906127f4565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b0319909416939093179092529051611c0a91906127c4565b6000604051808303816000865af19150503d8060008114611c47576040519150601f19603f3d011682016040523d82523d6000602084013e611c4c565b606091505b5091509150818015611c76575080511580611c76575080806020019051810190611c7691906125bb565b611c925760405162461bcd60e51b815260040161042f90612885565b5050505050565b600082611ca857506000611cd6565b82820282848281611cb557fe5b0414611cd35760405162461bcd60e51b815260040161042f90612c00565b90505b92915050565b6000808211611cfd5760405162461bcd60e51b815260040161042f90612a4e565b818381611d0657fe5b049392505050565b600082821115611d305760405162461bcd60e51b815260040161042f90612a17565b50900390565b6098546040516340c10f1960e01b81526001600160a01b03909116906340c10f1990611d6890859085906004016127f4565b600060405180830381600087803b158015611d8257600080fd5b505af1158015611d96573d6000803e3d6000fd5b5050609854609754610c1793506001600160a01b0390811692501683611ba3565b600082820183811015611cd35760405162461bcd60e51b815260040161042f90612902565b803b15155b919050565b6000611cd3836001600160a01b0384166120e5565b6000611cd3836001600160a01b0384166120fd565b60408051600481526024810182526020810180516001600160e01b03166395d89b4160e01b179052905160609160009183916001600160a01b03861691611e5791906127c4565b600060405180830381855afa9150503d8060008114611e92576040519150601f19603f3d011682016040523d82523d6000602084013e611e97565b606091505b509150915081611ec257604051806040016040528060038152602001623f3f3f60e81b815250611ecb565b611ecb81612147565b949350505050565b60006060856001600160a01b03166323b872dd60e01b868686604051602401611efe9392919061280d565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b0319909416939093179092529051611f3c91906127c4565b6000604051808303816000865af19150503d8060008114611f79576040519150601f19603f3d011682016040523d82523d6000602084013e611f7e565b606091505b5091509150818015611fa8575080511580611fa8575080806020019051810190611fa891906125bb565b611fc45760405162461bcd60e51b815260040161042f90612e4a565b505050505050565b6000611fd730611ddc565b15905090565b600054610100900460ff1680611ff65750611ff6611fcc565b80612004575060005460ff16155b6120205760405162461bcd60e51b815260040161042f90612a85565b600054610100900460ff1615801561204b576000805460ff1961ff0019909116610100171660011790555b6120536122ad565b61205b61232e565b8015610b28576000805461ff001916905550565b600054610100900460ff16806120885750612088611fcc565b80612096575060005460ff16155b6120b25760405162461bcd60e51b815260040161042f90612a85565b600054610100900460ff161580156120dd576000805460ff1961ff0019909116610100171660011790555b61205b612408565b60009081526001919091016020526040902054151590565b600061210983836120e5565b61213f57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155611cd6565b506000611cd6565b6060604082511061216d578180602001905181019061216691906125f3565b9050611de1565b81516020141561228d5760005b60208160ff161080156121a95750828160ff168151811061219757fe5b01602001516001600160f81b03191615155b156121b65760010161217a565b60608160ff1667ffffffffffffffff811180156121d257600080fd5b506040519080825280601f01601f1916602001820160405280156121fd576020820181803683370190505b509050600091505b60208260ff161080156122345750838260ff168151811061222257fe5b01602001516001600160f81b03191615155b1561228457838260ff168151811061224857fe5b602001015160f81c60f81b818360ff168151811061226257fe5b60200101906001600160f81b031916908160001a905350600190910190612205565b9150611de19050565b506040805180820190915260038152623f3f3f60e81b6020820152611de1565b600054610100900460ff16806122c657506122c6611fcc565b806122d4575060005460ff16155b6122f05760405162461bcd60e51b815260040161042f90612a85565b600054610100900460ff1615801561205b576000805460ff1961ff0019909116610100171660011790558015610b28576000805461ff001916905550565b600054610100900460ff16806123475750612347611fcc565b80612355575060005460ff16155b6123715760405162461bcd60e51b815260040161042f90612a85565b600054610100900460ff1615801561239c576000805460ff1961ff0019909116610100171660011790555b60006123a6611b9f565b603380546001600160a01b0319166001600160a01b038316908117909155604051919250906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3508015610b28576000805461ff001916905550565b600054610100900460ff16806124215750612421611fcc565b8061242f575060005460ff16155b61244b5760405162461bcd60e51b815260040161042f90612a85565b600054610100900460ff16158015612476576000805460ff1961ff0019909116610100171660011790555b60016065558015610b28576000805461ff001916905550565b6000602082840312156124a0578081fd5b8135611cd381612ffa565b600080600080600080600060e0888a0312156124c5578283fd5b87356124d081612ffa565b965060208801356124e081612ffa565b955060408801356124f081612ffa565b9450606088013561250081612ffa565b9699959850939660808101359560a0820135955060c0909101359350915050565b60008060408385031215612533578182fd5b823561253e81612ffa565b946020939093013593505050565b6000806020838503121561255e578182fd5b823567ffffffffffffffff80821115612575578384fd5b818501915085601f830112612588578384fd5b813581811115612596578485fd5b86602080830285010111156125a9578485fd5b60209290920196919550909350505050565b6000602082840312156125cc578081fd5b8151611cd38161300f565b6000602082840312156125e8578081fd5b8151611cd381612ffa565b600060208284031215612604578081fd5b815167ffffffffffffffff8082111561261b578283fd5b818401915084601f83011261262e578283fd5b81518181111561263c578384fd5b604051601f8201601f19168101602001838111828210171561265c578586fd5b604052818152838201602001871015612673578485fd5b612684826020830160208701612fca565b9695505050505050565b60006020828403121561269f578081fd5b5035919050565b6000602082840312156126b7578081fd5b5051919050565b600080604083850312156126d0578182fd5b8235915060208301356126e281612ffa565b809150509250929050565b600080600060608486031215612701578283fd5b83359250602084013561271381612ffa565b9150604084013561272381612ffa565b809150509250925092565b60008060408385031215612740578182fd5b50508035926020909101359150565b60008060008060808587031215612764578384fd5b8435935060208501359250604085013561277d81612ffa565b9150606085013561278d8161300f565b939692955090935050565b600081518084526127b0816020860160208601612fca565b601f01601f19169290920160200192915050565b600082516127d6818460208701612fca565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b0383168152604060208201819052600090611ecb90830184612798565b6001600160a01b039586168152602081019490945260408401929092526060830152909116608082015260a00190565b6020808252601c908201527f426f72696e6745524332303a205472616e73666572206661696c656400000000604082015260600190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b6020808252602b908201527f527562794d6173746572436865663a20496e76616c696420527562795374616b60408201526a32b91030b2323932b9b99760a91b606082015260800190565b6020808252602a908201527f736574527562795374616b65723a20696e76616c69642072756279206d696e746040820152696572206164647265737360b01b606082015260800190565b60208082526029908201527f736574547265617375727950657263656e743a20696e76616c69642070657263604082015268656e742076616c756560b81b606082015260800190565b6020808252601e908201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604082015260600190565b6020808252601a908201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604082015260600190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252602f908201527f527562794d6173746572436865663a204e6f7420656e6f7567682062616c616e60408201526e31b2903a37903bb4ba34323930bb9760891b606082015260800190565b6020808252602a908201527f527562794d6173746572436865663a20496e76616c69642052756279546f6b65604082015269371030b2323932b9b99760b11b606082015260800190565b6020808252602b908201527f527562794d6173746572436865663a20496e76616c696420776974686472617760408201526a30b61030b2323932b9b99760a91b606082015260800190565b60208082526029908201527f527562794d6173746572436865663a20496e76616c69642074726561737572796040820152681030b2323932b9b99760b91b606082015260800190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6040820152607760f81b606082015260800190565b6020808252601590820152741859190e88131408185b1c9958591e481859191959605a1b604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252603e908201527f7365745472656173757279416464723a206e6f7420656e6f756768207065726d60408201527f697373696f6e7320746f2065786563757465207468697320616374696f6e0000606082015260800190565b6020808252602a908201527f527562794d6173746572436865663a20496e76616c696420776974686472617760408201526930b61030b6b7bab73a1760b11b606082015260800190565b60208082526026908201527f6164643a204c5020746f6b656e206d75737420626520612076616c696420636f6040820152651b9d1c9858dd60d21b606082015260800190565b6020808252601290820152711dda5d1a191c985dce881b9bdd0819dbdbd960721b604082015260600190565b60208082526026908201527f7365743a207265776172646572206d75737420626520636f6e7472616374206f60408201526572207a65726f60d01b606082015260800190565b60208082526026908201527f6164643a207265776172646572206d75737420626520636f6e7472616374206f60408201526572207a65726f60d01b606082015260800190565b6020808252818101527f426f72696e6745524332303a205472616e7366657246726f6d206661696c6564604082015260600190565b6020808252602d908201527f527562794d6173746572436865663a20496e76616c696420656d697373696f6e60408201526c103930ba329030b6b7bab73a1760991b606082015260800190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b6020808252602f908201527f527562794d6173746572436865663a20696e76616c696420747265617375727960408201526e103832b931b2b73a103b30b63ab29760891b606082015260800190565b90815260200190565b8481526001600160a01b0384166020820152608060408201819052600090612f8590830185612798565b905082606083015295945050505050565b9182521515602082015260400190565b918252602082015260400190565b9283526020830191909152604082015260600190565b60005b83811015612fe5578181015183820152602001612fcd565b83811115612ff4576000848401525b50505050565b6001600160a01b0381168114610b2857600080fd5b8015158114610b2857600080fdfea2646970667358221220f35a6033753a93b33fc0f6d3f3db18cec5356b9c86bdc2c731df10b81bed916b64736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "emergencyWithdrawRubyTokens(address,uint256)": {
        "notice": "Owner should be able to withdraw all the Reward tokens in case of emergency. The owner should be able to withdraw the tokens to himself or another address The RubyMasterChef contract will be placed behind a timelock, and the owner/deployer will be a multisig, so this should not raise trust concerns. This function is needed because the RubyMasterChef will be pre-fed with all of the reward tokens (RUBY) tokens dedicated for liquidity mining incentives, and in case of unfortunate situation they should be retreived."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 705,
        "contract": "contracts/RubyMasterChef.sol:RubyMasterChef",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 708,
        "contract": "contracts/RubyMasterChef.sol:RubyMasterChef",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 2910,
        "contract": "contracts/RubyMasterChef.sol:RubyMasterChef",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 136,
        "contract": "contracts/RubyMasterChef.sol:RubyMasterChef",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 255,
        "contract": "contracts/RubyMasterChef.sol:RubyMasterChef",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 4090,
        "contract": "contracts/RubyMasterChef.sol:RubyMasterChef",
        "label": "_status",
        "offset": 0,
        "slot": "101",
        "type": "t_uint256"
      },
      {
        "astId": 4133,
        "contract": "contracts/RubyMasterChef.sol:RubyMasterChef",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 10386,
        "contract": "contracts/RubyMasterChef.sol:RubyMasterChef",
        "label": "RUBY",
        "offset": 0,
        "slot": "151",
        "type": "t_contract(IERC20)6417"
      },
      {
        "astId": 10388,
        "contract": "contracts/RubyMasterChef.sol:RubyMasterChef",
        "label": "rubyStaker",
        "offset": 0,
        "slot": "152",
        "type": "t_contract(IRubyStaker)19965"
      },
      {
        "astId": 10390,
        "contract": "contracts/RubyMasterChef.sol:RubyMasterChef",
        "label": "treasuryAddr",
        "offset": 0,
        "slot": "153",
        "type": "t_address"
      },
      {
        "astId": 10392,
        "contract": "contracts/RubyMasterChef.sol:RubyMasterChef",
        "label": "rubyPerSec",
        "offset": 0,
        "slot": "154",
        "type": "t_uint256"
      },
      {
        "astId": 10394,
        "contract": "contracts/RubyMasterChef.sol:RubyMasterChef",
        "label": "treasuryPercent",
        "offset": 0,
        "slot": "155",
        "type": "t_uint256"
      },
      {
        "astId": 10397,
        "contract": "contracts/RubyMasterChef.sol:RubyMasterChef",
        "label": "poolInfo",
        "offset": 0,
        "slot": "156",
        "type": "t_array(t_struct(PoolInfo)10384_storage)dyn_storage"
      },
      {
        "astId": 10399,
        "contract": "contracts/RubyMasterChef.sol:RubyMasterChef",
        "label": "lpTokens",
        "offset": 0,
        "slot": "157",
        "type": "t_struct(AddressSet)9001_storage"
      },
      {
        "astId": 10405,
        "contract": "contracts/RubyMasterChef.sol:RubyMasterChef",
        "label": "userInfo",
        "offset": 0,
        "slot": "159",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)10373_storage))"
      },
      {
        "astId": 10407,
        "contract": "contracts/RubyMasterChef.sol:RubyMasterChef",
        "label": "totalAllocPoint",
        "offset": 0,
        "slot": "160",
        "type": "t_uint256"
      },
      {
        "astId": 10412,
        "contract": "contracts/RubyMasterChef.sol:RubyMasterChef",
        "label": "startTimestamp",
        "offset": 0,
        "slot": "161",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(PoolInfo)10384_storage)dyn_storage": {
        "base": "t_struct(PoolInfo)10384_storage",
        "encoding": "dynamic_array",
        "label": "struct RubyMasterChef.PoolInfo[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20)6417": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IRubyMasterChefRewarder)19819": {
        "encoding": "inplace",
        "label": "contract IRubyMasterChefRewarder",
        "numberOfBytes": "20"
      },
      "t_contract(IRubyStaker)19965": {
        "encoding": "inplace",
        "label": "contract IRubyStaker",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(UserInfo)10373_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct RubyMasterChef.UserInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(UserInfo)10373_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)10373_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => struct RubyMasterChef.UserInfo))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(UserInfo)10373_storage)"
      },
      "t_struct(AddressSet)9001_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 9000,
            "contract": "contracts/RubyMasterChef.sol:RubyMasterChef",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)8736_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(PoolInfo)10384_storage": {
        "encoding": "inplace",
        "label": "struct RubyMasterChef.PoolInfo",
        "members": [
          {
            "astId": 10375,
            "contract": "contracts/RubyMasterChef.sol:RubyMasterChef",
            "label": "lpToken",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(IERC20)6417"
          },
          {
            "astId": 10377,
            "contract": "contracts/RubyMasterChef.sol:RubyMasterChef",
            "label": "allocPoint",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 10379,
            "contract": "contracts/RubyMasterChef.sol:RubyMasterChef",
            "label": "lastRewardTimestamp",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 10381,
            "contract": "contracts/RubyMasterChef.sol:RubyMasterChef",
            "label": "accRubyPerShare",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 10383,
            "contract": "contracts/RubyMasterChef.sol:RubyMasterChef",
            "label": "rewarder",
            "offset": 0,
            "slot": "4",
            "type": "t_contract(IRubyMasterChefRewarder)19819"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(Set)8736_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 8731,
            "contract": "contracts/RubyMasterChef.sol:RubyMasterChef",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 8735,
            "contract": "contracts/RubyMasterChef.sol:RubyMasterChef",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(UserInfo)10373_storage": {
        "encoding": "inplace",
        "label": "struct RubyMasterChef.UserInfo",
        "members": [
          {
            "astId": 10370,
            "contract": "contracts/RubyMasterChef.sol:RubyMasterChef",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 10372,
            "contract": "contracts/RubyMasterChef.sol:RubyMasterChef",
            "label": "rewardDebt",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}