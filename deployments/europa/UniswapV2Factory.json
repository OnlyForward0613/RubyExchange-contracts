{
  "address": "0x71f7BbbB33550fa5d70CA3F7eeAD87529f2DC3C8",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_admin",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "swapper",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "allowance",
          "type": "bool"
        }
      ],
      "name": "FeeDecutionSwapperSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "newFeeTo",
          "type": "address"
        }
      ],
      "name": "FeeToRecipientSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token0",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token1",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "pair",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "PairCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "pairCreator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "allowance",
          "type": "bool"
        }
      ],
      "name": "PairCreatorSet",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "admin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "allPairs",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "allPairsLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        }
      ],
      "name": "createPair",
      "outputs": [
        {
          "internalType": "address",
          "name": "pair",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "feeDeductionSwappers",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeTo",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "getPair",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pairCodeHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "pairCreators",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "setAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "feeDeductionSwapper",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "allowance",
          "type": "bool"
        }
      ],
      "name": "setFeeDeductionSwapper",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newFeeTo",
          "type": "address"
        }
      ],
      "name": "setFeeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pairCreator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "allowance",
          "type": "bool"
        }
      ],
      "name": "setPairCreator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xde4cd5545369b76d934319a949aa172e11a9a0b27a60ae4a9bc4f87f42d938aa",
  "receipt": {
    "to": "0x0000000000000000000000000000000000000000",
    "from": "0x0fe812C977646525E824D5dCC3f37A0Cf153B13b",
    "contractAddress": "0x71f7BbbB33550fa5d70CA3F7eeAD87529f2DC3C8",
    "transactionIndex": 0,
    "gasUsed": "2673414",
    "logsBloom": "0x
    "blockHash": "0x9fa896d0b4f0ac52f01f5574a52e85a87372951d2b632cfb92536a03f0a8bf59",
    "transactionHash": "0xde4cd5545369b76d934319a949aa172e11a9a0b27a60ae4a9bc4f87f42d938aa",
    "logs": [],
    "blockNumber": 50404,
    "cumulativeGasUsed": "2673414",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x0fe812C977646525E824D5dCC3f37A0Cf153B13b"
  ],
  "numDeployments": 1,
  "solcInputHash": "84365ab8d29d1f2e1920f6a039f9f4be",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"swapper\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"allowance\",\"type\":\"bool\"}],\"name\":\"FeeDecutionSwapperSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newFeeTo\",\"type\":\"address\"}],\"name\":\"FeeToRecipientSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"PairCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pairCreator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"allowance\",\"type\":\"bool\"}],\"name\":\"PairCreatorSet\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allPairs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allPairsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"}],\"name\":\"createPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"feeDeductionSwappers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeTo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"getPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pairCodeHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pairCreators\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeDeductionSwapper\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"allowance\",\"type\":\"bool\"}],\"name\":\"setFeeDeductionSwapper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newFeeTo\",\"type\":\"address\"}],\"name\":\"setFeeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pairCreator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"allowance\",\"type\":\"bool\"}],\"name\":\"setPairCreator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/amm/UniswapV2Factory.sol\":\"UniswapV2Factory\"},\"evmVersion\":\"istanbul\",\"libraries\":{\"__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/amm/UniswapV2ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity =0.6.12;\\n\\nimport \\\"./libraries/SafeMath.sol\\\";\\n\\ncontract UniswapV2ERC20 {\\n    using SafeMathUniswap for uint256;\\n\\n    string public constant name = \\\"Ruby LP Token\\\";\\n    string public constant symbol = \\\"RLP\\\";\\n    uint8 public constant decimals = 18;\\n    uint256 public totalSupply;\\n    mapping(address => uint256) public balanceOf;\\n    mapping(address => mapping(address => uint256)) public allowance;\\n\\n    bytes32 public DOMAIN_SEPARATOR;\\n    // keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n    bytes32 public constant PERMIT_TYPEHASH = 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\\n    mapping(address => uint256) public nonces;\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    constructor() public {\\n        uint256 chainId;\\n        assembly {\\n            chainId := chainid()\\n        }\\n        DOMAIN_SEPARATOR = keccak256(\\n            abi.encode(\\n                keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"),\\n                keccak256(bytes(name)),\\n                keccak256(bytes(\\\"1\\\")),\\n                chainId,\\n                address(this)\\n            )\\n        );\\n    }\\n\\n    function _mint(address to, uint256 value) internal {\\n        totalSupply = totalSupply.add(value);\\n        balanceOf[to] = balanceOf[to].add(value);\\n        emit Transfer(address(0), to, value);\\n    }\\n\\n    function _burn(address from, uint256 value) internal {\\n        balanceOf[from] = balanceOf[from].sub(value);\\n        totalSupply = totalSupply.sub(value);\\n        emit Transfer(from, address(0), value);\\n    }\\n\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 value\\n    ) private {\\n        allowance[owner][spender] = value;\\n        emit Approval(owner, spender, value);\\n    }\\n\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) private {\\n        balanceOf[from] = balanceOf[from].sub(value);\\n        balanceOf[to] = balanceOf[to].add(value);\\n        emit Transfer(from, to, value);\\n    }\\n\\n    function approve(address spender, uint256 value) external returns (bool) {\\n        _approve(msg.sender, spender, value);\\n        return true;\\n    }\\n\\n    function transfer(address to, uint256 value) external returns (bool) {\\n        _transfer(msg.sender, to, value);\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external returns (bool) {\\n        if (allowance[from][msg.sender] != uint256(-1)) {\\n            allowance[from][msg.sender] = allowance[from][msg.sender].sub(value);\\n        }\\n        _transfer(from, to, value);\\n        return true;\\n    }\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external {\\n        require(deadline >= block.timestamp, \\\"UniswapV2: EXPIRED\\\");\\n        bytes32 digest = keccak256(\\n            abi.encodePacked(\\n                \\\"\\\\x19\\\\x01\\\",\\n                DOMAIN_SEPARATOR,\\n                keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, nonces[owner]++, deadline))\\n            )\\n        );\\n        address recoveredAddress = ecrecover(digest, v, r, s);\\n        require(recoveredAddress != address(0) && recoveredAddress == owner, \\\"UniswapV2: INVALID_SIGNATURE\\\");\\n        _approve(owner, spender, value);\\n    }\\n}\\n\",\"keccak256\":\"0x8b87fa35430be30827a4538aa1e0b7265ab424f15f34657189d17e49071cc6e8\",\"license\":\"GPL-3.0\"},\"contracts/amm/UniswapV2Factory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity =0.6.12;\\n\\nimport \\\"./interfaces/IUniswapV2Factory.sol\\\";\\nimport \\\"./UniswapV2Pair.sol\\\";\\n\\ncontract UniswapV2Factory is IUniswapV2Factory {\\n    address public override feeTo;\\n    address public override admin;\\n\\n    // A mapping used to determine who can create pairs\\n    mapping(address => bool) public override pairCreators;\\n\\n    // A mapping used to determine who can swap with fee deduction\\n    // (used for the UniswapV2Pair pairs). Only the RubyRouter at first.\\n    mapping(address => bool) public override feeDeductionSwappers;\\n\\n    mapping(address => mapping(address => address)) public override getPair;\\n    address[] public override allPairs;\\n\\n    constructor(address _admin) public {\\n        require(_admin != address(0), \\\"UniswapV2: INVALID_INIT_ARG\\\");\\n        admin = _admin;\\n    }\\n\\n    function allPairsLength() external view override returns (uint256) {\\n        return allPairs.length;\\n    }\\n\\n    function pairCodeHash() external pure returns (bytes32) {\\n        return keccak256(type(UniswapV2Pair).creationCode);\\n    }\\n\\n    function createPair(address tokenA, address tokenB) external override returns (address pair) {\\n        require(pairCreators[msg.sender], \\\"UniswapV2: FORBIDDEN\\\");\\n        require(tokenA != tokenB, \\\"UniswapV2: IDENTICAL_ADDRESSES\\\");\\n        (address token0, address token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\\n        require(token0 != address(0), \\\"UniswapV2: ZERO_ADDRESS\\\");\\n        require(getPair[token0][token1] == address(0), \\\"UniswapV2: PAIR_EXISTS\\\"); // single check is sufficient\\n        bytes memory bytecode = type(UniswapV2Pair).creationCode;\\n        bytes32 salt = keccak256(abi.encodePacked(token0, token1));\\n        assembly {\\n            pair := create2(0, add(bytecode, 32), mload(bytecode), salt)\\n        }\\n        UniswapV2Pair(pair).initialize(token0, token1);\\n        getPair[token0][token1] = pair;\\n        getPair[token1][token0] = pair; // populate mapping in the reverse direction\\n        allPairs.push(pair);\\n        emit PairCreated(token0, token1, pair, allPairs.length);\\n    }\\n\\n    function setFeeTo(address newFeeTo) external override {\\n        require(msg.sender == admin, \\\"UniswapV2: FORBIDDEN\\\");\\n        feeTo = newFeeTo;\\n        emit FeeToRecipientSet(newFeeTo);\\n    }\\n\\n    function setPairCreator(address pairCreator, bool allowance) external override {\\n        require(msg.sender == admin, \\\"UniswapV2: FORBIDDEN\\\");\\n        require(pairCreator != address(0), \\\"UniswapV2: INVALID_INIT_ARG\\\");\\n\\n        pairCreators[pairCreator] = allowance;\\n        emit PairCreatorSet(pairCreator, allowance);\\n    }\\n\\n    function setFeeDeductionSwapper(address feeDeductionSwapper, bool allowance) external override {\\n        require(msg.sender == admin, \\\"UniswapV2: FORBIDDEN\\\");\\n        require(feeDeductionSwapper != address(0), \\\"UniswapV2: INVALID_INIT_ARG\\\");\\n\\n        feeDeductionSwappers[feeDeductionSwapper] = allowance;\\n        emit FeeDecutionSwapperSet(feeDeductionSwapper, allowance);\\n    }\\n\\n    function setAdmin(address newAdmin) external override {\\n        require(msg.sender == admin, \\\"UniswapV2: FORBIDDEN\\\");\\n        require(newAdmin != address(0), \\\"UniswapV2: INVALID_INIT_ARG\\\");\\n        \\n        admin = newAdmin;\\n        emit AdminSet(newAdmin);\\n    }\\n}\\n\",\"keccak256\":\"0x59092edfef01e340413626f0106fa8160c79f6a1bebb41cf3853cd560ca0e915\",\"license\":\"GPL-3.0\"},\"contracts/amm/UniswapV2Pair.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity =0.6.12;\\n\\nimport \\\"./UniswapV2ERC20.sol\\\";\\nimport \\\"./libraries/Math.sol\\\";\\nimport \\\"./libraries/UQ112x112.sol\\\";\\nimport \\\"./interfaces/IERC20.sol\\\";\\nimport \\\"./interfaces/IUniswapV2Factory.sol\\\";\\nimport \\\"./interfaces/IUniswapV2Callee.sol\\\";\\n\\ncontract UniswapV2Pair is UniswapV2ERC20 {\\n    using SafeMathUniswap for uint256;\\n    using UQ112x112 for uint224;\\n\\n    uint256 public constant MINIMUM_LIQUIDITY = 10**3;\\n    bytes4 private constant SELECTOR = bytes4(keccak256(bytes(\\\"transfer(address,uint256)\\\")));\\n\\n    address public factory;\\n    address public token0;\\n    address public token1;\\n\\n    uint112 private reserve0; // uses single storage slot, accessible via getReserves\\n    uint112 private reserve1; // uses single storage slot, accessible via getReserves\\n    uint32 private blockTimestampLast; // uses single storage slot, accessible via getReserves\\n\\n    uint256 public price0CumulativeLast;\\n    uint256 public price1CumulativeLast;\\n    uint256 public kLast; // reserve0 * reserve1, as of immediately after the most recent liquidity event\\n\\n    uint256 private unlocked = 1;\\n    modifier lock() {\\n        require(unlocked == 1, \\\"UniswapV2: LOCKED\\\");\\n        unlocked = 0;\\n        _;\\n        unlocked = 1;\\n    }\\n\\n    function getReserves()\\n        public\\n        view\\n        returns (\\n            uint112 _reserve0,\\n            uint112 _reserve1,\\n            uint32 _blockTimestampLast\\n        )\\n    {\\n        _reserve0 = reserve0;\\n        _reserve1 = reserve1;\\n        _blockTimestampLast = blockTimestampLast;\\n    }\\n\\n    function _safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) private {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(SELECTOR, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"UniswapV2: TRANSFER_FAILED\\\");\\n    }\\n\\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\\n    event Burn(address indexed sender, uint256 amount0, uint256 amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint256 amount0In,\\n        uint256 amount1In,\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    constructor() public {\\n        factory = msg.sender;\\n    }\\n\\n    // called once by the factory at time of deployment\\n    function initialize(address _token0, address _token1) external {\\n        require(msg.sender == factory, \\\"UniswapV2: FORBIDDEN\\\"); // sufficient check\\n        token0 = _token0;\\n        token1 = _token1;\\n    }\\n\\n    // update reserves and, on the first call per block, price accumulators\\n    function _update(\\n        uint256 balance0,\\n        uint256 balance1,\\n        uint112 _reserve0,\\n        uint112 _reserve1\\n    ) private {\\n        require(balance0 <= uint112(-1) && balance1 <= uint112(-1), \\\"UniswapV2: OVERFLOW\\\");\\n        uint32 blockTimestamp = uint32(block.timestamp % 2**32);\\n        uint32 timeElapsed = blockTimestamp - blockTimestampLast; // overflow is desired\\n        if (timeElapsed > 0 && _reserve0 != 0 && _reserve1 != 0) {\\n            // * never overflows, and + overflow is desired\\n            price0CumulativeLast += uint256(UQ112x112.encode(_reserve1).uqdiv(_reserve0)) * timeElapsed;\\n            price1CumulativeLast += uint256(UQ112x112.encode(_reserve0).uqdiv(_reserve1)) * timeElapsed;\\n        }\\n        reserve0 = uint112(balance0);\\n        reserve1 = uint112(balance1);\\n        blockTimestampLast = blockTimestamp;\\n        emit Sync(reserve0, reserve1);\\n    }\\n\\n    // if fee is on, mint liquidity equivalent to 1/6th of the growth in sqrt(k)\\n    function _mintFee(uint112 _reserve0, uint112 _reserve1) private returns (bool feeOn) {\\n        address feeTo = IUniswapV2Factory(factory).feeTo();\\n        feeOn = feeTo != address(0);\\n        uint256 _kLast = kLast; // gas savings\\n        if (feeOn) {\\n            if (_kLast != 0) {\\n                uint256 rootK = Math.sqrt(uint256(_reserve0).mul(_reserve1));\\n                uint256 rootKLast = Math.sqrt(_kLast);\\n                if (rootK > rootKLast) {\\n                    uint256 numerator = totalSupply.mul(rootK.sub(rootKLast));\\n                    uint256 denominator = rootK.mul(5).add(rootKLast);\\n                    uint256 liquidity = numerator / denominator;\\n                    if (liquidity > 0) _mint(feeTo, liquidity);\\n                }\\n            }\\n        } else if (_kLast != 0) {\\n            kLast = 0;\\n        }\\n    }\\n\\n    // this low-level function should be called from a contract which performs important safety checks\\n    function mint(address to) external lock returns (uint256 liquidity) {\\n        (uint112 _reserve0, uint112 _reserve1, ) = getReserves(); // gas savings\\n        uint256 balance0 = IERC20Uniswap(token0).balanceOf(address(this));\\n        uint256 balance1 = IERC20Uniswap(token1).balanceOf(address(this));\\n        uint256 amount0 = balance0.sub(_reserve0);\\n        uint256 amount1 = balance1.sub(_reserve1);\\n\\n        bool feeOn = _mintFee(_reserve0, _reserve1);\\n        // gas savings, must be defined here since totalSupply can update in _mintFee\\n        uint256 _totalSupply = totalSupply;\\n        if (_totalSupply == 0) {\\n            liquidity = Math.sqrt(amount0.mul(amount1)).sub(MINIMUM_LIQUIDITY);\\n            _mint(address(0), MINIMUM_LIQUIDITY); // permanently lock the first MINIMUM_LIQUIDITY tokens\\n        } else {\\n            liquidity = Math.min(amount0.mul(_totalSupply) / _reserve0, amount1.mul(_totalSupply) / _reserve1);\\n        }\\n        require(liquidity > 0, \\\"UniswapV2: INSUFFICIENT_LIQUIDITY_MINTED\\\");\\n        _mint(to, liquidity);\\n\\n        _update(balance0, balance1, _reserve0, _reserve1);\\n        if (feeOn) kLast = uint256(reserve0).mul(reserve1); // reserve0 and reserve1 are up-to-date\\n        emit Mint(msg.sender, amount0, amount1);\\n    }\\n\\n    // this low-level function should be called from a contract which performs important safety checks\\n    function burn(address to) external lock returns (uint256 amount0, uint256 amount1) {\\n        (uint112 _reserve0, uint112 _reserve1, ) = getReserves(); // gas savings\\n        address _token0 = token0; // gas savings\\n        address _token1 = token1; // gas savings\\n        uint256 balance0 = IERC20Uniswap(_token0).balanceOf(address(this));\\n        uint256 balance1 = IERC20Uniswap(_token1).balanceOf(address(this));\\n        uint256 liquidity = balanceOf[address(this)];\\n\\n        bool feeOn = _mintFee(_reserve0, _reserve1);\\n        // gas savings, must be defined here since totalSupply can update in _mintFee\\n        uint256 _totalSupply = totalSupply;\\n        amount0 = liquidity.mul(balance0) / _totalSupply; // using balances ensures pro-rata distribution\\n        amount1 = liquidity.mul(balance1) / _totalSupply; // using balances ensures pro-rata distribution\\n        require(amount0 > 0 && amount1 > 0, \\\"UniswapV2: INSUFFICIENT_LIQUIDITY_BURNED\\\");\\n        _burn(address(this), liquidity);\\n        _safeTransfer(_token0, to, amount0);\\n        _safeTransfer(_token1, to, amount1);\\n        balance0 = IERC20Uniswap(_token0).balanceOf(address(this));\\n        balance1 = IERC20Uniswap(_token1).balanceOf(address(this));\\n\\n        _update(balance0, balance1, _reserve0, _reserve1);\\n        if (feeOn) kLast = uint256(reserve0).mul(reserve1); // reserve0 and reserve1 are up-to-date\\n        emit Burn(msg.sender, amount0, amount1, to);\\n    }\\n\\n    // this low-level function should be called from a contract which performs important safety checks\\n    function swap(\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address to,\\n        uint256 feeMultiplier,\\n        bytes calldata data\\n    ) external lock {\\n        require(amount0Out > 0 || amount1Out > 0, \\\"UniswapV2: INSUFFICIENT_OUTPUT_AMOUNT\\\");\\n        (uint112 _reserve0, uint112 _reserve1, ) = getReserves(); // gas savings\\n        require(amount0Out < _reserve0 && amount1Out < _reserve1, \\\"UniswapV2: INSUFFICIENT_LIQUIDITY\\\");\\n        require(feeMultiplier >= 997 && feeMultiplier <= 1000, \\\"UniswapV2: FEE_MULTIPLIER\\\");\\n\\n        // if the msg.sender is not whitelisted swapper for fee dedductions\\n        // - apply the regular fee multiplier of 997 (30 bps)\\n        if(!IUniswapV2Factory(factory).feeDeductionSwappers(msg.sender)) {\\n            feeMultiplier = 997;\\n        }\\n\\n        uint256 balance0;\\n        uint256 balance1;\\n        {\\n            // scope for _token{0,1}, avoids stack too deep errors\\n            address _token0 = token0;\\n            address _token1 = token1;\\n            require(to != _token0 && to != _token1, \\\"UniswapV2: INVALID_TO\\\");\\n            if (amount0Out > 0) _safeTransfer(_token0, to, amount0Out); // optimistically transfer tokens\\n            if (amount1Out > 0) _safeTransfer(_token1, to, amount1Out); // optimistically transfer tokens\\n            if (data.length > 0) IUniswapV2Callee(to).uniswapV2Call(msg.sender, amount0Out, amount1Out, data);\\n            balance0 = IERC20Uniswap(_token0).balanceOf(address(this));\\n            balance1 = IERC20Uniswap(_token1).balanceOf(address(this));\\n        }\\n        // function split to avoid stack too deep errors\\n        _updateSwap(balance0, balance1, amount0Out, amount1Out, to, feeMultiplier);\\n    }\\n\\n    function _updateSwap(\\n        uint256 balance0,\\n        uint256 balance1,\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address to,\\n        uint256 feeMultiplier\\n    ) private {\\n        (uint112 _reserve0, uint112 _reserve1, ) = getReserves(); // gas savings\\n        uint256 amount0In = balance0 > _reserve0 - amount0Out ? balance0 - (_reserve0 - amount0Out) : 0;\\n        uint256 amount1In = balance1 > _reserve1 - amount1Out ? balance1 - (_reserve1 - amount1Out) : 0;\\n        require(amount0In > 0 || amount1In > 0, \\\"UniswapV2: INSUFFICIENT_INPUT_AMOUNT\\\");\\n        // scope for reserve{0,1}Adjusted, avoids stack too deep errors\\n        uint256 feeBpAmount = 1000 - feeMultiplier; // fee basis points\\n        uint256 balance0Adjusted = balance0.mul(1000).sub(amount0In.mul(feeBpAmount));\\n        uint256 balance1Adjusted = balance1.mul(1000).sub(amount1In.mul(feeBpAmount));\\n        require(balance0Adjusted.mul(balance1Adjusted) >= uint256(reserve0).mul(reserve1).mul(1000**2), \\\"UniswapV2: K\\\");\\n        _update(balance0, balance1, _reserve0, _reserve1);\\n        emit Swap(msg.sender, amount0In, amount1In, amount0Out, amount1Out, to);\\n    }\\n\\n    // force balances to match reserves\\n    function skim(address to) external lock {\\n        address _token0 = token0; // gas savings\\n        address _token1 = token1; // gas savings\\n        _safeTransfer(_token0, to, IERC20Uniswap(_token0).balanceOf(address(this)).sub(reserve0));\\n        _safeTransfer(_token1, to, IERC20Uniswap(_token1).balanceOf(address(this)).sub(reserve1));\\n    }\\n\\n    // force reserves to match balances\\n    function sync() external lock {\\n        _update(\\n            IERC20Uniswap(token0).balanceOf(address(this)),\\n            IERC20Uniswap(token1).balanceOf(address(this)),\\n            reserve0,\\n            reserve1\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x66cedfd4cabbfca56da34784a2b066e36a906151b3176e66a2b68f717adcc689\",\"license\":\"GPL-3.0\"},\"contracts/amm/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.5.0;\\n\\ninterface IERC20Uniswap {\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function decimals() external view returns (uint8);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address owner) external view returns (uint256);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0xee0204e92d995e20669f586994660cd2fe92cbd5218483b85146a38a3f505466\",\"license\":\"GPL-3.0\"},\"contracts/amm/interfaces/IUniswapV2Callee.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Callee {\\n    function uniswapV2Call(\\n        address sender,\\n        uint256 amount0,\\n        uint256 amount1,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x69fb42b4d19827c2b385eb843e0c0fec92e1a3904bed1a78ec3ccacd993cbeb4\",\"license\":\"GPL-3.0\"},\"contracts/amm/interfaces/IUniswapV2Factory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Factory {\\n\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint256);\\n    event AdminSet(address indexed newAdmin);\\n    event FeeToRecipientSet(address indexed newFeeTo);\\n    event PairCreatorSet(address indexed pairCreator, bool allowance);\\n    event FeeDecutionSwapperSet(address indexed swapper, bool allowance);\\n\\n    function feeTo() external view returns (address);\\n\\n    function admin() external view returns (address);\\n\\n    function pairCreators(address) external view returns (bool);\\n\\n    function feeDeductionSwappers(address) external view returns (bool);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n\\n    function allPairs(uint256) external view returns (address pair);\\n\\n    function allPairsLength() external view returns (uint256);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address newFeeTo) external;\\n\\n    function setPairCreator(address pairCreator, bool allowance) external;\\n\\n    function setFeeDeductionSwapper(address feeDeductionSwapper, bool allowance) external;\\n\\n    function setAdmin(address newAdmin) external;\\n}\\n\",\"keccak256\":\"0xbc812c2f059f5b1474e1ffae148fc77f603bf62b87f3a0f86ea6451a1aa2301a\",\"license\":\"GPL-3.0\"},\"contracts/amm/libraries/Math.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity =0.6.12;\\n\\n// a library for performing various math operations\\n\\nlibrary Math {\\n    function min(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = x < y ? x : y;\\n    }\\n\\n    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\\n    function sqrt(uint256 y) internal pure returns (uint256 z) {\\n        if (y > 3) {\\n            z = y;\\n            uint256 x = y / 2 + 1;\\n            while (x < z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x183fe2327968b823f987cceadb2089442a922e4fcd062294ad5f68ca448fd293\",\"license\":\"GPL-3.0\"},\"contracts/amm/libraries/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity =0.6.12;\\n\\n// a library for performing overflow-safe math, courtesy of DappHub (https://github.com/dapphub/ds-math)\\n\\nlibrary SafeMathUniswap {\\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require((z = x + y) >= x, \\\"ds-math-add-overflow\\\");\\n    }\\n\\n    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require((z = x - y) <= x, \\\"ds-math-sub-underflow\\\");\\n    }\\n\\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require(y == 0 || (z = x * y) / y == x, \\\"ds-math-mul-overflow\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x74e9a209f55cb2930a84eeec3df3bba635abefc49a2a9b5e1c398a07c8ec15e1\",\"license\":\"GPL-3.0\"},\"contracts/amm/libraries/UQ112x112.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity =0.6.12;\\n\\n// a library for handling binary fixed point numbers (https://en.wikipedia.org/wiki/Q_(number_format))\\n\\n// range: [0, 2**112 - 1]\\n// resolution: 1 / 2**112\\n\\nlibrary UQ112x112 {\\n    uint224 constant Q112 = 2**112;\\n\\n    // encode a uint112 as a UQ112x112\\n    function encode(uint112 y) internal pure returns (uint224 z) {\\n        z = uint224(y) * Q112; // never overflows\\n    }\\n\\n    // divide a UQ112x112 by a uint112, returning a UQ112x112\\n    function uqdiv(uint224 x, uint112 y) internal pure returns (uint224 z) {\\n        z = x / uint224(y);\\n    }\\n}\\n\",\"keccak256\":\"0xc4574ee73aa220d7a8b363ef7c874c099b6007b0f30365993e758c8337a294d8\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50604051612fb6380380612fb68339818101604052602081101561003357600080fd5b50516001600160a01b038116610090576040805162461bcd60e51b815260206004820152601b60248201527f556e697377617056323a20494e56414c49445f494e49545f4152470000000000604482015290519081900360640190fd5b600180546001600160a01b0319166001600160a01b0392909216919091179055612ef7806100bf6000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c80639aab92481161008c578063e6a4390511610066578063e6a439051461021b578063f46901ed14610249578063f851a4401461026f578063f9eb062214610277576100cf565b80639aab9248146101bf578063c219b5ba146101c7578063c9c65396146101ed576100cf565b8063017e7e58146100d4578063198c7f31146100f85780631e3dd18b146101285780634e1516fa14610145578063574f2ba31461017f578063704b6c0214610199575b600080fd5b6100dc6102a5565b604080516001600160a01b039092168252519081900360200190f35b6101266004803603604081101561010e57600080fd5b506001600160a01b03813516906020013515156102b4565b005b6100dc6004803603602081101561013e57600080fd5b50356103c5565b61016b6004803603602081101561015b57600080fd5b50356001600160a01b03166103ec565b604080519115158252519081900360200190f35b610187610401565b60408051918252519081900360200190f35b610126600480360360208110156101af57600080fd5b50356001600160a01b0316610407565b610187610502565b61016b600480360360208110156101dd57600080fd5b50356001600160a01b0316610534565b6100dc6004803603604081101561020357600080fd5b506001600160a01b0381358116916020013516610549565b6100dc6004803603604081101561023157600080fd5b506001600160a01b03813581169160200135166108cd565b6101266004803603602081101561025f57600080fd5b50356001600160a01b03166108f3565b6100dc610991565b6101266004803603604081101561028d57600080fd5b506001600160a01b03813516906020013515156109a0565b6000546001600160a01b031681565b6001546001600160a01b0316331461030a576040805162461bcd60e51b81526020600482015260146024820152732ab734b9bbb0b82b191d102327a92124a22222a760611b604482015290519081900360640190fd5b6001600160a01b038216610365576040805162461bcd60e51b815260206004820152601b60248201527f556e697377617056323a20494e56414c49445f494e49545f4152470000000000604482015290519081900360640190fd5b6001600160a01b038216600081815260026020908152604091829020805460ff1916851515908117909155825190815291517f7cdc2ba0ffcd869706e55b136a056e5a3cdbf866b93e226eea08d882a826363d9281900390910190a25050565b600581815481106103d257fe5b6000918252602090912001546001600160a01b0316905081565b60026020526000908152604090205460ff1681565b60055490565b6001546001600160a01b0316331461045d576040805162461bcd60e51b81526020600482015260146024820152732ab734b9bbb0b82b191d102327a92124a22222a760611b604482015290519081900360640190fd5b6001600160a01b0381166104b8576040805162461bcd60e51b815260206004820152601b60248201527f556e697377617056323a20494e56414c49445f494e49545f4152470000000000604482015290519081900360640190fd5b600180546001600160a01b0319166001600160a01b0383169081179091556040517f8fe72c3e0020beb3234e76ae6676fa576fbfcae600af1c4fea44784cf0db329c90600090a250565b60006040518060200161051490610ab1565b6020820181038252601f19601f8201166040525080519060200120905090565b60036020526000908152604090205460ff1681565b3360009081526002602052604081205460ff166105a4576040805162461bcd60e51b81526020600482015260146024820152732ab734b9bbb0b82b191d102327a92124a22222a760611b604482015290519081900360640190fd5b816001600160a01b0316836001600160a01b0316141561060b576040805162461bcd60e51b815260206004820152601e60248201527f556e697377617056323a204944454e544943414c5f4144445245535345530000604482015290519081900360640190fd5b600080836001600160a01b0316856001600160a01b03161061062e578385610631565b84845b90925090506001600160a01b038216610691576040805162461bcd60e51b815260206004820152601760248201527f556e697377617056323a205a45524f5f41444452455353000000000000000000604482015290519081900360640190fd5b6001600160a01b03828116600090815260046020908152604080832085851684529091529020541615610704576040805162461bcd60e51b8152602060048201526016602482015275556e697377617056323a20504149525f45584953545360501b604482015290519081900360640190fd5b60606040518060200161071690610ab1565b6020820181038252601f19601f8201166040525090506000838360405160200180836001600160a01b031660601b8152601401826001600160a01b031660601b815260140192505050604051602081830303815290604052805190602001209050808251602084016000f59450846001600160a01b031663485cc95585856040518363ffffffff1660e01b815260040180836001600160a01b03168152602001826001600160a01b0316815260200192505050600060405180830381600087803b1580156107e357600080fd5b505af11580156107f7573d6000803e3d6000fd5b505050506001600160a01b0384811660008181526004602081815260408084208987168086529083528185208054978d166001600160a01b031998891681179091559383528185208686528352818520805488168517905560058054600181018255958190527f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db090950180549097168417909655925483519283529082015281517f0d3648bd0f6ba80134a33ba9275ac585d9d315f0ad8355cddefde31afa28d0e9929181900390910190a35050505092915050565b60046020908152600092835260408084209091529082529020546001600160a01b031681565b6001546001600160a01b03163314610949576040805162461bcd60e51b81526020600482015260146024820152732ab734b9bbb0b82b191d102327a92124a22222a760611b604482015290519081900360640190fd5b600080546001600160a01b0319166001600160a01b038316908117825560405190917f16da0a24182d367962c706d21ef18ecb3929c2bfaa661402e30c64ef3edad84891a250565b6001546001600160a01b031681565b6001546001600160a01b031633146109f6576040805162461bcd60e51b81526020600482015260146024820152732ab734b9bbb0b82b191d102327a92124a22222a760611b604482015290519081900360640190fd5b6001600160a01b038216610a51576040805162461bcd60e51b815260206004820152601b60248201527f556e697377617056323a20494e56414c49445f494e49545f4152470000000000604482015290519081900360640190fd5b6001600160a01b038216600081815260036020908152604091829020805460ff1916851515908117909155825190815291517ff1dedd39534cbe809787f14bbfd8930a9c495b0885d1c0661bb616ecd1408d9b9281900390910190a25050565b61240380610abf8339019056fe60806040526001600c5534801561001557600080fd5b50604080518082018252600d81526c293ab13c902628102a37b5b2b760991b6020918201528151808301835260018152603160f81b9082015281517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f818301527f09012eaf0661edaac30c2aae28b66d2c7fab81fef27b6da47fcc0c129a73e7d5818401527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660608201524660808201523060a0808301919091528351808303909101815260c09091019092528151910120600355600580546001600160a01b031916331790556122f88061010b6000396000f3fe608060405234801561001057600080fd5b50600436106101a95760003560e01c806370a08231116100f9578063ba9a7a5611610097578063d21220a711610071578063d21220a714610539578063d505accf14610541578063dd62ed3e14610592578063fff6cae9146105c0576101a9565b8063ba9a7a5614610503578063bc25cf771461050b578063c45a015514610531576101a9565b806389afcb44116100d357806389afcb44146103ff57806395d89b411461043e578063a9059cbb14610446578063b6b4c48814610472576101a9565b806370a08231146103ab5780637464fc3d146103d15780637ecebe00146103d9576101a9565b806330adf81f11610166578063485cc95511610140578063485cc955146103455780635909c0d5146103755780635a3d54931461037d5780636a62784214610385576101a9565b806330adf81f14610317578063313ce5671461031f5780633644e5151461033d576101a9565b806306fdde03146101ae5780630902f1ac1461022b578063095ea7b3146102635780630dfe1681146102a357806318160ddd146102c757806323b872dd146102e1575b600080fd5b6101b66105c8565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101f05781810151838201526020016101d8565b50505050905090810190601f16801561021d5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6102336105f1565b604080516001600160701b03948516815292909316602083015263ffffffff168183015290519081900360600190f35b61028f6004803603604081101561027957600080fd5b506001600160a01b03813516906020013561061b565b604080519115158252519081900360200190f35b6102ab610632565b604080516001600160a01b039092168252519081900360200190f35b6102cf610641565b60408051918252519081900360200190f35b61028f600480360360608110156102f757600080fd5b506001600160a01b03813581169160208101359091169060400135610647565b6102cf6106db565b6103276106ff565b6040805160ff9092168252519081900360200190f35b6102cf610704565b6103736004803603604081101561035b57600080fd5b506001600160a01b038135811691602001351661070a565b005b6102cf61078e565b6102cf610794565b6102cf6004803603602081101561039b57600080fd5b50356001600160a01b031661079a565b6102cf600480360360208110156103c157600080fd5b50356001600160a01b0316610a7c565b6102cf610a8e565b6102cf600480360360208110156103ef57600080fd5b50356001600160a01b0316610a94565b6104256004803603602081101561041557600080fd5b50356001600160a01b0316610aa6565b6040805192835260208301919091528051918290030190f35b6101b6610e3a565b61028f6004803603604081101561045c57600080fd5b506001600160a01b038135169060200135610e59565b610373600480360360a081101561048857600080fd5b8135916020810135916001600160a01b036040830135169160608101359181019060a0810160808201356401000000008111156104c457600080fd5b8201836020820111156104d657600080fd5b803590602001918460018302840111640100000000831117156104f857600080fd5b509092509050610e66565b6102cf6112b8565b6103736004803603602081101561052157600080fd5b50356001600160a01b03166112be565b6102ab611430565b6102ab61143f565b610373600480360360e081101561055757600080fd5b506001600160a01b03813581169160208101359091169060408101359060608101359060ff6080820135169060a08101359060c0013561144e565b6102cf600480360360408110156105a857600080fd5b506001600160a01b0381358116916020013516611650565b61037361166d565b6040518060400160405280600d81526020016c293ab13c902628102a37b5b2b760991b81525081565b6008546001600160701b0380821692600160701b830490911691600160e01b900463ffffffff1690565b60006106283384846117cf565b5060015b92915050565b6006546001600160a01b031681565b60005481565b6001600160a01b0383166000908152600260209081526040808320338452909152812054600019146106c6576001600160a01b03841660009081526002602090815260408083203384529091529020546106a19083611831565b6001600160a01b03851660009081526002602090815260408083203384529091529020555b6106d1848484611881565b5060019392505050565b7f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c981565b601281565b60035481565b6005546001600160a01b03163314610760576040805162461bcd60e51b81526020600482015260146024820152732ab734b9bbb0b82b191d102327a92124a22222a760611b604482015290519081900360640190fd5b600680546001600160a01b039384166001600160a01b03199182161790915560078054929093169116179055565b60095481565b600a5481565b6000600c546001146107e7576040805162461bcd60e51b8152602060048201526011602482015270155b9a5cddd85c158c8e881313d0d2d151607a1b604482015290519081900360640190fd5b6000600c819055806107f76105f1565b50600654604080516370a0823160e01b815230600482015290519395509193506000926001600160a01b03909116916370a08231916024808301926020929190829003018186803b15801561084b57600080fd5b505afa15801561085f573d6000803e3d6000fd5b505050506040513d602081101561087557600080fd5b5051600754604080516370a0823160e01b815230600482015290519293506000926001600160a01b03909216916370a0823191602480820192602092909190829003018186803b1580156108c857600080fd5b505afa1580156108dc573d6000803e3d6000fd5b505050506040513d60208110156108f257600080fd5b50519050600061090b836001600160701b038716611831565b90506000610922836001600160701b038716611831565b90506000610930878761192f565b6000549091508061096d576109596103e861095361094e8787611a6f565b611ad2565b90611831565b985061096860006103e8611b24565b6109b0565b6109ad6001600160701b0389166109848684611a6f565b8161098b57fe5b046001600160701b0389166109a08685611a6f565b816109a757fe5b04611bae565b98505b600089116109ef5760405162461bcd60e51b815260040180806020018281038252602881526020018061229b6028913960400191505060405180910390fd5b6109f98a8a611b24565b610a0586868a8a611bc6565b8115610a2f57600854610a2b906001600160701b0380821691600160701b900416611a6f565b600b555b6040805185815260208101859052815133927f4c209b5fc8ad50758f13e2e1088ba56a560dff690a1c6fef26394f4c03821c4f928290030190a250506001600c5550949695505050505050565b60016020526000908152604090205481565b600b5481565b60046020526000908152604090205481565b600080600c54600114610af4576040805162461bcd60e51b8152602060048201526011602482015270155b9a5cddd85c158c8e881313d0d2d151607a1b604482015290519081900360640190fd5b6000600c81905580610b046105f1565b50600654600754604080516370a0823160e01b815230600482015290519496509294506001600160a01b039182169391169160009184916370a08231916024808301926020929190829003018186803b158015610b6057600080fd5b505afa158015610b74573d6000803e3d6000fd5b505050506040513d6020811015610b8a57600080fd5b5051604080516370a0823160e01b815230600482015290519192506000916001600160a01b038516916370a08231916024808301926020929190829003018186803b158015610bd857600080fd5b505afa158015610bec573d6000803e3d6000fd5b505050506040513d6020811015610c0257600080fd5b505130600090815260016020526040812054919250610c21888861192f565b60005490915080610c328487611a6f565b81610c3957fe5b049a5080610c478486611a6f565b81610c4e57fe5b04995060008b118015610c61575060008a115b610c9c5760405162461bcd60e51b81526004018080602001828103825260288152602001806122736028913960400191505060405180910390fd5b610ca63084611d85565b610cb1878d8d611e17565b610cbc868d8c611e17565b604080516370a0823160e01b815230600482015290516001600160a01b038916916370a08231916024808301926020929190829003018186803b158015610d0257600080fd5b505afa158015610d16573d6000803e3d6000fd5b505050506040513d6020811015610d2c57600080fd5b5051604080516370a0823160e01b815230600482015290519196506001600160a01b038816916370a0823191602480820192602092909190829003018186803b158015610d7857600080fd5b505afa158015610d8c573d6000803e3d6000fd5b505050506040513d6020811015610da257600080fd5b50519350610db285858b8b611bc6565b8115610ddc57600854610dd8906001600160701b0380821691600160701b900416611a6f565b600b555b604080518c8152602081018c905281516001600160a01b038f169233927fdccd412f0b1252819cb1fd330b93224ca42612892bb3f4f789976e6d81936496929081900390910190a35050505050505050506001600c81905550915091565b604051806040016040528060038152602001620524c560ec1b81525081565b6000610628338484611881565b600c54600114610eb1576040805162461bcd60e51b8152602060048201526011602482015270155b9a5cddd85c158c8e881313d0d2d151607a1b604482015290519081900360640190fd5b6000600c5585151580610ec45750600085115b610eff5760405162461bcd60e51b81526004018080602001828103825260258152602001806122096025913960400191505060405180910390fd5b600080610f0a6105f1565b5091509150816001600160701b031688108015610f2f5750806001600160701b031687105b610f6a5760405162461bcd60e51b81526004018080602001828103825260218152602001806122526021913960400191505060405180910390fd5b6103e58510158015610f7e57506103e88511155b610fcf576040805162461bcd60e51b815260206004820152601960248201527f556e697377617056323a204645455f4d554c5449504c49455200000000000000604482015290519081900360640190fd5b6005546040805163610cdadd60e11b815233600482015290516001600160a01b039092169163c219b5ba91602480820192602092909190829003018186803b15801561101a57600080fd5b505afa15801561102e573d6000803e3d6000fd5b505050506040513d602081101561104457600080fd5b5051611050576103e594505b60065460075460009182916001600160a01b0391821691908116908a16821480159061108e5750806001600160a01b03168a6001600160a01b031614155b6110d7576040805162461bcd60e51b8152602060048201526015602482015274556e697377617056323a20494e56414c49445f544f60581b604482015290519081900360640190fd5b8b156110e8576110e8828b8e611e17565b8a156110f9576110f9818b8d611e17565b86156111ab57896001600160a01b03166310d1e85c338e8e8c8c6040518663ffffffff1660e01b815260040180866001600160a01b03168152602001858152602001848152602001806020018281038252848482818152602001925080828437600081840152601f19601f8201169050808301925050509650505050505050600060405180830381600087803b15801561119257600080fd5b505af11580156111a6573d6000803e3d6000fd5b505050505b604080516370a0823160e01b815230600482015290516001600160a01b038416916370a08231916024808301926020929190829003018186803b1580156111f157600080fd5b505afa158015611205573d6000803e3d6000fd5b505050506040513d602081101561121b57600080fd5b5051604080516370a0823160e01b815230600482015290519195506001600160a01b038316916370a0823191602480820192602092909190829003018186803b15801561126757600080fd5b505afa15801561127b573d6000803e3d6000fd5b505050506040513d602081101561129157600080fd5b505192506112a79150839050828c8c8c8c611fb1565b50506001600c555050505050505050565b6103e881565b600c54600114611309576040805162461bcd60e51b8152602060048201526011602482015270155b9a5cddd85c158c8e881313d0d2d151607a1b604482015290519081900360640190fd5b6000600c55600654600754600854604080516370a0823160e01b815230600482015290516001600160a01b0394851694909316926113b292859287926113ad926001600160701b03169185916370a0823191602480820192602092909190829003018186803b15801561137b57600080fd5b505afa15801561138f573d6000803e3d6000fd5b505050506040513d60208110156113a557600080fd5b505190611831565b611e17565b61142681846113ad6008600e9054906101000a90046001600160701b03166001600160701b0316856001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561137b57600080fd5b50506001600c5550565b6005546001600160a01b031681565b6007546001600160a01b031681565b42841015611498576040805162461bcd60e51b8152602060048201526012602482015271155b9a5cddd85c158c8e881156141254915160721b604482015290519081900360640190fd5b6003546001600160a01b0380891660008181526004602090815260408083208054600180820190925582517f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c98186015280840196909652958d166060860152608085018c905260a085019590955260c08085018b90528151808603909101815260e08501825280519083012061190160f01b6101008601526101028501969096526101228085019690965280518085039096018652610142840180825286519683019690962095839052610162840180825286905260ff89166101828501526101a284018890526101c28401879052519193926101e280820193601f1981019281900390910190855afa1580156115b3573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116158015906115e95750886001600160a01b0316816001600160a01b0316145b61163a576040805162461bcd60e51b815260206004820152601c60248201527f556e697377617056323a20494e56414c49445f5349474e415455524500000000604482015290519081900360640190fd5b6116458989896117cf565b505050505050505050565b600260209081526000928352604080842090915290825290205481565b600c546001146116b8576040805162461bcd60e51b8152602060048201526011602482015270155b9a5cddd85c158c8e881313d0d2d151607a1b604482015290519081900360640190fd5b6000600c55600654604080516370a0823160e01b815230600482015290516117c8926001600160a01b0316916370a08231916024808301926020929190829003018186803b15801561170957600080fd5b505afa15801561171d573d6000803e3d6000fd5b505050506040513d602081101561173357600080fd5b5051600754604080516370a0823160e01b815230600482015290516001600160a01b03909216916370a0823191602480820192602092909190829003018186803b15801561178057600080fd5b505afa158015611794573d6000803e3d6000fd5b505050506040513d60208110156117aa57600080fd5b50516008546001600160701b0380821691600160701b900416611bc6565b6001600c55565b6001600160a01b03808416600081815260026020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b8082038281111561062c576040805162461bcd60e51b815260206004820152601560248201527464732d6d6174682d7375622d756e646572666c6f7760581b604482015290519081900360640190fd5b6001600160a01b0383166000908152600160205260409020546118a49082611831565b6001600160a01b0380851660009081526001602052604080822093909355908416815220546118d39082612182565b6001600160a01b0380841660008181526001602090815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b600080600560009054906101000a90046001600160a01b03166001600160a01b031663017e7e586040518163ffffffff1660e01b815260040160206040518083038186803b15801561198057600080fd5b505afa158015611994573d6000803e3d6000fd5b505050506040513d60208110156119aa57600080fd5b5051600b546001600160a01b038216158015945091925090611a5b578015611a565760006119e761094e6001600160701b03888116908816611a6f565b905060006119f483611ad2565b905080821115611a53576000611a16611a0d8484611831565b60005490611a6f565b90506000611a2f83611a29866005611a6f565b90612182565b90506000818381611a3c57fe5b0490508015611a4f57611a4f8782611b24565b5050505b50505b611a67565b8015611a67576000600b555b505092915050565b6000811580611a8a57505080820282828281611a8757fe5b04145b61062c576040805162461bcd60e51b815260206004820152601460248201527364732d6d6174682d6d756c2d6f766572666c6f7760601b604482015290519081900360640190fd5b60006003821115611b15575080600160028204015b81811015611b0f57809150600281828581611afe57fe5b040181611b0757fe5b049050611ae7565b50611b1f565b8115611b1f575060015b919050565b600054611b319082612182565b60009081556001600160a01b038316815260016020526040902054611b569082612182565b6001600160a01b03831660008181526001602090815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b6000818310611bbd5781611bbf565b825b9392505050565b6001600160701b038411801590611be457506001600160701b038311155b611c2b576040805162461bcd60e51b8152602060048201526013602482015272556e697377617056323a204f564552464c4f5760681b604482015290519081900360640190fd5b60085463ffffffff42811691600160e01b90048116820390811615801590611c5b57506001600160701b03841615155b8015611c6f57506001600160701b03831615155b15611cda578063ffffffff16611c9785611c88866121d1565b6001600160e01b0316906121e3565b600980546001600160e01b03929092169290920201905563ffffffff8116611cc284611c88876121d1565b600a80546001600160e01b0392909216929092020190555b600880546dffffffffffffffffffffffffffff19166001600160701b03888116919091176dffffffffffffffffffffffffffff60701b1916600160701b8883168102919091176001600160e01b0316600160e01b63ffffffff871602179283905560408051848416815291909304909116602082015281517f1c411e9a96e071241c2f21f7726b17ae89e3cab4c78be50e062b03a9fffbbad1929181900390910190a1505050505050565b6001600160a01b038216600090815260016020526040902054611da89082611831565b6001600160a01b03831660009081526001602052604081209190915554611dcf9082611831565b60009081556040805183815290516001600160a01b038516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef919081900360200190a35050565b604080518082018252601981527f7472616e7366657228616464726573732c75696e74323536290000000000000060209182015281516001600160a01b0385811660248301526044808301869052845180840390910181526064909201845291810180516001600160e01b031663a9059cbb60e01b1781529251815160009460609489169392918291908083835b60208310611ec45780518252601f199092019160209182019101611ea5565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114611f26576040519150601f19603f3d011682016040523d82523d6000602084013e611f2b565b606091505b5091509150818015611f59575080511580611f595750808060200190516020811015611f5657600080fd5b50515b611faa576040805162461bcd60e51b815260206004820152601a60248201527f556e697377617056323a205452414e534645525f4641494c4544000000000000604482015290519081900360640190fd5b5050505050565b600080611fbc6105f1565b5091509150600086836001600160701b0316038911611fdc576000611feb565b86836001600160701b03160389035b9050600086836001600160701b0316038911612008576000612017565b86836001600160701b03160389035b905060008211806120285750600081115b6120635760405162461bcd60e51b815260040180806020018281038252602481526020018061222e6024913960400191505060405180910390fd5b6103e885900360006120846120788584611a6f565b6109538e6103e8611a6f565b905060006120956120788585611a6f565b6008549091506120c790620f4240906120c1906001600160701b0380821691600160701b900416611a6f565b90611a6f565b6120d18383611a6f565b1015612113576040805162461bcd60e51b815260206004820152600c60248201526b556e697377617056323a204b60a01b604482015290519081900360640190fd5b61211f8d8d8989611bc6565b60408051868152602081018690528082018d9052606081018c905290516001600160a01b038b169133917fd78ad95fa46c994b6551d0da85fc275fe613ce37657fb8d5e3d130840159d8229181900360800190a350505050505050505050505050565b8082018281101561062c576040805162461bcd60e51b815260206004820152601460248201527364732d6d6174682d6164642d6f766572666c6f7760601b604482015290519081900360640190fd5b6001600160701b0316600160701b0290565b60006001600160701b0382166001600160e01b0384168161220057fe5b04939250505056fe556e697377617056323a20494e53554646494349454e545f4f55545055545f414d4f554e54556e697377617056323a20494e53554646494349454e545f494e5055545f414d4f554e54556e697377617056323a20494e53554646494349454e545f4c4951554944495459556e697377617056323a20494e53554646494349454e545f4c49515549444954595f4255524e4544556e697377617056323a20494e53554646494349454e545f4c49515549444954595f4d494e544544a2646970667358221220fdf6994432f54ff94d23f25e9c938812e8ed56524b40959b185d9ff132ec6b1764736f6c634300060c0033a26469706673582212202a814d72317e4203497cb45f7c9f04834ab96baef28c7a1b00d79f76cb1553e564736f6c634300060c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100cf5760003560e01c80639aab92481161008c578063e6a4390511610066578063e6a439051461021b578063f46901ed14610249578063f851a4401461026f578063f9eb062214610277576100cf565b80639aab9248146101bf578063c219b5ba146101c7578063c9c65396146101ed576100cf565b8063017e7e58146100d4578063198c7f31146100f85780631e3dd18b146101285780634e1516fa14610145578063574f2ba31461017f578063704b6c0214610199575b600080fd5b6100dc6102a5565b604080516001600160a01b039092168252519081900360200190f35b6101266004803603604081101561010e57600080fd5b506001600160a01b03813516906020013515156102b4565b005b6100dc6004803603602081101561013e57600080fd5b50356103c5565b61016b6004803603602081101561015b57600080fd5b50356001600160a01b03166103ec565b604080519115158252519081900360200190f35b610187610401565b60408051918252519081900360200190f35b610126600480360360208110156101af57600080fd5b50356001600160a01b0316610407565b610187610502565b61016b600480360360208110156101dd57600080fd5b50356001600160a01b0316610534565b6100dc6004803603604081101561020357600080fd5b506001600160a01b0381358116916020013516610549565b6100dc6004803603604081101561023157600080fd5b506001600160a01b03813581169160200135166108cd565b6101266004803603602081101561025f57600080fd5b50356001600160a01b03166108f3565b6100dc610991565b6101266004803603604081101561028d57600080fd5b506001600160a01b03813516906020013515156109a0565b6000546001600160a01b031681565b6001546001600160a01b0316331461030a576040805162461bcd60e51b81526020600482015260146024820152732ab734b9bbb0b82b191d102327a92124a22222a760611b604482015290519081900360640190fd5b6001600160a01b038216610365576040805162461bcd60e51b815260206004820152601b60248201527f556e697377617056323a20494e56414c49445f494e49545f4152470000000000604482015290519081900360640190fd5b6001600160a01b038216600081815260026020908152604091829020805460ff1916851515908117909155825190815291517f7cdc2ba0ffcd869706e55b136a056e5a3cdbf866b93e226eea08d882a826363d9281900390910190a25050565b600581815481106103d257fe5b6000918252602090912001546001600160a01b0316905081565b60026020526000908152604090205460ff1681565b60055490565b6001546001600160a01b0316331461045d576040805162461bcd60e51b81526020600482015260146024820152732ab734b9bbb0b82b191d102327a92124a22222a760611b604482015290519081900360640190fd5b6001600160a01b0381166104b8576040805162461bcd60e51b815260206004820152601b60248201527f556e697377617056323a20494e56414c49445f494e49545f4152470000000000604482015290519081900360640190fd5b600180546001600160a01b0319166001600160a01b0383169081179091556040517f8fe72c3e0020beb3234e76ae6676fa576fbfcae600af1c4fea44784cf0db329c90600090a250565b60006040518060200161051490610ab1565b6020820181038252601f19601f8201166040525080519060200120905090565b60036020526000908152604090205460ff1681565b3360009081526002602052604081205460ff166105a4576040805162461bcd60e51b81526020600482015260146024820152732ab734b9bbb0b82b191d102327a92124a22222a760611b604482015290519081900360640190fd5b816001600160a01b0316836001600160a01b0316141561060b576040805162461bcd60e51b815260206004820152601e60248201527f556e697377617056323a204944454e544943414c5f4144445245535345530000604482015290519081900360640190fd5b600080836001600160a01b0316856001600160a01b03161061062e578385610631565b84845b90925090506001600160a01b038216610691576040805162461bcd60e51b815260206004820152601760248201527f556e697377617056323a205a45524f5f41444452455353000000000000000000604482015290519081900360640190fd5b6001600160a01b03828116600090815260046020908152604080832085851684529091529020541615610704576040805162461bcd60e51b8152602060048201526016602482015275556e697377617056323a20504149525f45584953545360501b604482015290519081900360640190fd5b60606040518060200161071690610ab1565b6020820181038252601f19601f8201166040525090506000838360405160200180836001600160a01b031660601b8152601401826001600160a01b031660601b815260140192505050604051602081830303815290604052805190602001209050808251602084016000f59450846001600160a01b031663485cc95585856040518363ffffffff1660e01b815260040180836001600160a01b03168152602001826001600160a01b0316815260200192505050600060405180830381600087803b1580156107e357600080fd5b505af11580156107f7573d6000803e3d6000fd5b505050506001600160a01b0384811660008181526004602081815260408084208987168086529083528185208054978d166001600160a01b031998891681179091559383528185208686528352818520805488168517905560058054600181018255958190527f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db090950180549097168417909655925483519283529082015281517f0d3648bd0f6ba80134a33ba9275ac585d9d315f0ad8355cddefde31afa28d0e9929181900390910190a35050505092915050565b60046020908152600092835260408084209091529082529020546001600160a01b031681565b6001546001600160a01b03163314610949576040805162461bcd60e51b81526020600482015260146024820152732ab734b9bbb0b82b191d102327a92124a22222a760611b604482015290519081900360640190fd5b600080546001600160a01b0319166001600160a01b038316908117825560405190917f16da0a24182d367962c706d21ef18ecb3929c2bfaa661402e30c64ef3edad84891a250565b6001546001600160a01b031681565b6001546001600160a01b031633146109f6576040805162461bcd60e51b81526020600482015260146024820152732ab734b9bbb0b82b191d102327a92124a22222a760611b604482015290519081900360640190fd5b6001600160a01b038216610a51576040805162461bcd60e51b815260206004820152601b60248201527f556e697377617056323a20494e56414c49445f494e49545f4152470000000000604482015290519081900360640190fd5b6001600160a01b038216600081815260036020908152604091829020805460ff1916851515908117909155825190815291517ff1dedd39534cbe809787f14bbfd8930a9c495b0885d1c0661bb616ecd1408d9b9281900390910190a25050565b61240380610abf8339019056fe60806040526001600c5534801561001557600080fd5b50604080518082018252600d81526c293ab13c902628102a37b5b2b760991b6020918201528151808301835260018152603160f81b9082015281517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f818301527f09012eaf0661edaac30c2aae28b66d2c7fab81fef27b6da47fcc0c129a73e7d5818401527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660608201524660808201523060a0808301919091528351808303909101815260c09091019092528151910120600355600580546001600160a01b031916331790556122f88061010b6000396000f3fe608060405234801561001057600080fd5b50600436106101a95760003560e01c806370a08231116100f9578063ba9a7a5611610097578063d21220a711610071578063d21220a714610539578063d505accf14610541578063dd62ed3e14610592578063fff6cae9146105c0576101a9565b8063ba9a7a5614610503578063bc25cf771461050b578063c45a015514610531576101a9565b806389afcb44116100d357806389afcb44146103ff57806395d89b411461043e578063a9059cbb14610446578063b6b4c48814610472576101a9565b806370a08231146103ab5780637464fc3d146103d15780637ecebe00146103d9576101a9565b806330adf81f11610166578063485cc95511610140578063485cc955146103455780635909c0d5146103755780635a3d54931461037d5780636a62784214610385576101a9565b806330adf81f14610317578063313ce5671461031f5780633644e5151461033d576101a9565b806306fdde03146101ae5780630902f1ac1461022b578063095ea7b3146102635780630dfe1681146102a357806318160ddd146102c757806323b872dd146102e1575b600080fd5b6101b66105c8565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101f05781810151838201526020016101d8565b50505050905090810190601f16801561021d5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6102336105f1565b604080516001600160701b03948516815292909316602083015263ffffffff168183015290519081900360600190f35b61028f6004803603604081101561027957600080fd5b506001600160a01b03813516906020013561061b565b604080519115158252519081900360200190f35b6102ab610632565b604080516001600160a01b039092168252519081900360200190f35b6102cf610641565b60408051918252519081900360200190f35b61028f600480360360608110156102f757600080fd5b506001600160a01b03813581169160208101359091169060400135610647565b6102cf6106db565b6103276106ff565b6040805160ff9092168252519081900360200190f35b6102cf610704565b6103736004803603604081101561035b57600080fd5b506001600160a01b038135811691602001351661070a565b005b6102cf61078e565b6102cf610794565b6102cf6004803603602081101561039b57600080fd5b50356001600160a01b031661079a565b6102cf600480360360208110156103c157600080fd5b50356001600160a01b0316610a7c565b6102cf610a8e565b6102cf600480360360208110156103ef57600080fd5b50356001600160a01b0316610a94565b6104256004803603602081101561041557600080fd5b50356001600160a01b0316610aa6565b6040805192835260208301919091528051918290030190f35b6101b6610e3a565b61028f6004803603604081101561045c57600080fd5b506001600160a01b038135169060200135610e59565b610373600480360360a081101561048857600080fd5b8135916020810135916001600160a01b036040830135169160608101359181019060a0810160808201356401000000008111156104c457600080fd5b8201836020820111156104d657600080fd5b803590602001918460018302840111640100000000831117156104f857600080fd5b509092509050610e66565b6102cf6112b8565b6103736004803603602081101561052157600080fd5b50356001600160a01b03166112be565b6102ab611430565b6102ab61143f565b610373600480360360e081101561055757600080fd5b506001600160a01b03813581169160208101359091169060408101359060608101359060ff6080820135169060a08101359060c0013561144e565b6102cf600480360360408110156105a857600080fd5b506001600160a01b0381358116916020013516611650565b61037361166d565b6040518060400160405280600d81526020016c293ab13c902628102a37b5b2b760991b81525081565b6008546001600160701b0380821692600160701b830490911691600160e01b900463ffffffff1690565b60006106283384846117cf565b5060015b92915050565b6006546001600160a01b031681565b60005481565b6001600160a01b0383166000908152600260209081526040808320338452909152812054600019146106c6576001600160a01b03841660009081526002602090815260408083203384529091529020546106a19083611831565b6001600160a01b03851660009081526002602090815260408083203384529091529020555b6106d1848484611881565b5060019392505050565b7f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c981565b601281565b60035481565b6005546001600160a01b03163314610760576040805162461bcd60e51b81526020600482015260146024820152732ab734b9bbb0b82b191d102327a92124a22222a760611b604482015290519081900360640190fd5b600680546001600160a01b039384166001600160a01b03199182161790915560078054929093169116179055565b60095481565b600a5481565b6000600c546001146107e7576040805162461bcd60e51b8152602060048201526011602482015270155b9a5cddd85c158c8e881313d0d2d151607a1b604482015290519081900360640190fd5b6000600c819055806107f76105f1565b50600654604080516370a0823160e01b815230600482015290519395509193506000926001600160a01b03909116916370a08231916024808301926020929190829003018186803b15801561084b57600080fd5b505afa15801561085f573d6000803e3d6000fd5b505050506040513d602081101561087557600080fd5b5051600754604080516370a0823160e01b815230600482015290519293506000926001600160a01b03909216916370a0823191602480820192602092909190829003018186803b1580156108c857600080fd5b505afa1580156108dc573d6000803e3d6000fd5b505050506040513d60208110156108f257600080fd5b50519050600061090b836001600160701b038716611831565b90506000610922836001600160701b038716611831565b90506000610930878761192f565b6000549091508061096d576109596103e861095361094e8787611a6f565b611ad2565b90611831565b985061096860006103e8611b24565b6109b0565b6109ad6001600160701b0389166109848684611a6f565b8161098b57fe5b046001600160701b0389166109a08685611a6f565b816109a757fe5b04611bae565b98505b600089116109ef5760405162461bcd60e51b815260040180806020018281038252602881526020018061229b6028913960400191505060405180910390fd5b6109f98a8a611b24565b610a0586868a8a611bc6565b8115610a2f57600854610a2b906001600160701b0380821691600160701b900416611a6f565b600b555b6040805185815260208101859052815133927f4c209b5fc8ad50758f13e2e1088ba56a560dff690a1c6fef26394f4c03821c4f928290030190a250506001600c5550949695505050505050565b60016020526000908152604090205481565b600b5481565b60046020526000908152604090205481565b600080600c54600114610af4576040805162461bcd60e51b8152602060048201526011602482015270155b9a5cddd85c158c8e881313d0d2d151607a1b604482015290519081900360640190fd5b6000600c81905580610b046105f1565b50600654600754604080516370a0823160e01b815230600482015290519496509294506001600160a01b039182169391169160009184916370a08231916024808301926020929190829003018186803b158015610b6057600080fd5b505afa158015610b74573d6000803e3d6000fd5b505050506040513d6020811015610b8a57600080fd5b5051604080516370a0823160e01b815230600482015290519192506000916001600160a01b038516916370a08231916024808301926020929190829003018186803b158015610bd857600080fd5b505afa158015610bec573d6000803e3d6000fd5b505050506040513d6020811015610c0257600080fd5b505130600090815260016020526040812054919250610c21888861192f565b60005490915080610c328487611a6f565b81610c3957fe5b049a5080610c478486611a6f565b81610c4e57fe5b04995060008b118015610c61575060008a115b610c9c5760405162461bcd60e51b81526004018080602001828103825260288152602001806122736028913960400191505060405180910390fd5b610ca63084611d85565b610cb1878d8d611e17565b610cbc868d8c611e17565b604080516370a0823160e01b815230600482015290516001600160a01b038916916370a08231916024808301926020929190829003018186803b158015610d0257600080fd5b505afa158015610d16573d6000803e3d6000fd5b505050506040513d6020811015610d2c57600080fd5b5051604080516370a0823160e01b815230600482015290519196506001600160a01b038816916370a0823191602480820192602092909190829003018186803b158015610d7857600080fd5b505afa158015610d8c573d6000803e3d6000fd5b505050506040513d6020811015610da257600080fd5b50519350610db285858b8b611bc6565b8115610ddc57600854610dd8906001600160701b0380821691600160701b900416611a6f565b600b555b604080518c8152602081018c905281516001600160a01b038f169233927fdccd412f0b1252819cb1fd330b93224ca42612892bb3f4f789976e6d81936496929081900390910190a35050505050505050506001600c81905550915091565b604051806040016040528060038152602001620524c560ec1b81525081565b6000610628338484611881565b600c54600114610eb1576040805162461bcd60e51b8152602060048201526011602482015270155b9a5cddd85c158c8e881313d0d2d151607a1b604482015290519081900360640190fd5b6000600c5585151580610ec45750600085115b610eff5760405162461bcd60e51b81526004018080602001828103825260258152602001806122096025913960400191505060405180910390fd5b600080610f0a6105f1565b5091509150816001600160701b031688108015610f2f5750806001600160701b031687105b610f6a5760405162461bcd60e51b81526004018080602001828103825260218152602001806122526021913960400191505060405180910390fd5b6103e58510158015610f7e57506103e88511155b610fcf576040805162461bcd60e51b815260206004820152601960248201527f556e697377617056323a204645455f4d554c5449504c49455200000000000000604482015290519081900360640190fd5b6005546040805163610cdadd60e11b815233600482015290516001600160a01b039092169163c219b5ba91602480820192602092909190829003018186803b15801561101a57600080fd5b505afa15801561102e573d6000803e3d6000fd5b505050506040513d602081101561104457600080fd5b5051611050576103e594505b60065460075460009182916001600160a01b0391821691908116908a16821480159061108e5750806001600160a01b03168a6001600160a01b031614155b6110d7576040805162461bcd60e51b8152602060048201526015602482015274556e697377617056323a20494e56414c49445f544f60581b604482015290519081900360640190fd5b8b156110e8576110e8828b8e611e17565b8a156110f9576110f9818b8d611e17565b86156111ab57896001600160a01b03166310d1e85c338e8e8c8c6040518663ffffffff1660e01b815260040180866001600160a01b03168152602001858152602001848152602001806020018281038252848482818152602001925080828437600081840152601f19601f8201169050808301925050509650505050505050600060405180830381600087803b15801561119257600080fd5b505af11580156111a6573d6000803e3d6000fd5b505050505b604080516370a0823160e01b815230600482015290516001600160a01b038416916370a08231916024808301926020929190829003018186803b1580156111f157600080fd5b505afa158015611205573d6000803e3d6000fd5b505050506040513d602081101561121b57600080fd5b5051604080516370a0823160e01b815230600482015290519195506001600160a01b038316916370a0823191602480820192602092909190829003018186803b15801561126757600080fd5b505afa15801561127b573d6000803e3d6000fd5b505050506040513d602081101561129157600080fd5b505192506112a79150839050828c8c8c8c611fb1565b50506001600c555050505050505050565b6103e881565b600c54600114611309576040805162461bcd60e51b8152602060048201526011602482015270155b9a5cddd85c158c8e881313d0d2d151607a1b604482015290519081900360640190fd5b6000600c55600654600754600854604080516370a0823160e01b815230600482015290516001600160a01b0394851694909316926113b292859287926113ad926001600160701b03169185916370a0823191602480820192602092909190829003018186803b15801561137b57600080fd5b505afa15801561138f573d6000803e3d6000fd5b505050506040513d60208110156113a557600080fd5b505190611831565b611e17565b61142681846113ad6008600e9054906101000a90046001600160701b03166001600160701b0316856001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561137b57600080fd5b50506001600c5550565b6005546001600160a01b031681565b6007546001600160a01b031681565b42841015611498576040805162461bcd60e51b8152602060048201526012602482015271155b9a5cddd85c158c8e881156141254915160721b604482015290519081900360640190fd5b6003546001600160a01b0380891660008181526004602090815260408083208054600180820190925582517f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c98186015280840196909652958d166060860152608085018c905260a085019590955260c08085018b90528151808603909101815260e08501825280519083012061190160f01b6101008601526101028501969096526101228085019690965280518085039096018652610142840180825286519683019690962095839052610162840180825286905260ff89166101828501526101a284018890526101c28401879052519193926101e280820193601f1981019281900390910190855afa1580156115b3573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116158015906115e95750886001600160a01b0316816001600160a01b0316145b61163a576040805162461bcd60e51b815260206004820152601c60248201527f556e697377617056323a20494e56414c49445f5349474e415455524500000000604482015290519081900360640190fd5b6116458989896117cf565b505050505050505050565b600260209081526000928352604080842090915290825290205481565b600c546001146116b8576040805162461bcd60e51b8152602060048201526011602482015270155b9a5cddd85c158c8e881313d0d2d151607a1b604482015290519081900360640190fd5b6000600c55600654604080516370a0823160e01b815230600482015290516117c8926001600160a01b0316916370a08231916024808301926020929190829003018186803b15801561170957600080fd5b505afa15801561171d573d6000803e3d6000fd5b505050506040513d602081101561173357600080fd5b5051600754604080516370a0823160e01b815230600482015290516001600160a01b03909216916370a0823191602480820192602092909190829003018186803b15801561178057600080fd5b505afa158015611794573d6000803e3d6000fd5b505050506040513d60208110156117aa57600080fd5b50516008546001600160701b0380821691600160701b900416611bc6565b6001600c55565b6001600160a01b03808416600081815260026020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b8082038281111561062c576040805162461bcd60e51b815260206004820152601560248201527464732d6d6174682d7375622d756e646572666c6f7760581b604482015290519081900360640190fd5b6001600160a01b0383166000908152600160205260409020546118a49082611831565b6001600160a01b0380851660009081526001602052604080822093909355908416815220546118d39082612182565b6001600160a01b0380841660008181526001602090815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b600080600560009054906101000a90046001600160a01b03166001600160a01b031663017e7e586040518163ffffffff1660e01b815260040160206040518083038186803b15801561198057600080fd5b505afa158015611994573d6000803e3d6000fd5b505050506040513d60208110156119aa57600080fd5b5051600b546001600160a01b038216158015945091925090611a5b578015611a565760006119e761094e6001600160701b03888116908816611a6f565b905060006119f483611ad2565b905080821115611a53576000611a16611a0d8484611831565b60005490611a6f565b90506000611a2f83611a29866005611a6f565b90612182565b90506000818381611a3c57fe5b0490508015611a4f57611a4f8782611b24565b5050505b50505b611a67565b8015611a67576000600b555b505092915050565b6000811580611a8a57505080820282828281611a8757fe5b04145b61062c576040805162461bcd60e51b815260206004820152601460248201527364732d6d6174682d6d756c2d6f766572666c6f7760601b604482015290519081900360640190fd5b60006003821115611b15575080600160028204015b81811015611b0f57809150600281828581611afe57fe5b040181611b0757fe5b049050611ae7565b50611b1f565b8115611b1f575060015b919050565b600054611b319082612182565b60009081556001600160a01b038316815260016020526040902054611b569082612182565b6001600160a01b03831660008181526001602090815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b6000818310611bbd5781611bbf565b825b9392505050565b6001600160701b038411801590611be457506001600160701b038311155b611c2b576040805162461bcd60e51b8152602060048201526013602482015272556e697377617056323a204f564552464c4f5760681b604482015290519081900360640190fd5b60085463ffffffff42811691600160e01b90048116820390811615801590611c5b57506001600160701b03841615155b8015611c6f57506001600160701b03831615155b15611cda578063ffffffff16611c9785611c88866121d1565b6001600160e01b0316906121e3565b600980546001600160e01b03929092169290920201905563ffffffff8116611cc284611c88876121d1565b600a80546001600160e01b0392909216929092020190555b600880546dffffffffffffffffffffffffffff19166001600160701b03888116919091176dffffffffffffffffffffffffffff60701b1916600160701b8883168102919091176001600160e01b0316600160e01b63ffffffff871602179283905560408051848416815291909304909116602082015281517f1c411e9a96e071241c2f21f7726b17ae89e3cab4c78be50e062b03a9fffbbad1929181900390910190a1505050505050565b6001600160a01b038216600090815260016020526040902054611da89082611831565b6001600160a01b03831660009081526001602052604081209190915554611dcf9082611831565b60009081556040805183815290516001600160a01b038516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef919081900360200190a35050565b604080518082018252601981527f7472616e7366657228616464726573732c75696e74323536290000000000000060209182015281516001600160a01b0385811660248301526044808301869052845180840390910181526064909201845291810180516001600160e01b031663a9059cbb60e01b1781529251815160009460609489169392918291908083835b60208310611ec45780518252601f199092019160209182019101611ea5565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114611f26576040519150601f19603f3d011682016040523d82523d6000602084013e611f2b565b606091505b5091509150818015611f59575080511580611f595750808060200190516020811015611f5657600080fd5b50515b611faa576040805162461bcd60e51b815260206004820152601a60248201527f556e697377617056323a205452414e534645525f4641494c4544000000000000604482015290519081900360640190fd5b5050505050565b600080611fbc6105f1565b5091509150600086836001600160701b0316038911611fdc576000611feb565b86836001600160701b03160389035b9050600086836001600160701b0316038911612008576000612017565b86836001600160701b03160389035b905060008211806120285750600081115b6120635760405162461bcd60e51b815260040180806020018281038252602481526020018061222e6024913960400191505060405180910390fd5b6103e885900360006120846120788584611a6f565b6109538e6103e8611a6f565b905060006120956120788585611a6f565b6008549091506120c790620f4240906120c1906001600160701b0380821691600160701b900416611a6f565b90611a6f565b6120d18383611a6f565b1015612113576040805162461bcd60e51b815260206004820152600c60248201526b556e697377617056323a204b60a01b604482015290519081900360640190fd5b61211f8d8d8989611bc6565b60408051868152602081018690528082018d9052606081018c905290516001600160a01b038b169133917fd78ad95fa46c994b6551d0da85fc275fe613ce37657fb8d5e3d130840159d8229181900360800190a350505050505050505050505050565b8082018281101561062c576040805162461bcd60e51b815260206004820152601460248201527364732d6d6174682d6164642d6f766572666c6f7760601b604482015290519081900360640190fd5b6001600160701b0316600160701b0290565b60006001600160701b0382166001600160e01b0384168161220057fe5b04939250505056fe556e697377617056323a20494e53554646494349454e545f4f55545055545f414d4f554e54556e697377617056323a20494e53554646494349454e545f494e5055545f414d4f554e54556e697377617056323a20494e53554646494349454e545f4c4951554944495459556e697377617056323a20494e53554646494349454e545f4c49515549444954595f4255524e4544556e697377617056323a20494e53554646494349454e545f4c49515549444954595f4d494e544544a2646970667358221220fdf6994432f54ff94d23f25e9c938812e8ed56524b40959b185d9ff132ec6b1764736f6c634300060c0033a26469706673582212202a814d72317e4203497cb45f7c9f04834ab96baef28c7a1b00d79f76cb1553e564736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 14516,
        "contract": "contracts/amm/UniswapV2Factory.sol:UniswapV2Factory",
        "label": "feeTo",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 14519,
        "contract": "contracts/amm/UniswapV2Factory.sol:UniswapV2Factory",
        "label": "admin",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 14524,
        "contract": "contracts/amm/UniswapV2Factory.sol:UniswapV2Factory",
        "label": "pairCreators",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 14529,
        "contract": "contracts/amm/UniswapV2Factory.sol:UniswapV2Factory",
        "label": "feeDeductionSwappers",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 14536,
        "contract": "contracts/amm/UniswapV2Factory.sol:UniswapV2Factory",
        "label": "getPair",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_mapping(t_address,t_address))"
      },
      {
        "astId": 14540,
        "contract": "contracts/amm/UniswapV2Factory.sol:UniswapV2Factory",
        "label": "allPairs",
        "offset": 0,
        "slot": "5",
        "type": "t_array(t_address)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_address))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => address))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_address)"
      }
    }
  }
}